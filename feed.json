{
    "version": "https://jsonfeed.org/version/1",
    "title": "{ LebCit }",
    "description": "",
    "home_page_url": "https://lebcit.github.io",
    "feed_url": "https://lebcit.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "LebCit"
    },
    "items": [
        {
            "id": "https://lebcit.github.io/creating-a-customizer-control-with-javascript.html",
            "url": "https://lebcit.github.io/creating-a-customizer-control-with-javascript.html",
            "title": "Creating a Customizer control with JavaScript",
            "summary": " This post is about creating a control, from A to Z, in WordPress Customizer with JavaScript. Did you know that you can create panels, sections and controls in the Customizer with JavaScript ? \"The PHP API for their registration is essentially a wrapper for the underlying JS API\" as mentioned by Weston Ruter in&hellip;",
            "content_html": "\n  <p>\n    <em>This post is about creating a control, from A to Z, in WordPress Customizer with JavaScript.</em>\n  </p>\n\n  <p>\n    Did you know that you can create panels, sections and controls in the Customizer with JavaScript ?\n<br>\"The PHP API for their registration is essentially a wrapper for the underlying JS API\" as mentioned by Weston Ruter in <a href=\"https://wp.me/p2AvED-6c4\" target=\"_blank\">Improvements to the Customize JS API in 4.9</a>&nbsp;\n  </p>\n\n  <p>\n    He also says \"you can also avoid statically registering settings and partials in PHP by instead adding filters to dynamically recognize settings and partials, allowing them to be registered on demand\", meaning that you can create settings and partials in JS but will have to register them in PHP via a filter because they must be sanitized and validated by the server for security reasons !\n  </p>\n\n  <p>\n    For this task, we need to :\n<br>- access the Customizer Pane to create a Panel, a Section, a Setting and a Control with JS\n<br>- access the Customizer Preview to define the related Partial of the Control with JS\n<br>- add a filter to validate and sanitize the Setting with PHP\n<br>For more information about how things are related in the Customizer, please read my post \"<a href=\"https://lebcit.github.io/listen-for-changes-in-customizer-preview.html\">Listen for changes in Customizer Preview !</a>\"\n  </p>\n\n  <p>\n    I'll explain it as if the reader is a beginner so she/he can understand and follow along.\n  </p>\n\n  <p>\n    My tree looks like this:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>- theme ( main folder)\n-- inc (folder)\n--- customizer.php\n-- js (folder)\n--- controls.js\n--- customizer.js\n--- main.js\n-- functions.php</code></pre>\n\n  <p>\n    The functions.php file is used to :\n<br>- enqueue and localize main.js where we will render on the front end our choice(s) from the Customizer\n<br>- require the customizer.php file where we hook controls.js (for Customizer Pane) and customizer.js (for Customizer Preview)\n<br>We can of course hook controls.js and customizer.js from functions.php but it's better to keep things separated.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>// File functions.php\n/**\n * Load and localize main.js.\n */\nfunction main_js() {\n    wp_enqueue_script( 'main-js', get_theme_file_uri( '/js/main.js' ), array(), '1.0', true );\n    // Localize the script with new data and pass php variables to JS.\n    $main_js_data = array(\n        /** FOR LATER USE. */\n        'siteTitleColor' =&gt; get_theme_mod('siteTitleColorSetting', '#fff'),\n    );\n    wp_localize_script( 'main-js', 'main_vars', $main_js_data );\n}\nadd_action( 'wp_enqueue_scripts', 'main_js' );\n\n/**\n * Customizer additions.\n */\nrequire get_template_directory() . '/inc/customizer.php';</code></pre>\n<pre class=\"line-numbers  language-html\"><code>// File customizer.php\n/**\n * Hooking in JS code to affect the controls in the Customizer.\n */\nfunction midday_customize_controls_js() {\n    wp_enqueue_script( 'midday-controls', get_template_directory_uri() . '/js/controls.js', array( 'customize-controls' ), filemtime( get_theme_file_path( '/js/controls.js' ) ), true );\n}\nadd_action( 'customize_controls_enqueue_scripts', 'midday_customize_controls_js' );\n\n/**\n * Binds JS handlers to make Theme Customizer preview reload changes asynchronously.\n */\nfunction midday_customize_preview_js() {\n    wp_enqueue_script( 'midday-customizer', get_template_directory_uri() . '/js/customizer.js', array( 'customize-preview' ), '20151215', true );\n}\nadd_action( 'customize_preview_init', 'midday_customize_preview_js' );</code></pre>\n\n  <p>\n    If you don't know what is <a href=\"https://developer.wordpress.org/reference/functions/wp_localize_script/\" target=\"_blank\">wp_localize_script()</a>, think of it as a bridge between PHP and JS where we can pass variables from PHP to JS.\n<br>Just to let you know, there is also another function <a href=\"https://developer.wordpress.org/reference/functions/wp_add_inline_script/\" target=\"_blank\">wp_add_inline_script()</a> to add JS code to a registered JS file.\n  </p>\n\n  <p>\n    Now that we are all set, let's create a Panel, a Section, a Setting and a Control in controls.js to change the site title color.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>/**\n * File controls.js\n *\n * Access Theme Customizer Controls for a better user experience.\n */\n(function (api) {\n    api.bind('ready', function () {\n        // Create panel.\n    api.panel.add(\n        new api.Panel('myPanel', {\n        title: 'Theme Options',\n                description: 'Customize Theme',\n                priority: 5 // Optional default is 160.\n        })\n    );\n        // Site Title Color Section.\n        api.section.add(\n            new api.Section('siteTitleColorSection', {\n                title: 'Site Title Color Section',\n                panel: 'myPanel',\n                customizeAction: 'Customizing ▸ Site Title Color', // String above title's Section.\n                priority: 5 // The order of this section in the panel.\n            })\n        );\n        // Site Title Color Setting.\n        api.add(\n            new api.Setting('siteTitleColorSetting', '#fff', {\n                transport: 'postMessage'\n            })\n        );\n        // Site Title Color Control.\n        api.control.add(\n        new wp.customize.ColorControl('siteTitleColorControl', {\n                section: 'siteTitleColorSection',\n                label : 'Site Title Color Control',\n        setting: 'siteTitleColorSetting',\n                priority: 5 // The order of this control in the section.\n        })\n    );\n    });\n}) (wp.customize);</code></pre>\n\n  <p>\n    Please note that the pattern for the Setting is different from the others !\n<br>For the Setting, we type <code>api.add(setting)</code> and define in the <code>setting</code> an <code>id</code>, a <code>defaultValue</code>, then we pass the desired call type (here we are using <code>postMessage</code>).\n  </p>\n\n  <p>\n    Now, let's access the Customizer Preview in customizer.js and define how the Setting joins the Control to the Partial.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>/**\n * File customizer.js.\n *\n * Theme Customizer enhancements for a better user experience.\n *\n * Contains handlers to make Theme Customizer preview reload changes asynchronously.\n */\n\n(function ($) {\n    // Site Title Color.\n    wp.customize(\"siteTitleColorSetting\", function (value) {\n        value.bind(function (new_value) {\n            $(\".site-title a\").css(\"color\", new_value);\n        });\n    });\n}(jQuery));</code></pre>\n\n  <p>\n    Now, let's add in customizer.php the filter to validate and sanitize our Setting, preferably (for logic) after the code that hooks controls.js\n  </p>\n<pre class=\"line-numbers  language-html\"><code>// File customizer.php\nadd_filter(\n    'customize_dynamic_setting_args',\n    function( $setting_args, $setting_id ) {\n        if ( 'siteTitleColorSetting' === $setting_id ) {\n            $setting_args = array(\n                'sanitize_callback' =&gt; 'sanitize_hex_color',\n            );\n        }\n        return $setting_args;\n    },\n    10,\n    2\n);</code></pre>\n\n  <p>\n    As you can see, the above function uses the <a href=\"https://developer.wordpress.org/reference/hooks/customize_dynamic_setting_args/\" target=\"_blank\">customize_dynamic_setting_args</a> filter to tell the server to validate/recognize the Setting and to sanitize it.\n<br>The number 10 is the priority of execution of the function, and the number 2 is the number of arguments the function accepts.\n<br>More info about <a href=\"https://developer.wordpress.org/reference/functions/add_filter/\" target=\"_blank\">add_filter()</a> in the Code Reference.\n  </p>\n\n  <p>\n    Now, if you go to the Customizer, you'll find the created panel, section, setting and control.\n<br>If you try to change the site title it will change according to your choice.\n<br>But if you publish it, nothing will happen on the front end 🤔\n<br>So, our final step is to render/reflect our choice in the Customizer on the front end.\n<br>Remember the beginning of this post ?\n<br>We have loaded and localized main.js for this purpose 😉\n<br>Open main.js and add the following code\n  </p>\n<pre class=\"line-numbers  language-html\"><code>/**\n * File main.js.\n *\n * Handles theme's JS functions.\n */\n\"use strict\";\n\nconst siteTitleColor = midday_vars.siteTitleColor; // Retriving the passed variable from PHP to JS.\nconst siteTitleAnchor = document.querySelector('.site-title a'); // Select the site title anchor.\nif (siteTitleColor) { // If their is any value.\n    siteTitleAnchor.style.color = siteTitleColor; // Add this value as a color to the site title anchor.\n}</code></pre>\n\n  <p>\n    The code is explained and easy to understand, if you have any question don't hesitate !<br>\n  </p>\n\n  <p>\n    As a final note, I would like to let you know that I've created the same control with PHP along with the JS one. \n<br>When we change the site title color with the PHP control (let's say #000) and the JS control (let's say #81d742) and publish our changes, it's the JS control that takes over 💪&nbsp;\n  </p>\n\n  <p>\n    Hope this post will help you begin using the Customizer's JS API instead of it's PHP API 😊\n  </p>",
            "image": "https://lebcit.github.io/media/posts/12/screenshot-creating-a-customizer-control-with-javascript.png",
            "author": {
                "name": "LebCit"
            },
            "tags": [
                   "JavaScript",
                   "Development",
                   "Customizer"
            ],
            "date_published": "2020-12-08T05:57:18+02:00",
            "date_modified": "2020-12-08T05:57:18+02:00"
        },
        {
            "id": "https://lebcit.github.io/clear-your-local-development-cache-with-js.html",
            "url": "https://lebcit.github.io/clear-your-local-development-cache-with-js.html",
            "title": "Clear your local development cache with JS",
            "summary": " This post is about clearing your local development cache with JavaScript without a server side language. When we use a server side language to get our changes this is what happens : 1- the Request is made by the browser to the server 2- the Response is sent from the server to the browser&hellip;",
            "content_html": "\n  <p>\n    <em>This post is about clearing your local development cache with JavaScript without a server side language.</em>\n  </p>\n\n  <p>\n    When we use a server side language to get our changes this is what happens :\n<br>1- the Request is made by the browser to the server\n<br>2- the Response is sent from the server to the browser\n<br>In this case, if any changes are made within the files, the server will serve the browser with those changes.\n<br>But, what if you're not using a server side language for your local development ?!\n  </p>\n\n  <p>\n    If you're locally developing a website on the Classic Road (HTML + CSS + JS) without a plugin in your IDE to synchronize your changes, <strong>and have some generated cache</strong>, you'll have to refresh your page twice and sometimes more to see the changes you've just made even if you're using a local server as Laragon, WAMP, MAMP, XAMPP...<br>Did you ever asked yourself how much time you're spending on refreshing twice ?!\n<br>This is a time killer, it's very annoying, and you're productivity will be affected !<br>\n  </p>\n\n  <p>\n    The solution would be to <strong>clear the cache</strong> when we refresh the page, you would say \"use Ctrl + F5 !\" and I would respond \"go try it with your generated cache !\".\n  </p>\n\n  <p>\n    To clear the cache when we hit the refresh button :\n<br>1- we'll have to access the <code>loading state</code> of the document <em>without waiting</em> for stylesheets, images...\n<br>2- we'll have to <code>open</code> the cache and access the particular cache causing headaches\n<br>3- we'll have to <code>delete</code> this particular cache !\n  </p>\n<pre class=\"line-numbers  language-html\"><code>if (document.readyState === 'loading') {  // Loading hasn't finished yet\ndocument.addEventListener('DOMContentLoaded', function () {\n    console.log('loading...');\n    caches.open('cacheNameCausingHeadaches').then(function (cache) {\n        cache.delete(document.URL).then(function () {\n            console.log('deleted');\n        });\n    });\n});\n}</code></pre>\n\n  <p>\n    Paste this code at the end of your scripts before the closing body tag and refresh your page twice for the last time !\n  </p>\n\n  <p>\n    To get the <code>cacheNameCausingHeadeaches</code> :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>  caches.keys().then(function(keyList) {\n    console.log('keyList');\n});</code></pre>\n\n  <p>\n    I'm here to share and learn 😊 so if you have a better way without an IDE plugin for a static site with some cache please let me know because I like to refresh and see the difference 😉\n  </p>\n\n  <p>\n    Hope this will be useful.\n  </p>",
            "image": "https://lebcit.github.io/media/posts/11/memories-jon-tyson.jpg",
            "author": {
                "name": "LebCit"
            },
            "tags": [
                   "Tips &amp; Tricks",
                   "JavaScript"
            ],
            "date_published": "2020-12-08T05:57:18+02:00",
            "date_modified": "2020-12-08T05:57:18+02:00"
        },
        {
            "id": "https://lebcit.github.io/change-page-title-dynamically.html",
            "url": "https://lebcit.github.io/change-page-title-dynamically.html",
            "title": "Change page title dynamically",
            "summary": " This post is about changing the document title when the user leaves your site's tab. A good way to grab the the user's attention is of course to write useful content 😁 Being funny is also a very good strategy to keep users coming back to your blog. A little bit of originality won't&hellip;",
            "content_html": "\n  <p>\n    <em>This post is about changing the document title when the user leaves your site's tab.</em>\n  </p>\n\n  <p>\n    A good way to grab the the user's attention is of course to write useful content 😁\n<br>Being funny is also a very good strategy to keep users coming back to your blog.\n<br>A little bit of originality won't harm at all !\n  </p>\n\n  <p>\n    We are going to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API\" target=\"_blank\">Page Visibility API</a> to detect if the user is on your site's tab or on another tab, and change your site's tab title using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/title\" target=\"_blank\">Document.title</a> property and an awesome french song title 😉\n  </p>\n<pre class=\"line-numbers  language-html\"><code>// Grab the document title of your site's current tab.\nlet currentTabTitle = document.title;\n// Listen to visibility change events\ndocument.addEventListener('visibilitychange', function () {\n    // Fires when user leaves your site's tab.\n    document.visibilityState === \"hidden\"\n    // Document title when user leaves your site's tab.\n    ? (document.title = `Ne Me Quitte Pas 😭`)\n    // Document title when user comes back to your site's tab.\n    : (document.title = currentTabTitle);\n});</code></pre>\n\n  <p>\n    This <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\">Conditional (ternary) operator</a> is like an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\" target=\"_blank\">if...else statement</a>&nbsp;\n  </p>\n\n  <p>\n    <strong>Important note</strong>: since the first change will occur when the user leaves your site's tab, we begin by listening to the hidden state (when the page's content is not visible to the user) and we change your tab title to whatever... Once the user gets back to your site's tab, the original tab title will be reassigned since we've grab it earlier.\n  </p>\n\n  <p>\n    You can see it wright here, change to another tab or open a new one 😉\n  </p>\n\n  <p>\n    Don't forget to check out <a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwj3_aeeltHpAhUOaBoKHXsKAEQQwqsBMAR6BAgJEA4&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DE7zgNye6HTE&amp;usg=AOvVaw1SFgT4HxCmo1YAr9uEHXDi\" target=\"_blank\">the song</a> 🎶&nbsp;\n  </p>",
            "author": {
                "name": "LebCit"
            },
            "tags": [
                   "Tips &amp; Tricks",
                   "JavaScript"
            ],
            "date_published": "2020-12-08T05:57:18+02:00",
            "date_modified": "2020-12-08T05:57:18+02:00"
        },
        {
            "id": "https://lebcit.github.io/listen-for-changes-in-customizer-preview.html",
            "url": "https://lebcit.github.io/listen-for-changes-in-customizer-preview.html",
            "title": "Listen for changes in Customizer Preview !",
            "summary": " This post is about how to listen for any changes in WordPress Customizer Preview. One of the most beautiful functionalities of WordPress is the Customizer, because it allows developers to give a simple way for users to modify themes/plugins appearance and behavior. However, this beauty has it's own code of conduct. Let's scratch it&hellip;",
            "content_html": "\n  <p>\n    <em>This post is about how to listen for any changes in WordPress Customizer Preview.</em>\n  </p>\n\n  <p>\n    One of the most beautiful functionalities of WordPress is the Customizer, because it allows developers to give a simple way for users to modify themes/plugins appearance and behavior.\n<br>However, this beauty has it's own code of conduct.\n<br>Let's scratch it a little bit to find out how to listen for changes in the Customizer Preview.\n  </p>\n\n  <p>\n    I always like to assume that the reader maybe a beginner, like I was a long time ago, and explain everything from A to Z, so she/he can follow the tutorial or jump to any part according to her/his experience.\n  </p>\n\n  <p>\n    For simplicity and practice, as usual 😊, I’ll be using an <a href=\"https://underscores.me/\" target=\"_blank\">_s</a> (underscores) generated theme, and call it Customizer Preview 😉. It’s a 1 minute process, so don’t be afraid, type in the <em>Theme Name</em>, download it, and upload it like any other theme under <em>Appearance &gt; Themes &gt; Add New &gt; Upload Theme</em>.\n<br>Now you’re all set and we can begin.\n  </p>\n\n    <h2 id=\"understanding-how-its-related\">\n      Understanding how it’s related\n    </h2>\n\n  <p>\n    In the <a href=\"https://codex.wordpress.org/Functions_File_Explained\" target=\"_blank\">functions.php</a> file, search for <strong>customizer.php</strong>, you’ll find a line like this one :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>require get_template_directory() . '/inc/customizer.php';</code></pre>\n\n  <p>\n    So the file <a href=\"https://codex.wordpress.org/Theme_Customization_API\" target=\"_blank\">customizer.php</a> is located in a folder named <em><strong>inc</strong></em> at the root of the theme.\n<br>If you look inside this file, at the very bottom, you’ll find a little block of code like this one :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>/**\n * Binds JS handlers to make Theme Customizer preview reload changes asynchronously.\n */\nfunction customizer_preview_customize_preview_js() {\n    wp_enqueue_script( 'customizer-preview-customizer', get_template_directory_uri() . '/js/customizer.js', array( 'customize-preview' ), '20151215', true );\n}\nadd_action( 'customize_preview_init', 'customizer_preview_customize_preview_js' );</code></pre>\n\n  <p>\n    So here, we have a call for another file <strong>customizer.js</strong>, located in a folder named <em><strong>js</strong></em> at the root of the theme.\n<br>If you take a look inside it, you’ll find a bunch of code allowing us to view the changes we make from the Customizer.\n  </p>\n\n    <h2 id=\"the-customizers-parts\">\n      The Customizer’s Parts\n    </h2>\n\n  <p>\n    When you open the Customizer, you’ll find yourself in front of screen with two parts :\n<br>a- the <strong>Customizer Pane</strong> where the <strong>Controls</strong> (like Background Image) of a theme are defined in <strong>customizer.php</strong>\n<br>b- the <strong>Customizer Preview</strong> where the <strong>Settings</strong> defined in <strong>customizer.js</strong> act like a bridge between the Controls and their related Partials.\n  </p>\n\n  <p>\n    A <strong>Partial</strong> is simply a particular part of a theme like the header, the body, the footer, the logo, the site title, the tagline… and so on.\n  </p>\n\n  <p>\n    As an example, you could have a Control to control the site title color by a Setting linking that color Control to the desired Partial (here the site title).\n<br>Now, when you change the color Control in the Pane, the defined Setting for this color Control calls the related Partial in the Preview and tells him to change according to the modifications of his Control.\n  </p>\n\n  <p>\n    If you want to dive more into that, you can read about the <a href=\"https://developer.wordpress.org/themes/customize-api/customizer-objects/\" target=\"_blank\">Customizer Objects</a> in the Theme Handbook.\n  </p>\n\n    <h2 id=\"listening-to-changes\">\n      Listening to changes\n    </h2>\n\n  <p>\n    At this point, you understand how the Customizer’s parts communicate.\n<br>But what if you need to listen for changes in the Preview ?\n<br>This will be mostly a need if you are a developer or in the process of becoming one 💪👍&nbsp;\n  </p>\n\n  <p>\n    Quick quizz. Where do you think the following code will go ?\n<br>Don’t look under the code before giving an answer 😁&nbsp;\n  </p>\n<pre class=\"line-numbers  language-html\"><code>// Listen for any changes in the Customizer Preview.\nwp.customize.bind( 'change', function ( setting ) {\n    // Target the Setting, let's take background_image as an example.\n    if ( 0 === setting.id.indexOf( 'background_image' ) ) {\n        // The background is empty by default.\n        // So, we begin by listening to a non empty value,\n        // to catch the first change when it happens !\n        if ((setting._value) != \"\") {\n            console.log('I Now Have A Background 🙂');\n        } else {\n            console.log('I Do Not Have A Background 🙁');\n        }\n    }\n});</code></pre>\n\n  <p>\n    What does this code do ?\n<br>It listen to any <code>'change'</code> of a defined <code>( setting )</code>.\n<br>Remember, a Setting is a bridge allowing communication between a Control and it’s related Partial.\n<br>So when a communication occurs, a change is ongoing and then done !\n<br>In the example above, we are listening to any change on the <code>background_image</code>.\n  </p>\n\n  <p>\n    Did you try to look for <code>background_image</code> in the generated theme from underscores ?!\n<br>If you did, you know by now that it’s not here 🤔 and if you didn’t, don’t, you will not find it !\n<br>Well, I’ve used it as an example to grab your attention on Core Controls/Settings !\n<br>Some Controls/Settings comes with WordPress by default, they can be modified or removed, but this will be for another article.\n  </p>\n\n  <p>\n    I didn’t forget, I just delayed it 😈\n<br>The code above should go inside <strong>customizer.js</strong> between a :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>(function ($) { ... YES HERE ... } (jQuery));  </code></pre>\n\n  <p>\n    I really hope that this will be useful.\n  </p>",
            "image": "https://lebcit.github.io/media/posts/9/chiatto-bunny-by-emiliano-vittoriosi.jpg",
            "author": {
                "name": "LebCit"
            },
            "tags": [
                   "Tips &amp; Tricks",
                   "Development",
                   "Customizer"
            ],
            "date_published": "2020-12-08T05:57:18+02:00",
            "date_modified": "2020-12-08T05:57:18+02:00"
        },
        {
            "id": "https://lebcit.github.io/hide-wordpress-toolbar-with-wp_add_inline_style.html",
            "url": "https://lebcit.github.io/hide-wordpress-toolbar-with-wp_add_inline_style.html",
            "title": "Hide WordPress Toolbar with wp_add_inline_style",
            "summary": " This post is about using wp_add_inline_style() function to hide the WordPress Toolbar or Admin Bar. Ever wanted to hide the WordPress Toolbar ? If you are a new developer, you should know that it's not allowed to hide it directly wit CSS. But even if you are a junior or senior WordPress user, you&hellip;",
            "content_html": "\n  <p>\n    <em>This post is about using wp_add_inline_style() function to hide the WordPress Toolbar or Admin Bar.</em>\n  </p>\n\n  <p>\n    Ever wanted to hide the WordPress Toolbar ?\n<br>If you are a new developer, you should know that it's not allowed to hide it directly wit CSS.\n<br>But even if you are a junior or senior WordPress user, you should consider this requirement for best practice, also you'll maybe learn something new 😉\n  </p>\n\n  <p>\n    <a href=\"https://wordpress.org/support/article/toolbar/\" target=\"_blank\">The WordPress Toolbar</a> is the little black bar on top of the site that only the logged in user(s) can see, depending on their <a href=\"https://wordpress.org/support/article/roles-and-capabilities/\" target=\"_blank\">role(s)</a> and how the Super Admin or the Administrator has configured the visibility of this bar for each one…\n  </p>\n\n  <p>\n    We can set the display status of this bar for the front side of our website by using the <a href=\"https://developer.wordpress.org/reference/functions/show_admin_bar/\" target=\"_blank\"><code>show_admin_bar()</code></a> function.\n  </p>\n\n  <p>\n    Also, we can directly target it by it’s CSS <code>id #wpadminbar</code> and hide it like so :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>#wpadminbar {\n    display: none;\n}\n</code></pre>\n\n  <p>\n    but this way is not allowed for themes/plugins developers !\n  </p>\n\n  <p>\n    You can say, <em>“just use <code>show_admin_bar</code> !</em>”, and I would ask the following :\n<br>“<em>what if I want to hide it with CSS without using a stylesheet so I can control it with JS for later use ?!</em>” 😉\n<br>It’s not the main reason, you can have any other reason to hide it with CSS without using a stylesheet, scenarios are limitless.\n  </p>\n\n  <p>\n    This is where <a href=\"https://developer.wordpress.org/reference/functions/wp_add_inline_style/\" target=\"_blank\"><code>wp_add_inline_style()</code></a> function steps in 🙂<br>In your <a href=\"https://codex.wordpress.org/Functions_File_Explained\" target=\"_blank\">functions.php</a> file, add the following :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>/**\n * Hide the Toolbar using inline style since we can't use #wpadminbar in CSS.\n */\nfunction myfunction_hide_adminbar() {\n    $hide_adminbar = \"\n        #wpadminbar{\n            display: none;\n        }\";\n    wp_add_inline_style( 'my-stylesheet-handle', $hide_adminbar );\n}\nadd_action( 'wp_enqueue_scripts', 'myfunction_hide_adminbar' );  </code></pre>\n\n  <p>\n    Please, pay attention to the <code>$handle</code> <strong>my-stylesheet-handle</strong> !\n<br>You should replace it with the $handle of your stylesheet !\n<br>In your functions.php file, you’ll find something like :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>wp_enqueue_style('your-stylesheet-handle', get_stylesheet_uri());</code></pre>\n\n  <p>\n    <strong>your-stylesheet-handle</strong> is the <code>$handle</code> of your stylesheet 😉\n  </p>\n\n  <p>\n    Hope this will be useful 🙂\n<br>Please don’t hesitate to share your opinion, suggestions or other methods.\n  </p>",
            "image": "https://lebcit.github.io/media/posts/8/little_girl_hidding_face-by-Caleb_Woods.jpg",
            "author": {
                "name": "LebCit"
            },
            "tags": [
                   "Toolbar",
                   "Tips &amp; Tricks",
                   "Development"
            ],
            "date_published": "2020-12-08T05:57:18+02:00",
            "date_modified": "2020-12-08T05:57:18+02:00"
        },
        {
            "id": "https://lebcit.github.io/modifying-wordpress-themes-copyright-from-the-customizer.html",
            "url": "https://lebcit.github.io/modifying-wordpress-themes-copyright-from-the-customizer.html",
            "title": "Modifying WordPress theme&#x27;s copyright from the Customizer",
            "summary": " This post is about modifying WordPress theme's copyright from the Customizer. One of the most asked question by new WordPress users is: \"how to change the copyright ?\". They don't want a label of any kind on their site and that's totally comprehensible. In this post, I'll be talking of my own sauce to&hellip;",
            "content_html": "\n  <p>\n    <em>This post is about modifying WordPress theme's copyright from the Customizer.</em>\n  </p>\n\n  <p>\n    One of the most asked question by new WordPress users is:\n<br>\"how to change the copyright ?\".\n<br>They don't want a label of any kind on their site and that's totally comprehensible.\n<br>In this post, I'll be talking of my own sauce to give users the ability to remove or modify the copyright without touching one line of code !\n  </p>\n\n  <p>\n    If you are new to the Customizer, don't be afraid, I was too a long time ago...\n<br>So in this post I'll show you a technique to control the copyright of WordPress, generally displayed in the footer of a theme, from the Customizer.\n<br>You can use it in your own theme to give your users a clean and easy way to modify the footer copyright, or use it in a child theme to modify the footer copyright of the parent theme that you are using.\n  </p>\n\n    <h2 id=\"1-replace-the-footer-copyright-by-a-function\">\n      1- Replace the footer copyright by a function\n    </h2>\n\n  <p>\n    First of all select the part that should be modified. Generally speaking, it's a sentence like: \"<em>Proudly powered by WordPress, Theme: theme-name by theme-author</em>\".\n<br>I'm going to take the generated footer by <a href=\"https://underscores.me/\" target=\"_blank\">_s</a> (underscores) as an example for this task.\n<br>Looking inside the <strong>footer.php</strong>, we can see a code like this:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;footer id=\"colophon\" class=\"site-footer\"&gt;\n    &lt;div class=\"site-info\"&gt;\n        &lt;a href=\"&lt;?php echo esc_url( __( 'https://wordpress.org/', 'midday' ) ); ?&gt;\"&gt;\n            &lt;?php\n            /* translators: %s: CMS name, i.e. WordPress. */\n            printf( esc_html__( 'Proudly powered by %s', 'midday' ), 'WordPress' );\n            ?&gt;\n        &lt;/a&gt;\n        &lt;span class=\"sep\"&gt; | &lt;/span&gt;\n            &lt;?php\n            /* translators: 1: Theme name, 2: Theme author. */\n            printf( esc_html__( 'Theme: %1$s by %2$s.', 'midday' ), 'midday', '&lt;a href=\"https://github.com/LebCit\"&gt;LebCit&lt;/a&gt;' );\n            ?&gt;\n    &lt;/div&gt;&lt;!-- .site-info --&gt;\n&lt;/footer&gt;&lt;!-- #colophon --&gt;  </code></pre>\n\n  <p>\n    Here, we are interested with the code inside <code>&lt;div class=\"site-info\"&gt;</code><span style=\"color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);\">, so let's cut it, paste it somewhere else (like notepad), and replace it by a php function.&nbsp;</span><br><div class=\"site-info\">The code should now be like the following:</div>\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;footer id=\"colophon\" class=\"site-footer\"&gt;\n    &lt;div    class=\"site-info\"&gt;\n        &lt;?php midday_site_info(); ?&gt;\n    &lt;/div&gt;&lt;!-- .site-info --&gt;\n&lt;/footer&gt;&lt;!-- #colophon --&gt;</code></pre>\n\n  <p>\n    You can name the function whatever you like, but be sure to replace any name modification according to the changes you have made in the wright place in the code.\n<br>Please note that I've added an&nbsp;<code>id=\"site-info\"</code><id=\"site-info\"> this will be used in the Customizer.</id=\"site-info\">\n  </p>\n\n    <h2 id=\"2-put-the-footer-copyright-in-functionsphp\">\n      2- Put the footer copyright in functions.php\n    </h2>\n\n  <p>\n    Now we have to connect this&nbsp;<code>midday_site_info()</code>&nbsp;function with the block of code previously pasted elsewhere.<br>In the <a href=\"https://codex.wordpress.org/Functions_File_Explained\" target=\"_blank\">functions.php</a> file of your theme or your child theme, put this code, I'll explain it just after :<br>\n  </p>\n<pre class=\"line-numbers  language-html\"><code>/**\n * Output the theme's copyright depending on user's choice.\n */\nfunction midday_site_info() {\n    $midday_footer_copyright_area_checkbox = get_theme_mod( 'midday_footer_copyright_area_checkbox', true );\n    $midday_custom_copyright_textarea      = get_theme_mod( 'midday_custom_copyright_textarea', '' );\n    if ( ! empty( $midday_footer_copyright_area_checkbox ) ) :\n            $html  = '&lt;a href=\"' . esc_url( 'https://wordpress.org/' ) . '\"&gt;' . esc_html( 'Proudly powered by WordPress' ) . '&lt;/a&gt;';\n            $html .= '&lt;span class=\"sep\"&gt; | &lt;/span&gt;';\n            $html .= esc_html( 'Theme: MidDay by ' ) . '&lt;a href=\"' . esc_url( 'https://lebcit.github.io/' ) . '\"&gt;' . esc_html( 'LebCit' ) . '&lt;/a&gt;';\n            echo wp_kses(\n                $html,\n                array(\n                    'a'  =&gt; array(\n                        'href' =&gt; array(),\n                    ),\n                    'span'  =&gt; array(\n                        'class' =&gt; array(),\n                    ),\n                )\n            );\n    elseif ( empty( $midday_footer_copyright_area_checkbox ) && ! empty( $midday_custom_copyright_textarea ) ) :\n        echo wp_kses_post( $midday_custom_copyright_textarea ); // Allow html.\n    endif;\n}</code></pre>\n\n  <p>\n    What in the hell is this ?<br>It's nothing 😂 it's just the same pasted elsewhere code in PHP with some variables and an <code>if/elseif</code> statement to take care of the user's choice.\n  </p>\n\n  <p>\n    Inside the function, I've defined 2 variables. Each one is related to a <code>theme_mod</code> (theme modification) that we will create and explain in a moment.\n  </p>\n\n  <p>\n    I've opened an <code>if</code> statement saying:<br>\"<em>if the first variable (remember it's related to a theme_mod, yes it's a checkbox </em>😉<em>) is not empty (so it have a check tick, it's checked) please populate the copyright with the following code</em>\".<br>The code here is pretty easy to understand.\n<br>I've defined an <code>$html</code> variable replicating the pasted elsewhere code, then I've asked PHP to <code>echo</code> this code using <a href=\"https://developer.wordpress.org/reference/functions/wp_kses/\" target=\"_blank\"><code>wp_kses</code></a> filtering the text content and striping out disallowed HTML.\n  </p>\n\n  <p>\n    In other words:\n<br>\"<em>hey <code>wp_kses</code>, please <code>echo</code> the defined <code>$html</code> variable, and please allow it to only have a <code>tag</code> with <code>href</code> attribute and <code>span</code> tag with <code>class</code> attribute, thank you very much</em>\" 😊\n  </p>\n\n  <p>\n    After that, I've opened an <code>elseif</code> statement saying:\n<br>\"<em>okay, <code>if</code> the first variable is empty (the checkbox is not checked) and the second variable (a text area) is not empty, please populate the copyright with the content of the text area allowing the user to use HTML inside it with <a href=\"https://developer.wordpress.org/reference/functions/wp_kses_post/\" target=\"_blank\"><code>wp_kses_post</code></a> that will keep an eye and make sure the user type allowed HTML only, that's it I've nothing more to ask so please close the <code>if</code> statement with this <code>endif;</code></em>\"\n  </p>\n\n    <h2 id=\"3-create-settings-and-controls-in-the-customizer\">\n      3- Create settings and controls in the Customizer\n    </h2>\n\n  <p>\n    Do you remember the 2 previous variables ? They where related to theme's modifications. It's time to create those <code>theme_mod</code> and test our code.\n<br>To keep the functions.php file clean, we will put the following in a customizer.php file if you don't have one already. Yous just have to require it from functions.php like so :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>require get_template_directory() . '/inc/customizer.php';  \n</code></pre>\n\n  <p>\n    Please note that in this example the file is in a folder named inc (for includes) at the root of the theme or the child theme, you can change this but be sure to indicate the correct path.\n<br>Now, put the following in customizer.php, let's see the code and explain it later:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>function midday_customize_register( $wp_customize ) {\n    /**\n     * MidDay Theme Panel\n     */\n    $wp_customize-&gt;add_panel(\n        'midday_panel',\n        array(\n            'title'       =&gt; __( 'MidDay Theme', 'midday' ),\n            'description' =&gt; esc_html__( 'Customize MidDay Theme', 'midday' ),\n            'priority'    =&gt; 0,\n        )\n    );\n\n    /**\n     * Footer Copyright Area Section.\n     */\n    $wp_customize-&gt;add_section(\n        'midday_footer_copyright_area_section',\n        array(\n            'title'       =&gt; esc_html__( 'Footer Copyright Area', 'midday' ),\n            'description' =&gt; __( 'Modify &lt;b&gt;Footer Copyright Area&lt;/b&gt;.', 'midday' ),\n            'panel'       =&gt; 'midday_panel',\n            'priority'    =&gt; 15,\n        )\n    );\n\n    // Default copyright.\n    $wp_customize-&gt;add_setting(\n        'midday_footer_copyright_area_checkbox',\n        array(\n            'default'           =&gt; true,\n            'transport'         =&gt; 'postMessage',\n            'sanitize_callback' =&gt; 'midday_sanitize_checkbox',\n        )\n    );\n\n    $wp_customize-&gt;add_control(\n        'midday_footer_copyright_area_checkbox',\n        array(\n            'label'       =&gt; __( 'Enable/Disable Default Copyright.', 'midday' ),\n            'description' =&gt; __( 'This checkbox, once &lt;b&gt;unchecked&lt;/b&gt;,&lt;br&gt;removes &lt;b&gt;Default Copyright.&lt;/b&gt;', 'midday' ),\n            'section'     =&gt; 'midday_footer_copyright_area_section',\n            'type'        =&gt; 'checkbox',\n        )\n    );\n\n    $wp_customize-&gt;selective_refresh-&gt;add_partial(\n        'midday_footer_copyright_area_checkbox',\n        array(\n            'selector'        =&gt; '#site-info',\n            'settings'        =&gt; array( 'midday_footer_copyright_area_checkbox' ),\n            'render_callback' =&gt; 'midday_site_info',\n        )\n    );\n\n    // Custom copyright.\n    $wp_customize-&gt;add_setting(\n        'midday_custom_copyright_textarea',\n        array(\n            'default'           =&gt; '',\n            'transport'         =&gt; 'postMessage',\n            'sanitize_callback' =&gt; 'wp_kses_post', // Allow html.\n        )\n    );\n\n    $wp_customize-&gt;add_control(\n        'midday_custom_copyright_textarea',\n        array(\n            'label'       =&gt; esc_html__( 'Custom Copyright Textarea', 'midday' ),\n            'description' =&gt; __( 'To display a &lt;b&gt;Custom Copyright&lt;/b&gt;,&lt;br&gt;&lt;b&gt;uncheck&lt;/b&gt; the &lt;b&gt;Default Copyright&lt;/b&gt; checkbox,&lt;br&gt;then type a custom copyright in the textarea.&lt;br&gt;&lt;b&gt;HTML&lt;/b&gt; is allowed !', 'midday' ),\n            'section'     =&gt; 'midday_footer_copyright_area_section',\n            'type'        =&gt; 'textarea',\n            'input_attrs' =&gt; array(\n                'style'       =&gt; 'border: 1px solid #999',\n                'placeholder' =&gt; __( 'Enter Custom Copyright...', 'midday' ),\n            ),\n        )\n    );\n\n    $wp_customize-&gt;selective_refresh-&gt;add_partial(\n        'midday_custom_copyright_textarea',\n        array(\n            'selector'        =&gt; '#site-info',\n            'settings'        =&gt; array( 'midday_custom_copyright_textarea' ),\n            'render_callback' =&gt; 'midday_site_info',\n        )\n    );\n\n}\nadd_action( 'customize_register', 'midday_customize_register' );</code></pre>\n\n  <p>\n    Don't panic, it's pretty straightforward !\n<br>Let's break it down and you'll see.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>function mytheme_customize_register( $wp_customize )\n{\n    //All our sections, settings, and controls will be added here\n}\nadd_action( 'customize_register', 'mytheme_customize_register' );</code></pre>\n\n  <p>\n    This is how we hook a function to the <a href=\"https://codex.wordpress.org/Plugin_API/Action_Reference/customize_register\" target=\"_blank\"><code>'customize_register'</code></a> action and put inside it our panels, sections, settings and controls.\n<br>Looking at our code, you can now understand that I've created a panel, a section, 2 settings and their 2 related controls.\n<br>I'm not going to dive into the Customizer, but if you're not familiar with it, a good start would be this <a href=\"https://maddisondesigns.com/2017/05/the-wordpress-customizer-a-developers-guide-part-1/\" target=\"_blank\">excellent guide</a> by Anthony Hortin.\n<br>Instead, I'm going to explain a more important aspect here. If you take a good look at the code, you'll see something else under each control :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>$wp_customize-&gt;selective_refresh-&gt;add_partial</code></pre>\n\n  <p>\n    What is this and what does it do ?\n<br>Well, look closer and you'll figure it out yourself 😂\n<br>Just kidding, but in fact it's really clear.\n<br>Let's take one setting it's control and the related selective_refresh:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>// Default copyright.\n$wp_customize-&gt;add_setting(\n    'midday_footer_copyright_area_checkbox',\n    array(\n        'default'           =&gt; true,\n        'transport'         =&gt; 'postMessage',\n        'sanitize_callback' =&gt; 'midday_sanitize_checkbox',\n    )\n);\n\n$wp_customize-&gt;add_control(\n    'midday_footer_copyright_area_checkbox',\n    array(\n        'label'       =&gt; __( 'Enable/Disable Default Copyright.', 'midday' ),\n        'description' =&gt; __( 'This checkbox, once &lt;b&gt;unchecked&lt;/b&gt;,&lt;br&gt;removes &lt;b&gt;Default Copyright.&lt;/b&gt;', 'midday' ),\n        'section'     =&gt; 'midday_footer_copyright_area_section',\n        'type'        =&gt; 'checkbox',\n    )\n);\n\n$wp_customize-&gt;selective_refresh-&gt;add_partial(\n    'midday_footer_copyright_area_checkbox',\n    array(\n        'selector'        =&gt; '#site-info',\n        'settings'        =&gt; array( 'midday_footer_copyright_area_checkbox' ),\n        'render_callback' =&gt; 'midday_site_info',\n    )\n);</code></pre>\n\n  <p>\n    Remember the first variable ?<br>Well here is it's <code>theme_mod</code> !<br>Take a look at the <strong>setting</strong> name <code>midday_footer_copyright_area_checkbox</code> 😉\n<br>The important part here is <code>'transport' =&gt; 'postMessage'</code>, because it tells the browser not to reload, but to make the change(s) in place !\n<br>Another important aspect in the <strong>setting</strong> is <code>'sanitize_callback' =&gt; 'midday_sanitize_checkbox'</code>, this is a function to sanitize the checkbox, you should put it after the <code>'customize_register'</code> action hook:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>if ( ! function_exists( 'midday_sanitize_checkbox' ) ) {\n    /**\n        * Switch sanitization\n        *\n        * @param string $input Switch value.\n        * @return integer  Sanitized value\n        */\n    function midday_sanitize_checkbox( $input ) {\n        if ( false === $input ) {\n            return 0;\n        } else {\n            return 1;\n        }\n    }\n}  </code></pre>\n\n  <p>\n    In the <strong>control</strong>, the important part is the type of the control, as you can see it's defined as checkbox, no surprise, WYaskIWYG 😂<br>For the <strong>partial</strong>, the important part is the selector, it must be an id, now you know why I've added an <code><strong>id</strong></code> previously 👍<br>If you look at the settings and the <code>render_callback</code> of the <strong>partial</strong>, you'll understand that everything is related 🔗 and that we are just putting the wright piece in the wright place 🧩\n  </p>\n\n  <p>\n    You maybe guessed it out or not, but yes I'm developing a new theme called MidDay (in fact I've finished it, just some clean up remaining) and I'll submit it very soon 😁\n  </p>\n\n  <p>\n    I really hope that this was helpful.\n  </p>",
            "image": "https://lebcit.github.io/media/posts/7/copyright-under-magnifying-glass.jpg",
            "author": {
                "name": "LebCit"
            },
            "tags": [
                   "Tips &amp; Tricks",
                   "Development",
                   "Customizer",
                   "Copyright"
            ],
            "date_published": "2020-12-08T05:57:18+02:00",
            "date_modified": "2020-12-08T05:57:18+02:00"
        },
        {
            "id": "https://lebcit.github.io/get-google-products-on-desktop-with-thunderbird.html",
            "url": "https://lebcit.github.io/get-google-products-on-desktop-with-thunderbird.html",
            "title": "Get Google products on desktop with Thunderbird",
            "summary": " This post is about using Google products on a desktop with Thunderbird. Every time you want to check your Gmail, Agenda, Drive, Keep... on your desktop, you have to open a browser and log in, to be able use them. Did you ever asked your self how much time this process is taking in&hellip;",
            "content_html": "\n  <p>\n    <i>This post is about using Google products on a desktop with Thunderbird.</i>\n  </p>\n\n  <p>\n    <strong>Every time</strong> you want to check your Gmail, Agenda, Drive, Keep... on your desktop, you have to open a browser and log in, to be able use them.\n<br>Did you ever asked your self how much time this process is taking in a week, a month, a year ?\n<br>Well, with Thunderbird you will not ask yourself that anymore !<i><br></i>\n  </p>\n\n    <h2 id=\"thunderbird\">\n      Thunderbird\n    </h2>\n\n  <p>\n    I'm not going to explain in this post how to install Thunderbird, but you can just go to <a href=\"https://www.thunderbird.net/en-US/\" target=\"_blank\">the official website</a> and download it, the installation process is very easy.\n<br>So, assuming you have Thunderbird installed and running, I'm going to explain how to get all Google products directly inside it, and it's also <strong>very</strong> easy to do it.&nbsp;\n  </p>\n\n    <h2 id=\"profile-or-profiles\">\n      Profile or profiles\n    </h2>\n\n  <p>\n    When you install Thunderbird and run it, a default profile will be created. You can access the profiles' manager by typing this command :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>thunderbird.exe -p</code></pre>\n\n  <p>\n    You'll then be able to do various actions, as adding, renaming, deleting... a profile and so on...\n<br>This is not a part of the process but it's important to know that you can do it, maybe you want to add a profile for your work and another for you 😉 this is a very convenient way to separate your personal stuff 👍\n<br>\n  </p>\n\n  <p>\n    Once a profile is created, start it, add your name (as you want to display it for this account), your e-mail, and your password, and that's it !<br>\n  </p>\n\n  <p>\n    <strong>Important note</strong> if you use multiple profiles (or even one if you want) : \n<br>you don't have to type the above command each time you want to access the manager, just untick the <em>Don't ask at startup</em> box and now you'll get the manager every time you launch Thunderbird.\n  </p>\n\n    <h2 id=\"google-products\">\n      Google products\n    </h2>\n\n  <p>\n    The easiest way is to add only one plugin. To add an extension in Thunderbird, click the main menu button, choose <b>Add-ons</b>, then <b>Extensions</b> in the left panel, search for <i>ThunderKeepPlus</i> and install it.\n  </p>\n\n  <p>\n    Once installed, it will ask you to connect to your Google account, after that your Google Keep will be displayed, in a new tab inside Thunderbird, as if it was in a browser and you will have access to all Google products as you usually do in a browser 💪\n  </p>\n\n    <h2 id=\"security-\">\n      Security !\n    </h2>\n\n  <p>\n    I don't have to tell you to be aware of this technique because you should only do it on your personal machine only, but I'm telling you just for security and conscience reasons 😊&nbsp;\n  </p>\n\n    <h2 id=\"final-note\">\n      Final note\n    </h2>\n\n  <p>\n    If you want to know more about Thunderbird, head over <a href=\"https://support.mozilla.org/en-US/products/thunderbird\" target=\"_blank\">the official support</a>, everything is well explained.\n  </p>\n<hr class=\"separator separator--dots\" />\n\n  <p class=\"hide\">\n    <em>Note: background image used, work of <a href=\"https://pxhere.com/en/photo/417303\" target=\"_blank\">Les Haines</a></em>\n  </p>\n\n  <p>\n    Hope this was helpful.\n  </p>",
            "image": "https://lebcit.github.io/media/posts/6/thunderbird_by_Les-Haines.jpg",
            "author": {
                "name": "LebCit"
            },
            "tags": [
                   "Tips &amp; Tricks"
            ],
            "date_published": "2020-12-08T05:57:18+02:00",
            "date_modified": "2020-12-08T05:57:18+02:00"
        },
        {
            "id": "https://lebcit.github.io/the-clean-blog-wordpress-theme.html",
            "url": "https://lebcit.github.io/the-clean-blog-wordpress-theme.html",
            "title": "The Clean Blog WordPress theme",
            "summary": " This post is about the development and usage of The Clean Blog WordPress theme. The Clean Blog WordPress theme was released in 2017 with a lot of bells and whistles... Two years later, in 2019, it was rewritten from ground up, without any unnecessary functionalities. This WordPress Theme wouldn’t have seen the light without&hellip;",
            "content_html": "\n  <p>\n    <em>This post is about the development and usage of The Clean Blog WordPress theme.</em>\n  </p>\n\n  <p>\n    The Clean Blog WordPress theme was released in 2017 with a lot of bells and whistles...\n<br>Two years later, in 2019, it was rewritten from ground up, without any unnecessary functionalities.\n  </p>\n\n    <h2 id=\"credits\">\n      Credits\n    </h2>\n\n  <p>\n    This WordPress Theme wouldn’t have seen the light without :\n<br>- the <a href=\"https://startbootstrap.com/themes/clean-blog/\" target=\"_blank\">Clean Blog</a> template by <a href=\"https://github.com/davidtmiller\" target=\"_blank\">David Miller</a><br>- the starter theme <a href=\"https://underscores.me/\" target=\"_blank\">Underscores</a> by <a href=\"https://automattic.com/\" target=\"_blank\">Automattic</a><br>- and our beloved CMS <a href=\"https://wordpress.org/\" target=\"_blank\">WordPress</a>\n  </p>\n\n    <h2 id=\"about\">\n      About\n    </h2>\n\n  <p>\n    Users, like I was a long time ago, tend to search for themes with ‘cool’ functionalities to make their websites stand out without knowing the real cost (performance, accessibility, best practices, search engine optimization, and so on…) of the ‘bling-bling’ they are using…\n<br>Two years ago, when The Clean Blog was released (in 2017), I was not aware of those critical facts and developed it with a user mindset…\n<br>Today (in 2019), after two more years of diving, learning and improving, I can’t just sit back and let even a few hundreds of people use a bloated theme with a lot of ‘bling-bling’ functionalities !\n<br>As developers improve, they don’t feel shy or ashamed at all to point users in the right direction(s) for a better experience and a better Web even if this mean hours of developing are going to be wasted ( not really because we learn from our mistakes ) and gone with the wind…\n<br>Users are always free to switch from a theme to any other one, but for me, as a conscientious developer, I have to make the best decisions concerning my code for the web and the users experience…\n<br>In short, the new theme is much more well coded and to be very honest is not bloated like the old one…\n  </p>\n\n    <h2 id=\"usage\">\n      Usage\n    </h2>\n\n  <p>\n    1- To use this theme, you have to <a href=\"https://wordpress.org/themes/the-clean-blog/\" target=\"_blank\" class=\"\">download</a> it from the WordPress themes repository and add it under <em>Appearance→Themes→Add New→Upload Theme</em>, or search for <strong>The Clean Blog</strong> under <em>Appearance→Themes→Add New</em> in the backend.\n  </p>\n\n  <p>\n    2- Since the theme is Bootstrap based, I've wrote a lightweight JavaScript plugin, <a href=\"https://github.com/LebCit/bsWalker.js\" target=\"_blank\">bsWalker.js</a>, to take care of multilevel dropdown navigation.\n<br>To create an item link with children :\n<br>- go to Appearance→Menus in the backend\n<br>- create a <strong>Custom Link</strong>\n<br>- in <em>URL</em> type <strong>#</strong>\n<br>- in <em>Link Text</em> type the label of your choice\n<br>- put children links under this custom link\n<br>- in <strong>Menu Settings</strong>, under the created menu, choose <strong>Primary</strong> as location and save your menu\n<br>- nothing more to do, that's it ! 😁\n  </p>\n\n  <p>\n    3- In the Customizer (<em>Appearance→Customize</em> or <em>Customize</em> link in the Admin Bar), you'll find a panel named <em>The Clean Blog Theme</em> and four sections (for now: <em>Homepage Header Slider, Featured Image Display, Footer Social Sites Links and Footer Copyright Area</em>) under it. Under each section, controls are explained in details.\n<br>Note that the third section <em>Header Image</em> is only for the home page, each post and page can have their own header image by assigning a <em>Featured image</em> to the post or the page.\n  </p>\n\n  <p>\n    4- The only plugin I've used is <a href=\"https://freqdec.github.io/slabText/\" target=\"_blank\">slabText</a> by <a href=\"https://github.com/freqdec\" target=\"_blank\">Brian McAllister</a> to control the size of the site title, so don't worry if your site title is long, it will be big and bold ✨\n  </p>\n\n  <p>\n    5- The Clean Blog (TCB) is a Responsive WordPress theme, perfect for personal or company blogs.\n  </p>\n\n    <h2 id=\"feedback-\">\n      Feedback ?\n    </h2>\n\n  <p>\n    Head over the <a href=\"https://wordpress.org/support/theme/the-clean-blog\" target=\"_blank\">support page</a> to tell me if you’re having some issues or if you wish to see some features added to the theme 😉\n<br>You can also leave a review on the <a href=\"https://wordpress.org/support/theme/the-clean-blog/reviews/\" target=\"_blank\">reviews page</a> to give me a push 👍\n<br>Thanks in advance for your feedback !\n  </p>\n\n    <h2 id=\"final-word\">\n      Final word\n    </h2>\n\n  <p>\n    I really hope that this theme will be useful for a lot of WordPress users and that they'll enjoy using it. I'll be making improvements to TCB from time to time, so don't worry, and be talking about it here, so stay tuned !\n  </p>",
            "image": "https://lebcit.github.io/media/posts/5/tcb-default-home.jpg",
            "author": {
                "name": "LebCit"
            },
            "tags": [
                   "Theme",
                   "Development"
            ],
            "date_published": "2020-12-08T05:57:18+02:00",
            "date_modified": "2020-12-08T05:57:18+02:00"
        },
        {
            "id": "https://lebcit.github.io/about.html",
            "url": "https://lebcit.github.io/about.html",
            "title": "About Me",
            "summary": " I'm LebCit, a Citizen of a small country called Lebanon in the Middle East. I love to read a lot, learn as much as I can, and of course apply and share with others 😉 Once (in 2000) I wanted to make a website, I heired a so called developer who not only stoled&hellip;",
            "content_html": "\n  <p>\n    I'm LebCit, a <strong>Cit</strong>izen of a small country called <strong>Leb</strong>anon in the Middle East. I love to read a lot, learn as much as I can, and of course apply and share with others 😉\n  </p>\n\n  <p>\n    Once (in 2000) I wanted to make a website, I heired a so called developer who not only stoled me but was also no-good at all ! 😠\n<br>So, with no knowledge at all in development, I started with Joomla then Drupal and finally felled in love with WordPress 💘 !\n<br>Today I’m a WordPress <a href=\"https://profiles.wordpress.org/lebcit/#content-themes\" target=\"_blank\">theme</a> and <a href=\"https://profiles.wordpress.org/lebcit/#content-plugins\" target=\"_blank\">plugin</a> developer !\n  </p>\n\n  <p>\n    A little bit perfectionist, always trying to improve, I'm now diving in Accessibility, SEO, usability over functionality.\n<br>This new quest made me take off the highway and go back to the roots : HTML, CSS, JS (Vanilla or Chocolate but not jQuery 🤣).\n  </p>\n<hr class=\"separator separator--dots\" />\n\n  <p>\n    I've used <a href=\"https://getpublii.com/\" target=\"_blank\">Publii</a> to bake this site, on the classic, solid and clear road !\n  </p>\n\n  <p>\n    I'll be talking about it later, so stay tuned !\n  </p>\n\n  <p class=\"hide\">\n    <em>Note: background image used, work of a talented lebanese artist Ivan DEBS , representing the political situation of Lebanon since 1990...</em>\n  </p>",
            "image": "https://lebcit.github.io/media/posts/4/octopus_by_Ivan_DEBS.jpg",
            "author": {
                "name": "LebCit"
            },
            "tags": [
            ],
            "date_published": "2020-12-08T05:57:18+02:00",
            "date_modified": "2020-12-08T05:57:18+02:00"
        },
        {
            "id": "https://lebcit.github.io/back-to-the-roots-with-a-static-site.html",
            "url": "https://lebcit.github.io/back-to-the-roots-with-a-static-site.html",
            "title": "Back to the roots with a static site",
            "summary": " This is a post about my own experience with development and static site. From Zero to Hero or at least not a zero anymore ! From the Highway to the Classic Road. If you didn't read my About section, you can quickly guess from the tagline that I'm a self-taught developer. I didn't have&hellip;",
            "content_html": "\n  <p>\n    <em>This is a post about my own experience with development and static site.</em>\n  </p>\n\n  <p>\n    From Zero to Hero or at least not a zero anymore !<br>From the Highway to the Classic Road.\n  </p>\n\n  <p>\n    If you didn't read my <a href=\"https://lebcit.github.io/about.html\" class=\"\">About</a> section, you can quickly guess from the tagline that I'm a self-taught developer.\n  </p>\n\n  <p>\n    I didn't have a clue about the amazing world of code, or even heard about HTML, CSS or JS.\n<br>So with a will to understand, after being played and robbed by a so-called developer, my first task was to learn English ! Oh, yeah 🤣\n  </p>\n\n  <p>\n    After acquiring a basic level of understanding, the real deal was to confront this nightmare,&nbsp;<code>the code</code> 👻\n<br>From where should I begin ?!\n<br>What should I learn first ?!\n<br>How to create a website ?!\n<br>...\n<br>So many questions with no clear answer for me 😱&nbsp;\n  </p>\n\n  <p>\n    Since I wanted to start quick (newbie error), I took the wrong path and started to seek for easy ways to create a website (don't want to talk about it, very bad memory). It took me a while to realise that this was not a good choice and that I'm not really learning...<br>    A friend talked about a tool for creating dynamic websites called Joomla, I created my first website with Joomla and coded a little bit, but Joomla was (for me) illogical (not clear/consistent), so I tried Drupal (a cannon to kill a fly), then discovered WordPress 💘\n  </p>\n\n  <p>\n    I don't know why, but I felled at home with WordPress, especially with the Codex, the Forums and tons of tutorials everywhere on the Web, the nightmare was turning to a dream coming true...\n<br>    Meanwhile, my English was improving with all the readings and my experience was getting pleasant and smoother.\n<br>    So I decided to make <a href=\"https://wordpress.org/plugins/full-screen-morphing-search/\" target=\"_blank\">my first plugin</a> (2016), then <a href=\"https://wordpress.org/themes/the-clean-blog/\" target=\"_blank\">my first theme</a> (2017), and I did it with a lot of difficulties... I wanted to quit many times, but a voice in my head was telling me: \"continue, you've already spent a lot of time over this and you are so close, don't give up now !\".\n  </p>\n\n  <p>\n    Since then, I've helped as much as I can other people, the same way great developers helped me by pointing to the right direction.\n<br>    But, yes there is always a but, I've written again my plugin and my theme from ground up, because I was improving, and everything with bells and whistles in the code world became (for me) useless.\n<br>    I was turning to usability over functionality, simplicity over complexity and accessibility over bling bling code !\n  </p>\n\n  <p>\n    Last year (2019), I was watching a lot of great developers turning their personal sites to static and a growing interest for <a href=\"https://www.staticgen.com/\" target=\"_blank\">SSG</a> and <a href=\"https://headlesscms.org/\" target=\"_blank\">headlesCMS</a> .\n<br>    I was wondering why ?\n<br>    I had a .tk domain that stopped working from one day to the next ! Another lesson in this world...\n<br>    So, it was time to turn over and try the static world. I've found myself in a completely new playground and didn't want to waste time, again, just to output basic HTML...\n  </p>\n\n  <p>\n    I was working on a new WordPress theme, and decided to bake it on the Classic Road and use it for me as a beginning point to my new site.\n<br>    Big, bold and clear 😉&nbsp;\n  </p>\n\n  <p>\n    I really hope that you like it. Soon I'll be talking about how I made it, stay tuned !\n  </p>",
            "image": "https://lebcit.github.io/media/posts/3/code_books_by_Greg-Rakozy.jpg",
            "author": {
                "name": "LebCit"
            },
            "tags": [
                   "Development"
            ],
            "date_published": "2020-12-08T05:57:18+02:00",
            "date_modified": "2020-12-08T05:57:18+02:00"
        }
    ]
}
