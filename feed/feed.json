{
  "version": "https://jsonfeed.org/version/1",
  "title": "{ LebCit }",
  "home_page_url": "https://lebcit.github.io/",
  "feed_url": "https://lebcit.github.io/feed/feed.json",
  "description": "Autodidactic Web Developer. Love to Read, Learn &amp; DIMySelf !",
  "author": {
    "name": "LebCit",
    "url": "https://lebcit.github.io/about/"
  },
  "items": [{
      "id": "https://lebcit.github.io/posts/blog-doc-a-tiny-and-dead-simple-ssg/",
      "url": "https://lebcit.github.io/posts/blog-doc-a-tiny-and-dead-simple-ssg/",
      "title": "Blog-Doc, a tiny and dead simple SSG !",
      "content_html": "<p><em>This post is about Blog-Doc, a tiny and dead simple static site generator written in JavaScript.</em></p>\n<p>Blog-Doc uses EJS as a templating language and Markdown to write and format the markup of the generated posts and pages.</p>\n<h2 id=\"motivation\">Motivation <a class=\"direct-link\" href=\"#motivation\">#</a></h2>\n<p>It's after some of my previous tutorials about templating a Node.js app with EJS and turning it to a simple SSG with the ability to write posts and pages in Markdown that I've decided to put it all together and bring it to the light as a proof of concept and prototype.</p>\n<h2 id=\"live-demo-%26-documentation\">Live demo &amp; documentation <a class=\"direct-link\" href=\"#live-demo-%26-documentation\">#</a></h2>\n<p>An overview of the app and it's documentation can be found on <a href=\"https://blog-doc.deta.dev/\" target=\"_blank\" rel=\"external noopener noreferrer\">Blog-Doc</a> live demo site.</p>\n<h2 id=\"nota-bene\">Nota Bene <a class=\"direct-link\" href=\"#nota-bene\">#</a></h2>\n<p>You can take Blog-Doc as a prototype and modify it totally to use it with another design and/or another template language.</p>\n<p>I really hope that this app will be useful in any way for a lot of people out there, I'm considering it as my personal contribution to the Node.js, Express, EJS and Markdown communities.</p>\n",
      "date_published": "2022-11-13T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/click-without-javascript/",
      "url": "https://lebcit.github.io/posts/click-without-javascript/",
      "title": "Click without JavaScript !",
      "content_html": "<p><em>This post is about clicking on an element without JavaScript.</em></p>\n<h2 id=\"intro\">Intro <a class=\"direct-link\" href=\"#intro\">#</a></h2>\n<p>Let's say that you have a button on which you want to click and perform a simple action like displaying some hidden content.<br>\nYou'll directly think :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn\"</span><span class=\"token punctuation\">)</span><br>btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// display my hidden content...</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>What if I tell you that you could do it with CSS ?!</p>\n<h2 id=\"the-%3Atarget-css-pseudo-class\">The :target CSS pseudo-class <a class=\"direct-link\" href=\"#the-%3Atarget-css-pseudo-class\">#</a></h2>\n<p>While surfing the net, you surely clicked before on a <code>hash-link</code>, a link that redirects to a particular section in a page, just like the above <a href=\"#intro\">Intro</a> heading !<br>\nIt could also redirect to another page, but always to a particular <code>target</code> on the page.<br>\nThe <code>target</code> in this case is reached by a link with a hash <code>#</code> :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#intro<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Intro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>This is why we call it a <code>hash-link</code>.</p>\n<p>CSS has a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:target\" target=\"_blank\" rel=\"external noopener noreferrer\">:target</a> <em>pseudo-class</em>, that can be used to select a <code>target</code> and style it !<br>\nAre you already thinking about the <code>display</code> property ? 😉<br>\nLet's do it !</p>\n<p><a href=\"#the-code\">Reveal the code !</a></p>\n<div id=\"the-code\">\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#the-code<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Reveal the code !<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>the-code<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>This block of code is displayed after you click on the link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#hide-the-code<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hide the code !<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#the-code</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token selector\">#the-code:target</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"#hide-the-code\">Hide the code !</a></p>\n</div>\n<style>\n#the-code {\n\tdisplay: none;\n}\n\n#the-code:target {\n\tdisplay: block;\n}\n</style>\n<p>So how does this work ?!<br>\nIt's quite simple :</p>\n<ol>\n<li>We have a <code>hash-link</code> :</li>\n</ol>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#the-code<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Reveal the code !<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n<ol start=\"2\">\n<li>We have a <code>div</code> with an <code>ID</code> matching the <code>hash-link</code> :</li>\n</ol>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>the-code<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<ol start=\"3\">\n<li>We hide this <code>div</code> by default :</li>\n</ol>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#the-code</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"4\">\n<li>Then we display it if the <code>hash-link</code> becomes the target :</li>\n</ol>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#the-code:target</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>I've also added at the end of the <code>div</code> a <code>hash-link</code> that doesn't correspond to any <code>target</code> :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#hide-the-code<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hide the code !<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>When this one is clicked, the <code>target</code> is changed and the block of code goes back to it's original state, hidden, since this <code>hash-link</code> doesn't match it's <code>ID</code>.</p>\n<p>Hope you'll find it useful.</p>\n",
      "date_published": "2022-08-01T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/turn-a-markdown-blog-to-a-simple-ssg/",
      "url": "https://lebcit.github.io/posts/turn-a-markdown-blog-to-a-simple-ssg/",
      "title": "Turn a Markdown blog to a simple SSG",
      "content_html": "<p><em>This post is about improving a Markdown blog and turn it into a simple SSG.</em></p>\n<h2 id=\"intro\">Intro <a class=\"direct-link\" href=\"#intro\">#</a></h2>\n<p>Over the past few weeks, I mostly wrote on how to template a Node.js application with <a href=\"https://ejs.co/\" target=\"_blank\" rel=\"external noopener noreferrer\">EJS</a> using <a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">Express</a>.<br>\nThen, I wrote an article showing how to create a Markdown blog in Node.js using EJS, Express, <a href=\"https://www.npmjs.com/package/gray-matter\" target=\"_blank\" rel=\"external noopener noreferrer\">gray-matter</a> and <a href=\"https://www.npmjs.com/package/markdown-it\" target=\"_blank\" rel=\"external noopener noreferrer\">markdown-it</a>.<br>\nToday, I'll combine those tutorials to turn the Markdown blog, from <a href=\"/posts/markdown-blog-with-ejs/\">the last tutorial</a>, into a simple SSG.</p>\n<h2 id=\"jamstack-%26-ssg\">Jamstack &amp; SSG <a class=\"direct-link\" href=\"#jamstack-%26-ssg\">#</a></h2>\n<p>Wherever you head on the web, the content you'll get as a client is made of HTML, CSS and some JavaScript.<br>\nThink of HTML as a skeleton, CSS as it's external shapes and colors, and JavaScript as it's internal functionalities.<br>\nWith this in mind, you can ask yourself about the need of server side rendering...<br>\nStatic sites are way performant and secure than dynamic ones.<br>\nBut what about the need of interacting with a database or sending data on a particular page... ?<br>\nThis is where the JAMstack (JavaScript, APIs, and Markup) steps in to leverage the static notion from &quot;fixed&quot; to &quot;on demand dynamic functionalities&quot; like submitting forms, posting comments, making payments, searching content, authentication, and so on...<br>\nToday <a href=\"https://jamstack.org/\" target=\"_blank\" rel=\"external noopener noreferrer\">Jamstack</a> is a continuous evolving ecosystem allowing developers to build better, faster and more secure applications, without losing the advantage of using dynamic features.</p>\n<p>All of this is great but <em>easier said than done</em>.<br>\nI took the time, excitement, ambition and hard work of great developers to bring this concept to life.<br>\nToday, you can head over the <a href=\"https://jamstack.org/generators/\" target=\"_blank\" rel=\"external noopener noreferrer\">list of Static Site Generators for Jamstack sites</a>, choose what suits your needs, read the documentation, and build your project effortlessly in no time.<br>\nA simple explanation of a SSG is that it takes data passed to templates and generates HTML pages, just like a blender that gives you a ready-to-drink cocktail.<br>\nAt the date of writing this article, the Jamstack site lists more than 300 SSGs used to pre-built ready to serve HTML pages.<br>\nBut if you want to have your own dead simple SSG, that's also possible !</p>\n<h2 id=\"improving-our-markdown-blog\">Improving our Markdown blog <a class=\"direct-link\" href=\"#improving-our-markdown-blog\">#</a></h2>\n<p>The Markdown blog from the last tutorial was already a simple SSG, since it was taking data passed to templates and generating HTML pages out of them !<br>\nBut everything was inside the main server file and if we wanted to add more functionalities, the file would become crowded and unmaintainable.<br>\nThis is why, I'll show you how to improve this backend and make it ready to adopt more features.</p>\n<h3 id=\"livereload\">LiveReload <a class=\"direct-link\" href=\"#livereload\">#</a></h3>\n<hr>\n<p>It would be a waist of time if we had to reload the server and refresh the browser to see our changes each time we make some of them.<br>\nIn <a href=\"/posts/templating-a-nodejs-app-with-ejs/\">Templating a Node.js app with EJS</a>, we've learned how to implement a live reload from the main server file.<br>\nThis time, we'll put this feature as a separate file.<br>\nLet's bring in three development dependencies :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D nodemon livereload connect-livereload</code></pre>\n<p>In the main server file, <code>index.js</code>, add a line to export <code>app</code> :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js</span><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>exports<span class=\"token punctuation\">.</span>app <span class=\"token operator\">=</span> app 👈<br><span class=\"token operator\">...</span></code></pre>\n<p>Now we can call <code>app</code> in other files 😉<br>\nAt the root of the application, create a file called <code>liveReload.js</code> with the following content :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /liveReload.js</span><br>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">/** Start LiveReload implementation  */</span><br>\t<span class=\"token keyword\">const</span> livereload <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"livereload\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">const</span> connectLiveReload <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect-livereload\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> app <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index\"</span><span class=\"token punctuation\">)</span> 👈<br><br>\t<span class=\"token comment\">// Create a server with livereload and fire it up</span><br>\t<span class=\"token keyword\">const</span> liveReloadServer <span class=\"token operator\">=</span> livereload<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token comment\">// Refresh the browser after each saved change on the server with a delay of 100 ms</span><br>\tliveReloadServer<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t\tliveReloadServer<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token comment\">// Add livereload script to the response</span><br>\tapp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">connectLiveReload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token comment\">/** End LiveReload implementation  */</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Now, back to <code>index.js</code>, let's <code>require</code> this function :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js</span><br><span class=\"token operator\">...</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// LiveReload</span><br><span class=\"token keyword\">const</span> liveReload <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./liveReload\"</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">liveReload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token operator\">...</span></code></pre>\n<p>Finally, let's add a script to <code>package.json</code> :</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// /package.json</span><br>...<br>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon -e js,ejs,css,md\"</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>...</code></pre>\n<p>Now, the following command <code>npm run watch</code> will tell Nodemon to watch for any changes in <code>.js</code>, <code>.ejs</code>, <code>.css</code> and <code>.md</code> files, and restart the server while <code>liveReload()</code> will reload the browser.</p>\n<h3 id=\"routing\">Routing <a class=\"direct-link\" href=\"#routing\">#</a></h3>\n<hr>\n<p>The routes where defined in <code>index.js</code>, let's also put them in their own directory.<br>\nAt the root of the application, create a folder called <code>routes</code>.<br>\nInside this folder, create 2 files :</p>\n<ol>\n<li><code>mainRoute.js</code></li>\n<li><code>postsRoute.js</code></li>\n</ol>\n<p>The first one is obviously for the homepage, and the second one is for each individual post.</p>\n<p>Since we have multiple routes and each one will be in it's own file, let's use a <a href=\"/posts/express-global-router-for-a-dry-code/\">global router in Express for a DRY code</a>.<br>\nIn <code>index.js</code>, parse an <code>express.Router()</code> to a <code>global.router</code> assigned to a <code>router</code> variable, then use it in the app :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js</span><br><span class=\"token operator\">...</span><br><span class=\"token comment\">// LiveReload</span><br><span class=\"token keyword\">const</span> liveReload <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./liveReload\"</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">liveReload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Express global router</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><br><span class=\"token operator\">...</span></code></pre>\n<p>Now, let's move the logic of each route in it's own file :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/mainRoute.js</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>router<br><br><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> matter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gray-matter\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPosts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// Get the posts from their directory</span><br>\t<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/../views/posts</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> post<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".md\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token comment\">// Set the post content as an empty array</span><br>\t<span class=\"token keyword\">const</span> postContent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br>\t<span class=\"token comment\">// Inject into the post content array the front matter</span><br>\tposts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\tpostContent<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matter<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/../views/posts/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>post<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token comment\">/**<br>\t * 1- Return a list of posts as a two dimensional array containing for each one :<br>\t * . the post filename with it's extension (e.g : postFilename.md)<br>\t * . the post content as an object {content:\"Markdown content as a string\", data:{front matter}, excerpt:\"\"}<br>\t * 2- Return each array as an object and create a Date instance from it's date front matter<br>\t * 3- Sort posts by publication's date in descending order (newest to oldest)<br>\t */</span><br>\t<span class=\"token keyword\">const</span> postsList <span class=\"token operator\">=</span> posts<br>\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">post<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">,</span> postContent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">objA<span class=\"token punctuation\">,</span> objB</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>objB<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token keyword\">return</span> postsList<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Render the list of posts on the main route</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postsList\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/postsRoute.js</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>router<br><br><span class=\"token keyword\">const</span> matter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gray-matter\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Using a route parameter to render each post on a route matching it's filename</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/posts/:post\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> postTitle <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>post <span class=\"token comment\">// Get the Markdown filename</span><br><br>\t<span class=\"token comment\">// Read the Markdown file and parse it's front matter</span><br>\t<span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> matter<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/../views/posts/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>postTitle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.md</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token comment\">// Convert the Markdown file content to HTML with markdown-it</span><br>\t<span class=\"token keyword\">const</span> md <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"markdown-it\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">html</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Allows HTML tags inside the Markdown file</span><br>\t<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> post<span class=\"token punctuation\">.</span>content <span class=\"token comment\">// Read the Markdown file content</span><br>\t<span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Convert the Markdown file content to HTML</span><br><br>\t<span class=\"token comment\">// Render the postsTemplate for each post and pass it's front matter as a data object into postsTemplate</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postsTemplate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">postContent</span><span class=\"token operator\">:</span> html<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre>\n<p><em>Nota bene: in both files, I've replaced concatenation with template strings for paths</em>.</p>\n<p>Update <code>index.js</code> to <code>require</code> those routes :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js - COMPLETE FILE</span><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>exports<span class=\"token punctuation\">.</span>app <span class=\"token operator\">=</span> app<br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// LiveReload</span><br><span class=\"token keyword\">const</span> liveReload <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./liveReload\"</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">liveReload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Express global router</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Routes</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/mainRoute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/postsRoute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Launching the application on port 3000</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App 🚀 @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Now that's a clean server file 👍</p>\n<h3 id=\"styles-and-scripts\">Styles and Scripts <a class=\"direct-link\" href=\"#styles-and-scripts\">#</a></h3>\n<hr>\n<p><strong>Important subsection ahead !</strong></p>\n<p>In a common webapp, we would have a main stylesheet as well as a main scripts file.<br>\nBoth files would be rendered on each and every page of the application, but we all know that we do not need all the styles nor all the scripts on every page !<br>\nIf you look closer to <code>postsRoute.js</code>, even in <code>index.js</code> from the last tutorial, we passed an option along with <code>markdown-it</code> to allow HTML tags inside the Markdown files :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> md <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"markdown-it\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">html</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>So we can use <code>&lt;style&gt;</code> and <code>&lt;script&gt;</code> tags inside our Markdown files 😉<br>\nLet's try to change the color of the title in <code>my-first-article.md</code> :</p>\n<pre class=\"language-md\"><code class=\"language-md\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span><br><span class=\"token front-matter yaml language-yaml\">title: My first article<br>date: 2022/07/25</span><br><span class=\"token punctuation\">---</span></span><br><br>This is the content of my first article<br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"><span class=\"token selector\">h1</span><span class=\"token punctuation\">{</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">}</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><br><span class=\"token comment\">&lt;!-- /views/posts/my-first-article.md --></span></code></pre>\n<p>Take a look at this post, the title is now red !<br>\nBut if you look at <code>a-second-post.md</code>, the title is still black !<br>\nThis is awesome, we can load individual styles for each and every post 🥳</p>\n<p>The same logic is applicable for scripts :</p>\n<pre class=\"language-md\"><code class=\"language-md\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span><br><span class=\"token front-matter yaml language-yaml\">title: My first article<br>date: 2022/07/25</span><br><span class=\"token punctuation\">---</span></span><br><br>This is the content of my first article<br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"><span class=\"token selector\">h1</span><span class=\"token punctuation\">{</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">}</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from my-first-article.md\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token comment\">&lt;!-- /views/posts/my-first-article.md --></span></code></pre>\n<p>Okay, but what if a page has a decent amount of individual styles or scripts and we don't want to put the whole block inside the Markdown file ?<br>\nGood question ! Easy-peasy, just load it as you would normally do it.<br>\nLet's say that I have some particular styles and scripts for <code>a-second-post.md</code>.<br>\nCreate a folder at the root of the application called <code>public</code> and under it create two folders called <code>css</code> and <code>scripts</code>.<br>\nIn <code>css</code>, create a file called <code>second-post-styles.css</code> with the following content :</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* /public/css/second-post-styles.css */</span><br><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>In <code>scripts</code>, create a file called <code>second-post-scripts.js</code> with the following content :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* /public/scripts/second-post-scripts.js */</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from second-post-scripts.js\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Now, update <code>a-second-post.md</code> to look like this :</p>\n<pre class=\"language-md\"><code class=\"language-md\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span><br><span class=\"token front-matter yaml language-yaml\">title: A second post<br>date: 2022/07/28</span><br><span class=\"token punctuation\">---</span></span><br><br>Here goes the content of my second post<br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/css/second-post-styles.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/scripts/second-post-scripts.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token comment\">&lt;!--- /views/posts/a-second-post.md --></span></code></pre>\n<p>Take a look at this post, the title is now blue and if you open the browser's console <code>F12</code>, you'll see the message 🥳</p>\n<p>⚠️ The first slash <code>/</code> in the paths <code>href</code> and <code>src</code> is mandatory, if you omit it you'll get an error in the console.<br>\nThe reason is because the <code>link</code> and <code>script</code> tags are treated as a Markdown content, converted to HTML, injected in EJS template, rendered on the frontend.<br>\nIf we omit the first slash, the Markdown parser will think that those folder are in the same folder as the post, the <code>posts</code> folder, then those incorrect paths will be converted to HTML and injected into the EJS template that will render the post on the frontend where the browser will respond with a <code>404 Not Found</code>.<br>\nBy putting a slash <code>/</code> at the beginning of the path, Express will understand that we are asking for folders and files living under the the root directory from which to serve static assets, the <code>public</code> folder :</p>\n<pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p><em>Nota bene : the first slash <code>/</code> is not mandatory for a path directly defined in a template, an <code>.ejs</code> file</em>.<br>\nIn our case, <code>postsTemplate.ejs</code> is an exception because it's rendered on a dynamic route where the content comes from a parsed Markdown file, so in this file and every similar file, if we want to use the <code>public</code> folder, all our paths must begin with a slash <code>/</code>.</p>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>From here, you can take control over this simple SSG and maybe add a <code>pagesTemplate.ejs</code>, a pagination, a contact form, a searchbox...</p>\n<p>I hope that this was helpful.<br>\nThanks for reading so far.</p>\n",
      "date_published": "2022-07-31T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/markdown-blog-with-ejs/",
      "url": "https://lebcit.github.io/posts/markdown-blog-with-ejs/",
      "title": "Markdown blog with EJS",
      "content_html": "<p><em>This post is about creating a Markdown blog with EJS.</em></p>\n<h2 id=\"intro\">Intro <a class=\"direct-link\" href=\"#intro\">#</a></h2>\n<p>Writing a post content with HTML is not as easy as doing it with <a href=\"https://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"external noopener noreferrer\">Markdown</a>.<br>\nSince my coming <a href=\"/posts/back-to-the-roots-with-a-static-site/\">back to the roots whit a static site</a>, I write my posts content with Markdown.<br>\nA little time after that, I discovered <a href=\"/posts/to-node-or-not-deta-is-the-answer/\">Deta Cloud</a> and was able to try everything I've learned about Node.js on a live server.<br>\nMy favorite templating language is <a href=\"https://ejs.co/\" target=\"_blank\" rel=\"external noopener noreferrer\">EJS</a>, and I wanted to create a dead simple blog by combining the content of a Markdown file with an EJS template.<br>\nAfter a lot of research and tries &amp; fails, I've understood the mechanism needed to accomplish my goal.<br>\nI found some tutorials about the subject and this tutorial is inspired by the last one I stumbled on, <a href=\"https://julianterenzio.io/blog/Building%20A%20Markdown%20Blog%20App%20with%20Express%20and%C2%A0EJS\" target=\"_blank\" rel=\"external noopener noreferrer\">Building A Markdown Blog App with Express and EJS</a>, with some improvements and all the details.</p>\n<h2 id=\"requirements\">Requirements <a class=\"direct-link\" href=\"#requirements\">#</a></h2>\n<p>To execute our magic spell, we'll need the following packages :</p>\n<ol>\n<li>EJS, to template our application</li>\n<li><a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">Express</a>, the web framework for Node.js</li>\n<li><a href=\"https://www.npmjs.com/package/gray-matter\" target=\"_blank\" rel=\"external noopener noreferrer\">gray-matter</a>, to parse the front matter from the Markdown files</li>\n<li><a href=\"https://www.npmjs.com/package/markdown-it\" target=\"_blank\" rel=\"external noopener noreferrer\">markdown-it</a>, to parse the Markdown files content</li>\n</ol>\n<p>To install them with one command :</p>\n<p><code>npm i ejs express gray-matter markdown-it</code></p>\n<h2 id=\"server-setup\">Server setup <a class=\"direct-link\" href=\"#server-setup\">#</a></h2>\n<p>In your main server file, mine is <code>index.js</code>, put the following :</p>\n<details>\n<summary>/index.js</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Built-in module to access and interact with the file system</span><br><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">// To parse front matter from Markdown files</span><br><span class=\"token keyword\">const</span> matter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gray-matter\"</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPosts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// Get the posts from their directory</span><br>\t<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/views/posts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> post<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".md\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token comment\">// Set the post content as an empty array</span><br>\t<span class=\"token keyword\">const</span> postContent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br>\t<span class=\"token comment\">// Inject into the post content array the front matter</span><br>\tposts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\tpostContent<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>matter<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/views/posts/\"</span> <span class=\"token operator\">+</span> post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token comment\">/**<br>\t * 1- Return a list of posts as a two dimensional array containing for each one :<br>\t * . the post filename with it's extension (e.g : postFilename.md)<br>\t * . the post content as an object {content:\"Markdown content as a string\", data:{front matter}, excerpt:\"\"}<br>\t * 2- Return each array as an object and create a Date instance from it's date front matter<br>\t * 3- Sort posts by publication's date in descending order (newest to oldest)<br>\t */</span><br>\t<span class=\"token keyword\">const</span> postsList <span class=\"token operator\">=</span> posts<br>\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">post<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">,</span> postContent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">objA<span class=\"token punctuation\">,</span> objB</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>objB<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token keyword\">return</span> postsList<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Render the list of posts on the main route</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postsList\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Using a route parameter to render each post on a route matching it's filename</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/posts/:post\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> postTitle <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>post <span class=\"token comment\">// Get the Markdown filename</span><br><br>\t<span class=\"token comment\">// Read the Markdown file and parse it's front matter</span><br>\t<span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> matter<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/views/posts/\"</span> <span class=\"token operator\">+</span> postTitle <span class=\"token operator\">+</span> <span class=\"token string\">\".md\"</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token comment\">// Convert the Markdown file content to HTML with markdown-it</span><br>\t<span class=\"token keyword\">const</span> md <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"markdown-it\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">html</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Allows HTML tags inside the Markdown file</span><br>\t<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> post<span class=\"token punctuation\">.</span>content <span class=\"token comment\">// Read the Markdown file content</span><br>\t<span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Convert the Markdown file content to HTML</span><br><br>\t<span class=\"token comment\">// Render the postsTemplate for each post and pass it's front matter as a data object into postsTemplate</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postsTemplate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">postContent</span><span class=\"token operator\">:</span> html<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Launching the application on port 3000</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App 🚀 @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n</details>\n<p>As you can see everything is explained in detail.<br>\n<em>Nota bene : I'm directly using the views folder as the template files location, no need to declare it, Express detects it by default, and the Markdown files are under the views folder inside another folder called posts</em>.</p>\n<p>I want to bring your attention to one particular point.<br>\nWhen we render the <code>postTemplate</code> and pass the Markdown front matter and content as a data object, we can add and pass as many <code>key: value</code> pair as we want, but we can't call an undefined <code>key</code> inside the <code>postTemplate</code> !<br>\nSo, if you add a <code>description: my post description</code> to the front matter of the Markdown file, you can't call it directly inside the <code>postTemplate</code> without adding it in the data object.<br>\n<em>Nota bene : No need to declare the <code>.ejs</code> extension for a template file, Express detects it by default</em>.</p>\n<h2 id=\"rendering-the-frontend\">Rendering the frontend <a class=\"direct-link\" href=\"#rendering-the-frontend\">#</a></h2>\n<p>As you have seen in <code>index.js</code>, I'm rendering a list of posts on the main route from a template called <code>postsList.ejs</code>. Add the following to this file :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- /views/postsList.ejs --></span><br><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Home | My blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><br>\t\t\tWelcome to my blog<br>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><br>\t\t\tList of recent posts<br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>\t\t&lt;% posts.forEach(post => { %><br>\t\t<span class=\"token comment\">&lt;!-- Get the Markdown filename without it's extension --></span><br>\t\t&lt;% const postFilename = post[0].replace(/\\.[^/.]+$/, \"\") %><br>\t\t<span class=\"token comment\">&lt;!-- Get the Markdown post title from it's front matter --></span><br>\t\t&lt;% const postTitle = post[1].data.title %><br>\t\t<span class=\"token comment\">&lt;!-- Render the title as a link to the post --></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/posts/&lt;%= postFilename %><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&lt;%= postTitle%><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><br>\t\t&lt;% }) %><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Now, each post has the same structure, one template file called <code>postsTemplate.ejs</code>. Add the following to this one :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- /views/postsTemplate.ejs --></span><br><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>&lt;%= title %> | My blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>&lt;%= title %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>&lt;%= date %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>&lt;%- postContent %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Everything is in place, we can now write our posts with Markdown in the <code>views</code> folder under the <code>posts</code> folder 🥳</p>\n<p>I've created two files for you to see the output if you try it :</p>\n<pre class=\"language-md\"><code class=\"language-md\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span><br><span class=\"token front-matter yaml language-yaml\">title: My first article<br>date: 2022/07/23</span><br><span class=\"token punctuation\">---</span></span><br><br>This is the content of my first article<br><br><span class=\"token comment\">&lt;!--- /views/posts/my-first-article.md --></span></code></pre>\n<pre class=\"language-md\"><code class=\"language-md\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span><br><span class=\"token front-matter yaml language-yaml\">title: A second post<br>date: 2022/07/25</span><br><span class=\"token punctuation\">---</span></span><br><br>Here goes the content of my second post<br><br><span class=\"token comment\">&lt;!--- /views/posts/a-second-post.md --></span></code></pre>\n<p>The app structure looks like the following tree :</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">// App's structure without the node_modules folder<br>├── index.js<br>├── package-lock.json<br>├── package.json<br>└── views<br>  ├── posts<br>  │  ├── a-second-post.md<br>  │  └── my-first-article.md<br>  ├── postsList.ejs<br>  └── postsTemplate.ejs</code></pre>\n<p>I hope that this tutorial will be helpful for everyone trying to create a Markdown blog with EJS.</p>\n",
      "date_published": "2022-07-25T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/express-global-router-for-a-dry-code/",
      "url": "https://lebcit.github.io/posts/express-global-router-for-a-dry-code/",
      "title": "Express global router for a DRY code",
      "content_html": "<p><em>This post is about using a global router in Express for a DRY code.</em></p>\n<p>When developing a Node.js app with Express, we'll usually have two or more routes.<br>\nIf we use the <a href=\"https://expressjs.com/en/guide/routing.html#express-router\" target=\"_blank\" rel=\"external noopener noreferrer\">express.Router</a> class to put each route in a separate file, we'll always have to begin with the same block of code :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>There is a better approach by using a global router.</p>\n<p>In the main server file, we'll parse an <a href=\"https://expressjs.com/en/guide/routing.html#express-router\" target=\"_blank\" rel=\"external noopener noreferrer\">express.Router</a> to a <code>global.router</code> assigned to a <code>router</code> variable, and in each route we'll only use this global router.</p>\n<p>Let's say we have only two routes : main <code>&quot;/&quot;</code> and about <code>&quot;/about&quot;</code>.<br>\nFollowing the common way, any route in it's own file will look like :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/aRoute.js</span><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A route content\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Then, in the main server file we'll have :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js</span><br><span class=\"token operator\">...</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/a-route\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/aRoute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token operator\">...</span></code></pre>\n<p>But by using a global router we can do the following :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js</span><br><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Parse an express router to a global router variable</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">// Use the global router variable</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Routes</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/about\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Launching the app on port 3000</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App 🚀 @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Then our two routes will look like so :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/main.js</span><br><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>router<br><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to the main route\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/about.js</span><br><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>router<br><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to the about route\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre>\n<p>Hope this will help you write a DRY code.</p>\n",
      "date_published": "2022-07-18T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/improving-a-nodejs-app-built-with-express-and-ejs/",
      "url": "https://lebcit.github.io/posts/improving-a-nodejs-app-built-with-express-and-ejs/",
      "title": "Improving a Node.js app built with Express and EJS",
      "content_html": "<p><em>This post is about improving a Node.js application built with Express and EJS.</em></p>\n<h2 id=\"intro\">Intro <a class=\"direct-link\" href=\"#intro\">#</a></h2>\n<p>In the <a href=\"/posts/templating-a-nodejs-app-with-ejs\">last tutorial</a>, we've built a basic Node.js web application using EJS and Express. So, to understand this one, you should have followed the previous.</p>\n<p>In this post, we are going to improve this application to make it look nicer on the server.<br>\nAs usual, I'll be explaining every step so you get the most out of this tutorial if you follow.</p>\n<h2 id=\"dynamic-content\">Dynamic content <a class=\"direct-link\" href=\"#dynamic-content\">#</a></h2>\n<p>Till now, we had a homepage with an image and a button that displays a message when you click on it.<br>\nWe also had an about page with a link inside a paragraph and an image under it.<br>\nBoth pages have different document title, different page title, and the same menu.</p>\n<p>Nothing fancy in fact, but let's assume that our homepage will display a list of titles.<br>\nThose titles may come from each post in a blog.</p>\n<p>Update <code>index.js</code> to create a list of titles of posts that will be rendered on the homepage.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js</span><br><span class=\"token operator\">...</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">let</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Who invented JavaScript ?\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My first JavaScript piece\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Logging into the console !\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">]</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage | EJS App\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">pageTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage of templating with EJS application\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> posts<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token operator\">...</span></code></pre>\n<p>We are creating an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external noopener noreferrer\">array</a> of <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\" target=\"_blank\" rel=\"external noopener noreferrer\">objects</a> inside the main route <code>&quot;/&quot;</code> called <code>posts</code>, where each object has a <code>key</code> and in front of each one a <code>value</code>.</p>\n<p>Remember that our main route renders <code>index.ejs</code>. So to access and display those titles, we should update <code>index.ejs</code> to integrate them like so :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- /views/index.ejs --></span><br>...<br><span class=\"token comment\">&lt;!-- Looping through the posts array --></span><br>&lt;% posts.forEach((post) => { %><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>&lt;%= post.title %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><br>&lt;% }) %><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pure-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>A Button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><br>...</code></pre>\n<p>We are looping through the <code>posts</code> array using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"external noopener noreferrer\">forEach()</a> method.<br>\n<strong>Note how we are opening and closing EJS tags !</strong><br>\nIt's very important to understand the logic of opening and closing the EJS and HTML tags when using them together.<br>\nThe code isn't difficult at all, we are telling EJS to get the <code>posts</code>, and <code>forEach</code> one we want to display it's <code>title</code> inside an <code>&lt;h2&gt;</code> tag.<br>\nSave both files and take a look at the homepage.<br>\nGreat job !</p>\n<p>In addition to a title, a post should have at least a description to give the reader an idea about it's content, maybe an image to make it more appealing, and a date indicating how recent and relevant it is in today's world.<br>\nOf course it should also have a link to the post itself, but we are not going to do it since we're not going to create them on the frontend.<br>\nLet's update our files to look like so :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js</span><br><span class=\"token operator\">...</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">let</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Who invented JavaScript ?\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A post about the father of JavaScript\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-03\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My first JavaScript piece\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A post about my first JavaScript block\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-10\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Logging into the console !\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A post about messages in the console\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-17\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">]</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage | EJS App\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">pageTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage of templating with EJS application\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> posts<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token operator\">...</span></code></pre>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- /views/index.ejs --></span><br>...<br><span class=\"token comment\">&lt;!-- Looping through the posts array --></span><br>&lt;% posts.forEach((post) => { %><br><span class=\"token comment\">&lt;!-- Adding the title inside an &lt;h2> --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>&lt;%= post.title %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><br><span class=\"token comment\">&lt;!-- Adding the date inside a paragraph --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>posted on &lt;%= post.date %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br><span class=\"token comment\">&lt;!-- Adding the description inside an &lt;h3> --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>&lt;%= post.description %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><br>&lt;% }) %><br><span class=\"token comment\">&lt;!-- Closing the loop --></span><br>...</code></pre>\n<p>Save both files and take a look at the homepage.<br>\nAll of this is great, but imagine that we have a blog of 50 posts and each post have a title, a link, a description, an image, a date of publication, a date of update, and some tags 😱<br>\nYes, <code>index.js</code> would be crowded and difficult to maintain with a huge block of information just for the posts.<br>\nWe'll be addressing this in the next section.</p>\n<h2 id=\"organizing-the-backend\">Organizing the backend <a class=\"direct-link\" href=\"#organizing-the-backend\">#</a></h2>\n<p>Since we are working on a server-side application, our code on the backend will evolve and get longer.<br>\nWe shouldn't put everything inside our main server file because it will become almost impossible to look for a specific portion to update it or find a bug and correct it...</p>\n<p>I don't think that their is a developer who doesn't split his code.<br>\nWe split our code into pieces where each one is easily trackable in a near or far future to keep it clean and maintainable.</p>\n<h3 id=\"routing\">Routing <a class=\"direct-link\" href=\"#routing\">#</a></h3>\n<hr>\n<p>For now we only have 2 routes, main <code>&quot;/&quot;</code> and <code>&quot;/about&quot;</code>, but when our application will have some other routes where each one have it's logic and functionalities, our main server file will be huge, a little bit ugly and unmaintainable.</p>\n<p>Do you remember the <a href=\"/posts/templating-a-nodejs-app-with-ejs/#simple-routing\">Simple routing</a> section ?<br>\nWell now we'll do a better one by putting each route in it's own file.</p>\n<p>To do so, we'll use the <a href=\"https://expressjs.com/en/guide/routing.html#express-router\" target=\"_blank\" rel=\"external noopener noreferrer\">express.Router</a> class.<br>\nCreate a new folder called <code>routes</code> at the root of the app.<br>\nInside this folder, create a file called <code>home.js</code> with the following content :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/home.js</span><br><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Defining a route</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">let</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Who invented JavaScript ?\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A post about the father of JavaScript\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-03\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My first JavaScript piece\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A post about my first JavaScript block\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-10\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Logging into the console !\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A post about messages in the console\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-17\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">]</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage | EJS App\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">pageTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage of templating with EJS application\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> posts<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre>\n<p>Instead of <code>app.get</code> we use <code>router.get</code> and <code>export</code> it as a <code>module</code>.<br>\nNow, in <code>index.js</code>, replace the main route by this :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js</span><br><span class=\"token operator\">...</span><br><span class=\"token comment\">/**<br> * Rendering index page on the main route,<br> * using the express.Router class.<br> */</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/home\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token operator\">...</span><br></code></pre>\n<p>Here we are telling Express to look for the file <code>home.js</code> that lives under the <code>routes</code> folder and to execute it's content on the main route <code>&quot;/&quot;</code>.</p>\n<p>So far, so good, but the <code>posts</code> array will grow and now this <code>home.js</code> file will not be maintainable, so let's get it out of there inside a separate file where only the posts info lives.<br>\nCreate a file called <code>postsListInfo.js</code> inside the <code>routes</code> folder :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/postsListInfo.js</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Who invented JavaScript ?\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A post about the father of JavaScript\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-03\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My first JavaScript piece\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A post about my first JavaScript block\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-10\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Logging into the console !\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A post about messages in the console\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-17\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">]</span></code></pre>\n<p>See, we directly exported the array itself.<br>\nNow, all we have to do is update <code>home.js</code> like so :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/home.js</span><br><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">let</span> posts <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./postsListInfo\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Defining a route</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage | EJS App\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">pageTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage of templating with EJS application\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> posts<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre>\n<p>Pay attention !</p>\n<ol>\n<li>Since the two files are at the same level, we directly require <code>postsListInfo.js</code>. See <a href=\"/posts/templating-a-nodejs-app-with-ejs/#paths\">Paths</a>.</li>\n<li>The variable <code>posts</code> assigned to this require statement <strong>should</strong> match the <code>value</code> of the <code>data object</code> !<br>\nWe could name the variable <code>postsListInfo</code>, but the <code>data object</code> would now be <code>posts: postsListInfo</code>. See <a href=\"/posts/templating-a-nodejs-app-with-ejs/#data-object\">Data object</a>.</li>\n</ol>\n<p>Save both files and take a look at the homepage.<br>\nGreat job ! We now have the same display on the frontend, but with a clean, clear and maintainable code on the backend !</p>\n<p><em>Nota bene : we could create at the root of the app a folder just for the <code>postsListInfo.js</code> file and <code>require</code> it from there</em>.</p>\n<p>Lets's now put the <code>&quot;/about&quot;</code> route in it's own file.<br>\nUnder <code>routes</code>, create a file called <code>about.js</code> with the following content :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/about.js</span><br><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Defining a route</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"about\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"About me | EJS App\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">pageTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A little bit about myself\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre>\n<p>We are defining a route on which we'll render <code>about.ejs</code>.<br>\nNow replace <code>&quot;/about&quot;</code> route in <code>index.js</code> by :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js</span><br><span class=\"token operator\">...</span><br><span class=\"token comment\">/**<br> * Rendering about page on the /about route,<br> * using the express.Router class.<br> */</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/about\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token operator\">...</span></code></pre>\n<p>Here we are telling Express to look for the file <code>about.js</code> that lives under the <code>routes</code> folder and to execute it's content on the <code>&quot;/about&quot;</code> route.</p>\n<p>Now, if you ever want to make changes on a specific route, you know where to make them, it will always be under one specific file 😉</p>\n<h3 id=\"don't-repeat-yourself\">Don't Repeat Yourself <a class=\"direct-link\" href=\"#don't-repeat-yourself\">#</a></h3>\n<hr>\n<p>Do you remember the <a href=\"/posts/templating-a-nodejs-app-with-ejs/#don't-repeat-yourself\">DRY</a> section ?<br>\nWell, in the backend also, you should avoid to repeat yourself !</p>\n<p>If you take a closer look to <code>postsListInfo.js</code>, you'll notice that every description begins with <em>A post about</em>, assuming that you'll follow this pattern for each and every post's description, or maybe a much longer one such as <em>The content of the following post is about</em>, we could do the following :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/postsListInfo.js</span><br><br><span class=\"token keyword\">const</span> descIntro <span class=\"token operator\">=</span> <span class=\"token string\">\"The content of the following post is about\"</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Who invented JavaScript ?\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>descIntro<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> the father of JavaScript</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-03\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My first JavaScript piece\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>descIntro<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> my first JavaScript block</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-10\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Logging into the console !\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>descIntro<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> messages in the console</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">date</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-06-17\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">]</span></code></pre>\n<p><strong>WHAT IS THIS ?!</strong><br>\nThis is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" rel=\"external noopener noreferrer\">Template string</a>.<br>\nYou can pass a variable into a string by writing the whole string inside backtick and call your variable inside a <code>${}</code> at the desired place.<br>\n<code>Template literals</code> are much more powerful than that, they can be used inside functions to create reusable blocks, yes just like template engines...</p>\n<p>On the other hand, if you look at <code>home.js</code> and <code>about.js</code>, they both begin with the same block of code :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>To resolve this one, we'll use a <code>global.router</code> configuration.<br>\nUpdate the content of those files as well as <code>index.js</code> :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/home.js</span><br><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>router<br><br><span class=\"token keyword\">let</span> posts <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./postsListInfo\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Rendering index.ejs on the main route.</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage | EJS App\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">pageTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage of templating with EJS application\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> posts<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /routes/about.js</span><br><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>router<br><br><span class=\"token comment\">// Rendering about.ejs on /about route.</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"about\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"About me | EJS App\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">pageTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A little bit about myself\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// /index.js complete file</span><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Set EJS as template engine</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Serve static files from a folder named public</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Require livereload and connectLiveReload</span><br><span class=\"token keyword\">const</span> livereload <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"livereload\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> connectLiveReload <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect-livereload\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Create a server with livereload and fire it up</span><br><span class=\"token keyword\">const</span> liveReloadServer <span class=\"token operator\">=</span> livereload<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Refresh the browser after each saved change on the server with a delay of 100 ms</span><br>liveReloadServer<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\tliveReloadServer<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Add livereload script to the response</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">connectLiveReload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">/** Start Routing */</span><br><span class=\"token comment\">// Parse an express router to a global router variable</span><br><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">// Use the global router variable</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><br><span class=\"token comment\">// Execute home.js content on the entry route of the app.</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/home\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">// Execute about.js content on the entry route of the app.</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/about\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">/** End Routing */</span><br><br><span class=\"token comment\">// Launching the app on port 3000</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App 🚀 @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Now you know the basics to organize your backend and make it maintainable.</p>\n<p>To test your new skills, I suggest that you replicate the <strong>Blog</strong> of Pure.css <a href=\"https://purecss.io/layouts/\" target=\"_blank\" rel=\"external noopener noreferrer\">Layouts</a> as a Node.js app.</p>\n<p>I hope that this was helpful.</p>\n",
      "date_published": "2022-07-17T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/templating-a-nodejs-app-with-ejs/",
      "url": "https://lebcit.github.io/posts/templating-a-nodejs-app-with-ejs/",
      "title": "Templating a Node.js app with EJS",
      "content_html": "<p><em>This post is about templating a Node.js application with EJS.</em></p>\n<h2 id=\"intro\">Intro <a class=\"direct-link\" href=\"#intro\">#</a></h2>\n<p>There are a lot of tutorials about EJS out there, as well as a lot of <a href=\"https://stackoverflow.com/questions/tagged/ejs\" target=\"_blank\" rel=\"external noopener noreferrer\">questions/answers</a>.<br>\nI decided to make my own as a beginner's guide, full of details, to bring the reader's attention about what could be going on or maybe off...</p>\n<p>In this post, we are going to build a basic Node.js web application using EJS as a templating language.<br>\nSo, we'll go through the process step by step and explain every step to understand it 🧠</p>\n<h2 id=\"template-engines\">Template engines <a class=\"direct-link\" href=\"#template-engines\">#</a></h2>\n<p>A template engine, processor or parser, is a software designed to inject data into a file, that commonly have the same extension as the template language or refers to, by using special markups that the template engine is programmed to understand and execute, resulting in a document where data have been passed from one end to another.</p>\n<p>Why don't we put the desired data directly into the file ?<br>\nGood question !<br>\nThe simple answer is that template engines where created not only to structure the output of a document, but also to pass, get and set dynamic data as numbers, dates, strings, database information and so on...</p>\n<p>Today, template engines are mostly used to build server-side applications structured as fragments, using a template language to combine those small pieces and pass data across them to rapidly produce a ready to use application.</p>\n<p>Some popular JavaScript template engines :</p>\n<ul>\n<li><a href=\"https://ejs.co/\" target=\"_blank\" rel=\"external noopener noreferrer\">EJS</a> : Embedded JavaScript templating</li>\n<li><a href=\"https://pugjs.org/api/getting-started.html\" target=\"_blank\" rel=\"external noopener noreferrer\">Pug</a> : Robust, elegant, feature rich template engine for Node.js</li>\n<li><a href=\"https://handlebarsjs.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">Handlebars</a> : Minimal templating on steroids</li>\n<li><a href=\"https://mozilla.github.io/nunjucks/\" target=\"_blank\" rel=\"external noopener noreferrer\">Nunjucks</a> : A rich and powerful templating language for JavaScript</li>\n<li><a href=\"https://github.com/janl/mustache.js\" target=\"_blank\" rel=\"external noopener noreferrer\">Mustache</a> : Logic-less  templates with JavaScript</li>\n</ul>\n<p>I prefer and recommend EJS because :</p>\n<blockquote>\n<p>It's just plain JavaScript.</p>\n</blockquote>\n<h2 id=\"setup\">Setup <a class=\"direct-link\" href=\"#setup\">#</a></h2>\n<p>To follow up this tutorial, you'll need to install on your machine <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external noopener noreferrer\">Node.js</a>, always go for the Long Time Support version, at the time of writing this post it's 16.15.1 LTS.<br>\nYou'll also need a code editor, I use and strongly recommend <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">VS Code</a>, the best and most developer friendly code editor in my opinion.</p>\n<p>Now, create a folder named ejs where you usually stock your projects, mine is simply projects.<br>\nOpen this folder in VS Code, then open the <a href=\"https://code.visualstudio.com/docs/editor/integrated-terminal\" target=\"_blank\" rel=\"external noopener noreferrer\">TERMINAL</a> by pressing on 'Ctrl' and '`' (the backtick character under Esc) at the same time.<br>\nType the following command to initialize a project using <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">npm</a> (Node Package Manager) :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init -y</code></pre>\n<p>This command will create a <code>package.json</code> file at the root of your ejs project. This <code>JSON</code> file contains all the information about your project.<br>\nYou can add a <code>description</code>, modify the <code>version</code>'s app as well as the <code>main</code> entry file of the app (default is <code>index.js</code>), add <code>scripts</code>, <code>keywords</code>, your name as the <code>author</code>, and keep track of installed packages (we'll see this last one in a moment).<br>\nYou can leave it as it is, and it's also fine, since we are just testing and not publishing our app.</p>\n<h2 id=\"express\">Express <a class=\"direct-link\" href=\"#express\">#</a></h2>\n<p>Since we're building a web app in Node.js, we'll be using <a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">Express</a> to simplify our development and take advantage of it's features :</p>\n<ul>\n<li>Fast server-side development : Time saver, by using features of Node.js as functions</li>\n<li>Middleware : Access application's request-response cycle</li>\n<li>Routing : Great routing mechanism for client requests</li>\n<li>Templating : Build dynamic content with template engines</li>\n<li>Debugging : Express points to the part where a bug occurs</li>\n</ul>\n<p>Express is the most popular Node.js web framework, written in plain JavaScript, that helps developers build web and mobile applications quickly with ease.<br>\nExpress let's also developers build the way they want, without forcing them into a specific way of doing things, this is why it's called unopinionated !</p>\n<p>Install Express by typing the following command in the TERMINAL :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i express<br><span class=\"token comment\"># i stands for install</span></code></pre>\n<p>This command will install Express into the application.<br>\nYou'll see after running this command a <code>node_modules</code> folder as well as a <code>package-lock.json</code> file at the root of the app.</p>\n<p>We now have to display the famous <em>Hello World !</em> with Express.<br>\nThe main entry file, if you didn't change it in <code>package.json</code>, is <code>index.js</code>, this file is commonly known as the main server file.<br>\nCreate this file at the root of the app.<br>\nThe app structure should now look like the following tree :</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Application's root without node_modules folder<br>├── index.js<br>├── package-lock.json<br>└── package.json</code></pre>\n<p>Put the following code in <code>index.js</code> :</p>\n<details>\n<summary>/index.js</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World !\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Launching the app on port 3000</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App launched @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n</details>\n<p>To run this app, simply type in the TERMINAL the following command :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">node</span> index</code></pre>\n<p>You'll immediately see under it :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">App launched @ http://localhost:3000</code></pre>\n<p>Put your mouse over the link and click on <strong>Follow link</strong>.<br>\nIf you don't see it, put your mouse over the link, press <code>Ctrl</code> and click on the link.<br>\nYou now should see a beautiful <em>Hello World !</em> in your default browser !</p>\n<h2 id=\"nodemon\">Nodemon <a class=\"direct-link\" href=\"#nodemon\">#</a></h2>\n<p>Remember that this app is a server-side one !<br>\nBrief and quick example.<br>\nTry to change <em>Hello World !</em> in <code>index.js</code> to whatever other string, let's say <em>Hi from server-side !</em> and save the file.<br>\nIf you reload your browser nothing happens, no change is made !<br>\nThis is because the server is still running up your previous code.<br>\nTo display your new string, you should stop the server, restart it, then reload the browser.<br>\nYou can do the following in the TERMINAL :</p>\n<ol>\n<li>Focus inside your TERMINAL and click <code>Ctrl+c</code>, this will stop the server</li>\n<li>Type <code>node index</code>, this will restart the server</li>\n<li>Reload your browser and your new string appears</li>\n</ol>\n<p>When developing, you'll inspect your changes in the browser as much as you're coding, the above process to see the new output is unproductive, a time killer, and will make your hate coding.</p>\n<p>Fortunately, their is a very popular and well maintained package called <a href=\"https://www.npmjs.com/package/nodemon\" target=\"_blank\" rel=\"external noopener noreferrer\">nodemon</a> that takes care of automatically restarting the Node.js application when changes are detected for a <code>.js</code>, <code>.mjs</code> or <code>.json</code> file in the working directory.<br>\nNodemon is configurable and will allow us to define which directories and extensions to watch or even ignore, and that's just great !</p>\n<p>Let's install Nodemon.<br>\nIn the TERMINAL, type the following command :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D nodemon<br><span class=\"token comment\"># -D is a flag standing for development</span></code></pre>\n<p>This command will install Nodemon as a development package, this means that we need this package only for development and not for production/deployment.<br>\nOpen <code>package.json</code>, remove <code>test</code> command under <code>scripts</code> and replace it by the following one :</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon index.js\"</span></code></pre>\n<p>The file should now look like this :</p>\n<details>\n<summary>/package.json</summary>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon index.js\"</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"keywords\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.18.1\"</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token property\">\"nodemon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.0.19\"</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n</details>\n<p>Now, all you have to do is to stop the server if it's running then type in the TERMINAL :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> start</code></pre>\n<p>You'll get directly under it :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> ejs@1.0.0 start<br><span class=\"token operator\">></span> nodemon index.js<br><br><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> <span class=\"token number\">2.0</span>.19<br><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> to restart at any time, enter <span class=\"token variable\"><span class=\"token variable\">`</span>rs<span class=\"token variable\">`</span></span><br><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching path<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: *.*<br><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching extensions: js,mjs,json<br><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> starting <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">node</span> index.js<span class=\"token variable\">`</span></span><br>App 🚀 @ http://localhost:3000</code></pre>\n<p>Yes, I've replaced <em>launched</em> by 🚀 in <code>index.js</code>.<br>\nFollow the link.<br>\nTry now to change <em>Hi from server-side !</em> to anything else, save the file and then reload your browser.<br>\nGreat ! The server have restarted the app and you can now see your changes, after you have saved them, by reloading the browser.</p>\n<h2 id=\"first-ejs-file\">First EJS file <a class=\"direct-link\" href=\"#first-ejs-file\">#</a></h2>\n<p>To start using EJS in Node.js, we have first to install it, you should by now know where to type the following command :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i ejs</code></pre>\n<p>Update <code>index.js</code> to <code>set</code> EJS as our template engine :</p>\n<details>\n<summary>/index.js</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Set EJS as template engine</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World !\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Launching the app on port 3000</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App 🚀 @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n</details>\n<p>Since EJS is now installed, let's use it !<br>\nTo do so, we have to create a <code>views</code> folder at the root of our app.<br>\nExpress will look inside this folder to <code>render</code> our page(s) by using EJS as a template engine.<br>\nInside <code>views</code>, create an <code>index.ejs</code> file.<br>\nThe app structure should now look like the following tree :</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Application's root without node_modules folder<br>├── index.js<br>├── package-lock.json<br>├── package.json<br>└── views<br>  └── index.ejs</code></pre>\n<p>Put the following content inside <code>index.ejs</code> :</p>\n<details>\n<summary>/views/index.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>EJS App Homepage<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello from EJS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<p>As you can see, an <code>.ejs</code> file is just <code>HTML</code> in which we can use plain <code>JavaScript</code>, and we'll do that later on.</p>\n<p>Now, all we have to do to <code>render</code> this template is to modify only one line in <code>index.js</code>.<br>\nReplace<br>\n<code>res.send(&quot;Hello World !&quot;)</code><br>\nby<br>\n<code>res.render(&quot;index&quot;)</code><br>\nNo need to specify the extension of the file because Express has been told to use EJS as a template engine.</p>\n<p>If your server is still running, just reload your browser, otherwise restart it and follow the link.<br>\nCongrats, your first EJS file is rendered !<br>\nYou can try to modify it, save your modification(s), and refresh your browser to see the changes.</p>\n<h2 id=\"livereload\">LiveReload <a class=\"direct-link\" href=\"#livereload\">#</a></h2>\n<p>Earlier, we've solved a half of the problem, no need to shut down the server and restart it anymore.<br>\nBut what about the browser, should I always refresh it ?<br>\nAbsolutely not ! This would also be an insane development step to do in today's world !<br>\nImagine having to refresh each and every time you make some changes...</p>\n<p>Let's bring into our project 2 packages that will do the work for us.<br>\nType the following command :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -D livereload connect-livereload</code></pre>\n<p>This command will install <a href=\"https://www.npmjs.com/package/livereload\" target=\"_blank\" rel=\"external noopener noreferrer\">livereload</a> and <a href=\"https://www.npmjs.com/package/connect-livereload\" target=\"_blank\" rel=\"external noopener noreferrer\">connect-livereload</a> as development dependencies, just like Nodemon.<br>\nAs you can guest, they work together, along with Nodemon, to reload the browser when files on the server have been modified.</p>\n<p>Let's implement this behavior by updating <code>index.js</code> :</p>\n<details>\n<summary>/index.js</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Set EJS as template engine</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Require livereload and connectLiveReload</span><br><span class=\"token keyword\">const</span> livereload <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"livereload\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> connectLiveReload <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect-livereload\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Create a server with livereload and fire it up</span><br><span class=\"token keyword\">const</span> liveReloadServer <span class=\"token operator\">=</span> livereload<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Refresh the browser after each saved change on the server with a delay of 100 ms</span><br>liveReloadServer<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\tliveReloadServer<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Add livereload script to the response</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">connectLiveReload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Render the main route with EJS</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Launching the app on port 3000</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App 🚀 @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n</details>\n<p>A final step is needed for this to work as expected.<br>\nWe'll have to add a command under <code>scripts</code> in <code>package.json</code> :</p>\n<details>\n<summary>/package.json</summary>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon index.js\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon -e js,ejs\"</span> <span class=\"token comment\">// Added command</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"keywords\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token property\">\"ejs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.1.8\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.18.1\"</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token property\">\"connect-livereload\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.6.1\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token property\">\"livereload\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.9.3\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token property\">\"nodemon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.0.19\"</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n</details>\n<p>This command tells Nodemon to watch for changes of files with a <code>.js</code> or <code>.ejs</code> extension in the app.<br>\n<em>Nota bene</em> : you can change the name of the command to whatever you like !<br>\nSo for example you could rename <em>start</em> to <em>fire</em> and maybe <em>watch</em> to <em>build</em>...</p>\n<p>Now comes the moment of truth.<br>\nIf the server is running stop it.<br>\nType the following command :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run <span class=\"token function\">watch</span></code></pre>\n<p>If you follow the link, you should see a big <em>Hello from EJS</em>.<br>\nNow, try to change it to whatever you like and save.<br>\n<strong>Abracadabra</strong>, the browser reloads automatically and your changes are rendered to the browser instantly !</p>\n<h2 id=\"templating-with-ejs\">Templating with EJS <a class=\"direct-link\" href=\"#templating-with-ejs\">#</a></h2>\n<p>Templating is the mechanism of combining multiple parts into one.<br>\nIn the <code>views</code> folder, create a new folder called <code>partials</code>.<br>\nThis folder will contain the different parts of our app.<br>\nAs you know, the main parts of a webpage are :</p>\n<ol>\n<li>The head</li>\n<li>The body</li>\n<li>The footer</li>\n</ol>\n<p>Sometimes, there is also a sidebar, but it's generally a part of the body.</p>\n<p>Now, create 2 files inside the <code>partials</code> folder :<br>\n<code>head.ejs</code> and <code>footer.ejs</code>.</p>\n<details>\n<summary>/views/partials/head.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>EJS App Homepage<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<details>\n<summary>/views/partials/footer.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<p>Man, your code is a mess !<br>\nThere is no closing tags for <code>html</code> and <code>body</code> in <code>head.ejs</code>, moreover there is two lonely closing tags for <code>html</code> and <code>body</code> in <code>footer.ejs</code> !<br>\nI know, be patient, the magic is coming.<br>\nUpdate <code>index.ejs</code> with the following content :</p>\n<details>\n<summary>/views/index.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\">&lt;%- include('partials/head') %><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>I'm templating with EJS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br><br>&lt;%- include('partials/footer') %></code></pre>\n</details>\n<p>Save and go take a look at your browser 😁<br>\nThe code is self explanatory.<br>\nWe are using the <code>include()</code> function of EJS, to <strong>include</strong> a template into another <strong>at a specific location</strong>.<br>\nThis is a <strong>HUGE</strong> step in your dev journey, trust me !</p>\n<p>Ok, it's very nice, but what's the benefit since we could put it all together ?! 🤔<br>\nGood question !<br>\nThe first obvious benefit is to write a <strong>DRY</strong> (Don't Repeat Yourself) code !<br>\nIf you have ever built a static website before, you'll know that you would include the header, maybe a sidebar, and the footer for each and every page.<br>\nWell, this will not be the case anymore 😉<br>\nThe second and most amazing benefit is that you'll be able to write dynamic code by using JavaScript inside the template, you already did it with <code>include()</code>, but we'll see much more in the next section.</p>\n<h2 id=\"passing-data\">Passing data <a class=\"direct-link\" href=\"#passing-data\">#</a></h2>\n<p>This is, in my opinion, the most powerful, used and sensitive functionality of any template engine !<br>\nAlthough, we should be aware of how to use it and what we are passing from one file to another and especially from one end (the backend/server) to another (the frontend/browser) !</p>\n<h3 id=\"simple-routing\">Simple routing <a class=\"direct-link\" href=\"#simple-routing\">#</a></h3>\n<hr>\n<p>Let's begin by adding another page to our app.<br>\nCreate an <code>about.ejs</code> file in the <code>views</code> folder :</p>\n<details>\n<summary>/views/about.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\">&lt;%- include('partials/head') %><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>About me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><br>\tI'm LebCit, a Citizen of a small country called<br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.google.com/maps/@33.8735578,35.84741,9z<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lebanon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br>\tin the Middle East.<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br><br>&lt;%- include('partials/footer') %></code></pre>\n</details>\n<p>While your server is running up, try to go to the following route :</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">http://localhost:3000/about</code></pre>\n<p>You will see an <code>error</code> page with the following message :</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Cannot GET /about</code></pre>\n<p>This is because the <code>/about</code> route was not defined in the backend.<br>\nOpen <code>index.js</code> and add under the main route a new one :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Rendering about page on the /about route</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"about\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Go back to your browser and refresh it.<br>\nWhy the browser did not refresh itself ?<br>\nYour server did reload the app, but your browser is on an <code>error</code> page and <code>livereload</code> is now blocked, so even if you make changes they will not be reflected on the frontend.<br>\nWhen you refresh your browser, you'll see the content of <code>about.ejs</code>.</p>\n<p>Simple exercise : try to <code>render</code> <code>about.ejs</code> on <code>about-me</code> route.</p>\n<h3 id=\"data-object\">Data object <a class=\"direct-link\" href=\"#data-object\">#</a></h3>\n<hr>\n<p>If you look closer to the browser's title when you're viewing the content of <code>about.ejs</code>, you'll notice that it's the same one as <code>index.ejs</code> : <em>EJS App Homepage</em><br>\nThis is because they share the same <code>&lt;title&gt;</code> passed from <code>head.ejs</code> !<br>\nThe <code>&lt;title&gt;</code> is intended to announce the content of a page, so our pages cannot have the same <code>&lt;title&gt;</code> since they provide different content.<br>\nIn a real life situation, an app will have a different <code>&lt;title&gt;</code> for each page rendered on a route.</p>\n<p>To give our pages different titles, we'll use the <code>data object</code> of EJS on a rendered page.<br>\nFirst of all, make sure that you're viewing <code>about.ejs</code> in your browser.<br>\nModify the code that renders it in <code>index.js</code> to :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**<br> * Rendering about page on the /about route,<br> * while passing the document title as a data object.<br> */</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"about\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"About me | EJS App\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>In <code>head.ejs</code>, modify the <code>&lt;title&gt;</code> line to :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>&lt;%= docTitle %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>We are passing the <code>docTitle</code> value <code>About me | EJS App</code> from the backend to the frontend as a variable for a rendered page on a route into the <code>&lt;title&gt;</code> tag.<br>\nSave both files and go take a look at the browser's title 😁</p>\n<p>Now, go to the homepage at <code>http://localhost:3000/</code> !!!<br>\n<strong>Don't panic and read</strong> : this is a crucial rule if you ever want to be a developer when you see an error !<br>\nExpress is amazing, it's showing you the exact position where the error occurred, as well as the error itself : <code>docTitle is not defined</code>.<br>\nRemember that in <code>index.ejs</code> we are including <code>head.ejs</code>.<br>\nOf course ! In <code>head.ejs</code> there is a variable called <code>docTitle</code>, but we didn't pass it into the page <code>index.ejs</code> rendered on the main route !<br>\nTo do so, modify the main route in <code>index.js</code> to :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**<br> * Rendering index page on the main route,<br> * while passing the document title as a data object.<br> */</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage | EJS App\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Save the file and refresh your browser.<br>\n<em>You now know why you have to refresh your browser in this case !</em><br>\nSwitch between the homepage and the about page, they are displaying different titles ! Great job !</p>\n<h3 id=\"don't-repeat-yourself\">Don't Repeat Yourself <a class=\"direct-link\" href=\"#don't-repeat-yourself\">#</a></h3>\n<hr>\n<p>Suppose the <code>&lt;h1&gt;</code> tags in <code>index.ejs</code> and <code>about.ejs</code> represent titles of the content in each page, like an article title, just a little bit more descriptive than the document title.<br>\nLet's render them by using the data object :</p>\n<pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage | EJS App\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">pageTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Homepage of templating with EJS application\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"about\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">docTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"About me | EJS App\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">pageTitle</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A little bit about myself\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>And of course in each file the <code>&lt;h1&gt;</code> line becomes :<br>\n<code>&lt;h1&gt;&lt;%= pageTitle %&gt;&lt;/h1&gt;</code></p>\n<p>Suppose now that we have in our app just 50 articles, so we will have to write at the very beginning of each blog post the previous line of code.<br>\nWe would be misusing the template engine, since one of it's benefits is to write <strong>DRY</strong> code !</p>\n<p>To solve this :</p>\n<ol>\n<li>We can create a file for this line and include it at the desired place, just like <code>head.ejs</code> and <code>footer.ejs</code>.</li>\n<li>Or we can put the line just after the opening <code>&lt;body&gt;</code> tag at the end of <code>head.ejs</code>, since this <code>&lt;h1&gt;</code> (article title) appears directly after including <code>head.ejs</code> in both files.</li>\n</ol>\n<p>In this particular case, I prefer the second approach because it's just one line and not a partial or a huge block of code to be repeated.<br>\nThe file would look like :</p>\n<details>\n<summary>/views/partials/head.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>&lt;%= docTitle %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>&lt;%= pageTitle %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<p>Now you have a little idea about passing data from the backend to the frontend as well as one or two benefits a template engine can provide.</p>\n<h2 id=\"navigation\">Navigation <a class=\"direct-link\" href=\"#navigation\">#</a></h2>\n<p>A user can't guess the different routes of an application.<br>\nAn app should help the user to explore and use it's content by providing a way to navigate between it's different routes.<br>\nThis is where the navigation comes in.</p>\n<p>Create a <code>nav.ejs</code> in <code>partials.ejs</code> with the following content :</p>\n<details>\n<summary>/views/partials/nav.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>About me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<p>Pay attention, the <code>href</code> attributes are the same as the defined routes on the server !</p>\n<p>Now, let's include this part in <code>head.ejs</code> after the opening <code>&lt;body&gt;</code> tag and before the <code>&lt;h1&gt;</code> :</p>\n<details>\n<summary>/views/partials/head.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>&lt;%= docTitle %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>\t\t&lt;%- include('nav') %><br><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>&lt;%= pageTitle %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<p>Save both files and take a look at your browser.<br>\nYou should have a working navigation above the page title.</p>\n<h2 id=\"static-files\">Static files <a class=\"direct-link\" href=\"#static-files\">#</a></h2>\n<p>For now, we've been rendering <code>.ejs</code> files, including them one into another, and passing some basic data from the backend to the frontend using the <code>data object</code> of EJS.</p>\n<p>All of this is great but does not put you on the right track by itself to build an entire app.<br>\nYou'll quickly need to insert images, style the page(s) with <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\" target=\"_blank\" rel=\"external noopener noreferrer\">CSS</a>, add some interactivity with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\" rel=\"external noopener noreferrer\">JavaScript</a>...</p>\n<p>As I told you before, <em>Express is amazing</em> !<br>\nOne line inside the main server file is all we need to start serving static files.<br>\nUpdate <code>index.js</code> by putting the magical line just bellow the template engine :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span><br><br><span class=\"token comment\">// Set EJS as template engine</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Serve static files from a folder named public</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token operator\">...</span></code></pre>\n<p>Now, create a <code>public</code> folder at the root of your application.<br>\nRemember that this folder will hold files intended to be rendered directly in the browser/frontend.</p>\n<h3 id=\"images\">Images <a class=\"direct-link\" href=\"#images\">#</a></h3>\n<hr>\n<p>Let's begin by creating an <code>img</code> folder inside the <code>public</code> folder.<br>\nI'll be getting 2 images from <a href=\"https://www.pexels.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">Pexels</a> :</p>\n<ol>\n<li><a href=\"https://www.pexels.com/photo/computer-humor-the-codefather-funny-programming-meme-11035548/\" target=\"_blank\" rel=\"external noopener noreferrer\">The code father</a> 🤣</li>\n<li><a href=\"https://www.pexels.com/photo/aerial-view-of-city-buildings-4659944/\" target=\"_blank\" rel=\"external noopener noreferrer\">Byblos</a> one of the oldest cities in the world</li>\n</ol>\n<p>I've downloaded the smallest available size for each of them, and renamed them to <code>the-code-father.jpg</code> and <code>byblos.jpg</code>.<br>\nI'll be including <code>the-code-father.jpg</code> into <code>index.ejs</code> :</p>\n<pre class=\"language-html\"><code class=\"language-html\">&lt;%- include('partials/head') %><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/the-code-father.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br>&lt;%- include('partials/footer') %></code></pre>\n<p>Now it's your turn to insert <code>byblos.jpg</code> into <code>about.ejs</code>.</p>\n<h3 id=\"styles\">Styles <a class=\"direct-link\" href=\"#styles\">#</a></h3>\n<hr>\n<p>We can load styles into a page by :</p>\n<ol>\n<li>Having a stylesheet in our app and load it in the <code>&lt;head&gt;</code> of the document.</li>\n<li>Load a stylesheet in the <code>&lt;head&gt;</code> of the document from a CDN, Content Delivery Network, like <a href=\"https://www.jsdelivr.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">JSDELIVR</a>.</li>\n</ol>\n<p>The same logic applies for fonts.</p>\n<p>Create a <code>css</code> folder under the <code>public</code> one.<br>\nInside the <code>css</code> folder, create a file called <code>main.css</code>.<br>\nBasic definition : CSS is used to design the display of webpages.<br>\nLet's change the color of the page title to blue, by adding the following in <code>main.css</code>:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>If you go to your browser, nothing has changed and in fact it didn't reload for 2 reasons :</p>\n<ol>\n<li>We didn't add in the <code>&lt;head&gt;</code> of the document the link that connects this stylesheet, <code>main.css</code>, to the document itself.</li>\n<li>We didn't instruct Nodemon to reload the app nor the browser when <code>.css</code> files have been changed.</li>\n</ol>\n<p>Open <code>head.ejs</code> and add the link that injects <code>main.css</code> into the document :</p>\n<pre class=\"language-html\"><code class=\"language-html\">...<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>&lt;%= docTitle %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token comment\">&lt;!-- Load main.css stylesheet --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/main.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>...</code></pre>\n<p>If you take a look at your browser, the <code>&lt;h1&gt;</code> tags are now blue.<br>\nWait we didn't instruct Nodemon to watch <code>.css</code> files !<br>\nThat's right, but it's watching <code>.ejs</code> files, where a change have been made.</p>\n<p>Try to change <code>blue</code> to <code>red</code> in <code>main.css</code>.<br>\nLook at your browser, <code>&lt;h1&gt;</code> tags are still in blue.<br>\nOpen <code>package.json</code> and update the <code>watch</code> command to :<br>\n<code>&quot;watch&quot;: &quot;nodemon -e js,ejs,css&quot;</code><br>\nWe are now watching for changes in <code>.css</code> files also.<br>\nStop the server and restart it again, <code>&lt;h1&gt;</code> tags are now red.<br>\nChange red to any color you want and the changes will now by reflect on the frontend.</p>\n<p>This is really nice, but for an app you'll need some ready to use styles to save time and fasten your development.<br>\nThis is where CSS frameworks come in.<br>\nThere are a lot of CSS frameworks out there, I'll be using <a href=\"https://purecss.io/\" target=\"_blank\" rel=\"external noopener noreferrer\">Pure.css</a> :</p>\n<blockquote>\n<p>A set of small, responsive CSS modules that you can use in every web project.</p>\n</blockquote>\n<p>To load <code>Pure.css</code> I'll be using JSDELIVR :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Load main.css stylesheet --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/main.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token comment\">&lt;!-- Load Pure.css stylesheet --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/purecss@2.1.0/build/pure-min.min.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>If you look at your browser, you'll notice some minor changes but nothing much.<br>\nTo see it in action, modify <code>nav.ejs</code> :</p>\n<details>\n<summary>/views/partials/nav.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pure-menu pure-menu-horizontal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pure-menu-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pure-menu-item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pure-menu-item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>About me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<p>Save and take a look at your browser.<br>\nCongrats, you've just used pre-made styles from a loaded framework.<br>\nRead the framework's documentation and play with it's classes to style your page(s).<br>\nYou can also take a look at the <a href=\"https://purecss.io/layouts/\" target=\"_blank\" rel=\"external noopener noreferrer\">Layouts</a> that <code>Pure.css</code> provides to have a better understanding of how you can use it.</p>\n<h3 id=\"javascript\">JavaScript <a class=\"direct-link\" href=\"#javascript\">#</a></h3>\n<hr>\n<p>There is no simple definition for <code>JavaScript</code>...<br>\nLook at <a href=\"https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites\" target=\"_blank\" rel=\"external noopener noreferrer\">the frontend technology used in most popular websites</a>.<br>\nCheck also Stack Overflow's 2021 Developer Survey regarding <a href=\"https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-programming-scripting-and-markup-languages\" target=\"_blank\" rel=\"external noopener noreferrer\">Programming, scripting, and markup languages</a>.<br>\nIn today's world, web development is mostly about <code>JavaScript</code>.<br>\nYou have been using it all along from the beginning of this tutorial !</p>\n<p>In <code>index.ejs</code> add a <code>&lt;button&gt;</code> inside a <code>&lt;div&gt;</code> under the <code>&lt;img /&gt;</code> :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pure-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>A Button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Create a <code>scripts</code> folder in <code>public</code>.<br>\nInside <code>scripts</code>, create a file named <code>main.js</code> and add the following content inside it :</p>\n<details>\n<summary>/public/scripts/main.js</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tbtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from JavaScript !\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n</details>\n<p>Just like a stylesheet, a script file should be loaded into the document to work.<br>\nIt's safer, and best practice, to load scripts at the very end of a document.<br>\nModify <code>footer.ejs</code> to look like :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scripts/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>If you visit the homepage of the app and click on the button, you'll see a popup with the message defined in <code>main.js</code>.<br>\n<code>JavaScript</code> can do much more than simple interactions, you can control and modify everything in a document...</p>\n<p>There is a countless number of JavaScript frameworks out there to make your development easier and faster or make you hate it, so be very careful of what you're using and always ask yourself if you really need it or not !</p>\n<p>A personal note about JavaScript : <strong><em>I love vanilla JS</em></strong><br>\nMeaning that I'm not a fan of frontend JS frameworks, but that's just me...</p>\n<h3 id=\"paths\">Paths <a class=\"direct-link\" href=\"#paths\">#</a></h3>\n<hr>\n<p><strong>Important subsection ahead !</strong></p>\n<p>You may have noticed or not, but you where using <em>relative paths</em> to <code>include()</code> templates in each other and load assets into the document.</p>\n<p>Consider the tree of our app :</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Application's root without node_modules folder<br>├── index.js<br>├── package-lock.json<br>├── package.json<br>├── public<br>│  ├── css<br>│  │  └── main.css<br>│  ├── img<br>│  │  ├── byblos.jpg<br>│  │  └── the-code-father.jpg<br>│  └── scripts<br>│    └── main.js<br>└── views<br>  ├── about.ejs<br>  ├── index.ejs<br>  └── partials<br>    ├── footer.ejs<br>    ├── head.ejs<br>    └── nav.ejs</code></pre>\n<p>The root is the <code>ejs</code> folder.<br>\nIf 2 or more files lives in the same folder, we say that they are <code>at the same level</code>.</p>\n<p>Sometimes, we need to call a file into another, this is where we should be careful about the process.<br>\nAlways read the documentation of the <code>tools</code> you are using.</p>\n<p>If we where developing without backend technologies, and wanted to load <code>main.css</code> in <code>index.ejs</code>, we would write :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../../public/css/main.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Since we where using Express and EJS as a defined template engine, we where able to use <em>relative paths</em> to call our files.</p>\n<p>⚠️ Never begin with the <code>views</code> folder when templating, he's already detected by Express !!!</p>\n<p>When using <code>include()</code> :</p>\n<ol>\n<li>If two files are at the same level and we wanted to <code>include()</code> one of them into another, we just type the file name, no need for the extension, like we did with :<br>\n<code>&lt;%- include('nav') %&gt;</code></li>\n<li>Otherwise, we navigate to the desired file by typing the folder(s) name(s) where the file is, then the file name without it's extension, like we did for :<br>\n<code>&lt;%- include('partials/head') %&gt;</code> and<br>\n<code>&lt;%- include('partials/footer') %&gt;</code></li>\n</ol>\n<p>⚠️ Never begin with the <code>public</code> folder when using it in a template, he's already detected by Express !!!</p>\n<p>When calling files from <code>public</code> :</p>\n<ol>\n<li>If the file is directly inside the <code>public</code> folder, we just call it <strong>with it's extension</strong>.<br>\nLet's say that <code>the-code-father.jpg</code> was directly inside the public folder and we wanted to call it inside <code>index.ejs</code>, we would write :<br>\n<code>&lt;img src=&quot;the-code-father.jpg&quot; /&gt;</code></li>\n<li>Otherwise, we navigate to the desired file by typing the folder(s) name(s) where the file is, then the file name <strong>with it's extension</strong>, like we did for :<br>\n<code>&lt;img src=&quot;img/the-code-father.jpg&quot; /&gt;</code></li>\n</ol>\n<h2 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h2>\n<p>I hope that this tutorial will help a lot of new developers to start using EJS as a template engine in Node.js and understand how things are related together.</p>\n<p>Next one will be about improving this app 😉</p>\n<p><em>This tutorial was specially made for my beloved son 💘</em></p>\n",
      "date_published": "2022-07-09T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/csp-nonce-with-nodejs-and-ejs/",
      "url": "https://lebcit.github.io/posts/csp-nonce-with-nodejs-and-ejs/",
      "title": "CSP nonce with Node.js and EJS",
      "content_html": "<p><em>This post is about using a nonce for <a href=\"https://content-security-policy.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">CSP</a> with Node.js and EJS.</em></p>\n<h2 id=\"intro\">Intro <a class=\"direct-link\" href=\"#intro\">#</a></h2>\n<p>In this post, I will not dive into CSP's details.<br>\nThe link in the description, above, is enough for a simple introduction to the subject, but if you wish to go deeper I'll suggest to take a look at :</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\" target=\"_blank\" rel=\"external noopener noreferrer\">Content Security Policy (CSP) on MDN</a></li>\n<li><a href=\"https://www.w3.org/TR/CSP3/\" target=\"_blank\" rel=\"external noopener noreferrer\">Content Security Policy Level 3 on W3C</a></li>\n</ul>\n<h2 id=\"csp%3A-script-src\">CSP: script-src <a class=\"direct-link\" href=\"#csp%3A-script-src\">#</a></h2>\n<p>CSP is manly a way to declare allowed resources to load on a domain or a particular route, to reduce the risk of <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting\" target=\"_blank\" rel=\"external noopener noreferrer\">Cross-site scripting (XSS)</a> attacks.<br>\nWhen a script loads into a webpage, the browser blocks the script if it's not defined in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\" target=\"_blank\" rel=\"external noopener noreferrer\">script-src</a> directive of the CSP as an allowed resource.<br>\nWhen used, CSP will also block inline script tags like :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>\t<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>as well as inline event handlers like :</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"csp%3A-style-src\">CSP: style-src <a class=\"direct-link\" href=\"#csp%3A-style-src\">#</a></h2>\n<p>Like <code>script-src</code>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src\" target=\"_blank\" rel=\"external noopener noreferrer\">style-src</a> is used to declare the valid sources of styles.</p>\n<p>CSP <code>style-src</code> directive will block inline style tags and inline style attributes.<br>\nSo, the following will not load :</p>\n<pre class=\"language-html\"><code class=\"language-html\">// Inline style tag gets ignored<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"><br>\t<span class=\"token selector\">#my-div</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><br><br>// Inline style attribute gets also ignored<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-div<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>red</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>I will not have a red background !<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Note that <code>style-src</code> directive will also block styles applied in JS via <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute\" target=\"_blank\" rel=\"external noopener noreferrer\">setAttribute</a>.<br>\nThe following example will not be rendered :</p>\n<pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"style\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"background-color:red;\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>However, styles set on element's style property will work.<br>\nThe following example will be rendered :</p>\n<pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span></code></pre>\n<h2 id=\"unsafe-expressions\">Unsafe expressions <a class=\"direct-link\" href=\"#unsafe-expressions\">#</a></h2>\n<p>There are <strong>unsafe</strong> ways to whitelist inline script tags, inline event handlers, inline style tags and inline styles, but I'm not going to talk about them because they are <strong>unsafe</strong> and break the whole point of a CSP !</p>\n<h2 id=\"setting-csp-in-node.js\">Setting CSP in Node.js <a class=\"direct-link\" href=\"#setting-csp-in-node.js\">#</a></h2>\n<p>To define allowed resources in a CSP via Node.js, we have to declare them as a response header :</p>\n<ol>\n<li>The user makes a request</li>\n<li>The server sends a response</li>\n<li>The browser loads the page along with allowed resources</li>\n</ol>\n<p>It's in the response header that a CSP lives and where the browser will look to know what he can render.</p>\n<p>Using <a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">Express</a>, we can simply do the following :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Set CSP as a middleware function</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><br>\t\t<span class=\"token string\">\"Content-Security-Policy\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"default-src 'self'; script-src 'self'; style-src 'self'; font-src 'self'; img-src 'self'; frame-src 'self'\"</span><br>\t<span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App 🚀 @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>As you can see, we have defined the most used directives to <code>'self'</code>, meaning that we are only allowing resources from the current host (<em>including URL scheme and port number</em>) only.<br>\nIf you run this app (<code>node index</code>), and follow the link, you'll get a nice <strong>Hello World!</strong><br>\nIf you open the Console (F12), you'll see nothing since we didn't do much for now.</p>\n<h2 id=\"ejs\">EJS <a class=\"direct-link\" href=\"#ejs\">#</a></h2>\n<p>To render an <code>HTML</code> page, load external scripts and styles to test our CSP, I'll be using <a href=\"https://ejs.co/\" target=\"_blank\" rel=\"external noopener noreferrer\">EJS</a>.<br>\nFell free to use any other template engine that suits your needs.<br>\nI highly recommend EJS for the following reason :</p>\n<blockquote>\n<p>EJS is a simple templating language that lets you generate HTML markup with plain JavaScript.</p>\n</blockquote>\n<p>After installing EJS (<code>npm i ejs</code>), we'll have to create a <code>views</code> folder, at the root of the app, to store the <code>.ejs</code> files.<br>\nEJS will look inside this folder to <code>render</code> your page(s) the way you instruct him to do.<br>\nIn this folder, create a file called <code>index.ejs</code> with the following content :</p>\n<details>\n<summary>/views/index.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello from EJS !<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<p>Yes, an <code>.ejs</code> file is an <code>HTML</code> file in which we can use plain <code>JavaScript</code>, we'll see that in a moment.</p>\n<p>Update our main server file to look like this :</p>\n<details>\n<summary>/index.js</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Set CSP as a middleware function</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><br>\t\t<span class=\"token string\">\"Content-Security-Policy\"</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"default-src 'self'; script-src 'self'; style-src 'self'; font-src 'self'; img-src 'self'; frame-src 'self'\"</span><br>\t<span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Set EJS as a template engine</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Use EJS to render our page(s)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// renders index.ejs</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App 🚀 @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n</details>\n<h2 id=\"external-resources\">External resources <a class=\"direct-link\" href=\"#external-resources\">#</a></h2>\n<p>Now, to test our CSP, we just have to load some external resources.<br>\nLet's bring on <a href=\"https://purecss.io/\" target=\"_blank\" rel=\"external noopener noreferrer\">Pure.css</a> and <a href=\"https://lodash.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">Lodash</a>.<br>\nUpdate <code>index.ejs</code> to look like this :</p>\n<details>\n<summary>/views/index.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token comment\">&lt;!-- Pure.css --></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><br>\t\t\t<span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><br>\t\t\t<span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/purecss@2.1.0/build/pure-min.css<span class=\"token punctuation\">\"</span></span><br>\t\t\t<span class=\"token attr-name\">integrity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sha384-yHIFVG6ClnONEA5yB5DJXfW2/KC173DIQrYoZMEtBvGzmf0PKiGyNEqe9N6BNDBH<span class=\"token punctuation\">\"</span></span><br>\t\t\t<span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span><br>\t\t<span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello from EJS !<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br><br>\t\t<span class=\"token comment\">&lt;!-- Lodash --></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<p>Save <code>index.ejs</code>, reload the app in the browser, and open the Console :</p>\n<details>\n<summary>Firefox Console</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><br>⚠️ Loading failed <span class=\"token keyword\">for</span> the <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span> <span class=\"token keyword\">with</span> source “https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token punctuation\">.</span>jsdelivr<span class=\"token punctuation\">.</span>net<span class=\"token operator\">/</span>npm<span class=\"token operator\">/</span>lodash@<span class=\"token number\">4.17</span><span class=\"token number\">.21</span><span class=\"token operator\">/</span>lodash<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">.</span>js”<span class=\"token punctuation\">.</span><br>🛑 Content Security Policy<span class=\"token operator\">:</span> The page’s settings blocked the loading <span class=\"token keyword\">of</span> a resource at https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>unpkg<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>purecss@<span class=\"token number\">2.1</span><span class=\"token number\">.0</span><span class=\"token operator\">/</span>build<span class=\"token operator\">/</span>pure<span class=\"token operator\">-</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">css</span> <span class=\"token punctuation\">(</span>“style<span class=\"token operator\">-</span>src”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><br>🛑 Content Security Policy<span class=\"token operator\">:</span> The page’s settings blocked the loading <span class=\"token keyword\">of</span> a resource at https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token punctuation\">.</span>jsdelivr<span class=\"token punctuation\">.</span>net<span class=\"token operator\">/</span>npm<span class=\"token operator\">/</span>lodash@<span class=\"token number\">4.17</span><span class=\"token number\">.21</span><span class=\"token operator\">/</span>lodash<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>“script<span class=\"token operator\">-</span>src”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre>\n</details>\n<details>\n<summary>Chrome Console</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><br>🛑 Refused to load the stylesheet <span class=\"token string\">'https://unpkg.com/purecss@2.1.0/build/pure-min.css'</span> because it violates the following Content Security Policy directive<span class=\"token operator\">:</span> <span class=\"token string\">\"style-src 'self'\"</span><span class=\"token punctuation\">.</span> Note that <span class=\"token string\">'style-src-elem'</span> was not explicitly set<span class=\"token punctuation\">,</span> so <span class=\"token string\">'style-src'</span> is used <span class=\"token keyword\">as</span> a fallback<span class=\"token punctuation\">.</span><br>🛑 Refused to load the script <span class=\"token string\">'https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js'</span> because it violates the following Content Security Policy directive<span class=\"token operator\">:</span> <span class=\"token string\">\"script-src 'self'\"</span><span class=\"token punctuation\">.</span> Note that <span class=\"token string\">'script-src-elem'</span> was not explicitly set<span class=\"token punctuation\">,</span> so <span class=\"token string\">'script-src'</span> is used <span class=\"token keyword\">as</span> a fallback<span class=\"token punctuation\">.</span></code></pre>\n</details>\n<p>Now, you can see that our CSP have blocked Pure.css and Lodash, so everything is working as expected since they are not defined in our CSP as allowed resources to load in the browser.</p>\n<h2 id=\"helmet\">Helmet <a class=\"direct-link\" href=\"#helmet\">#</a></h2>\n<p>Imagine, not necessarily because it happens when you are creating an app, having a reasonable amount of scripts and styles to whitelist.<br>\nThe CSP middleware function in the main server file will grow and become sort of ugly and hard to maintain.<br>\nAn <strong>excellent</strong> alternative would be to use <a href=\"https://helmetjs.github.io/\" target=\"_blank\" rel=\"external noopener noreferrer\">Helmet</a> <em>if you're using Express</em>.</p>\n<blockquote>\n<p>Helmet helps you secure your Express apps by setting various HTTP headers.</p>\n</blockquote>\n<p>Let's add Helmet to our Express app with the following command <code>npm i helmet</code>.<br>\nTo easily maintain our CSP, let's move it inside a <code>middleware</code> folder, a the root of the app, in a file called <code>helmet.js</code>.<br>\nThe app structure looks like the following tree :</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Application's root without node_modules folder<br>├── index.js<br>├── middleware<br>│  └── helmet.js<br>├── package-lock.json<br>├── package.json<br>└── views<br>  └── index.ejs</code></pre>\n<p>Let's add a CSP with Helmet :</p>\n<details>\n<summary>/middleware/helmet.js</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> helmet <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helmet\"</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">helmet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n</details>\n<p>and update <code>index.js</code> to call this middleware :</p>\n<details>\n<summary>/index.js</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Set CSP using Helmet</span><br><span class=\"token keyword\">const</span> helmet <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middleware/helmet\"</span><span class=\"token punctuation\">)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>helmet<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Set EJS as a template engine</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Use EJS to render our page(s)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// renders index.ejs</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App 🚀 @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n</details>\n<p>Save both files, refresh your browser, and open the Console :</p>\n<details>\n<summary>Firefox Console</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><br>⚠️ Content Security Policy<span class=\"token operator\">:</span> Couldn’t process unknown directive ‘script<span class=\"token operator\">-</span>src<span class=\"token operator\">-</span>attr’<br>⚠️ Loading failed <span class=\"token keyword\">for</span> the <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span> <span class=\"token keyword\">with</span> source “https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token punctuation\">.</span>jsdelivr<span class=\"token punctuation\">.</span>net<span class=\"token operator\">/</span>npm<span class=\"token operator\">/</span>lodash@<span class=\"token number\">4.17</span><span class=\"token number\">.21</span><span class=\"token operator\">/</span>lodash<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">.</span>js”<span class=\"token punctuation\">.</span><br>🛑 Content Security Policy<span class=\"token operator\">:</span> The page’s settings blocked the loading <span class=\"token keyword\">of</span> a resource at https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token punctuation\">.</span>jsdelivr<span class=\"token punctuation\">.</span>net<span class=\"token operator\">/</span>npm<span class=\"token operator\">/</span>lodash@<span class=\"token number\">4.17</span><span class=\"token number\">.21</span><span class=\"token operator\">/</span>lodash<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>“script<span class=\"token operator\">-</span>src”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre>\n</details>\n<details>\n<summary>Chrome Console</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><br>🛑 Refused to load the script <span class=\"token string\">'https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js'</span> because it violates the following Content Security Policy directive<span class=\"token operator\">:</span> <span class=\"token string\">\"script-src 'self'\"</span><span class=\"token punctuation\">.</span> Note that <span class=\"token string\">'script-src-elem'</span> was not explicitly set<span class=\"token punctuation\">,</span> so <span class=\"token string\">'script-src'</span> is used <span class=\"token keyword\">as</span> a fallback<span class=\"token punctuation\">.</span></code></pre>\n</details>\n<p>As you can see, now only Lodash is blocked 🤔<br>\nAnd Firefox is throwing a warning for an unknown directive.</p>\n<p>Under the hood, a lot is happening, and it will take a series of posts to explain in detail each header and how to configure them...</p>\n<p>But just that you know, Helmet sets a bunch of default values to protect your endpoint.<br>\nOne of them is :<br>\n<code>style-src 'self' https: 'unsafe-inline';</code><br>\nThis is the directive allowing Pure.css.<br>\nIt means : <em>&quot;allow any styles' source from my domain, or styles' source served over https, or inline styles&quot;</em>.<br>\nBut as I've said before, any <code>'unsafe-...'</code> expression is <strong>unsafe</strong> and should not be used unless their is really no other option...<br>\nI've linked at the beginning of this section to Helmet's documentation.<br>\nWe'll be addressing all issues, properly, in the next and last section.</p>\n<h2 id=\"hash-and-nonce\">Hash and Nonce <a class=\"direct-link\" href=\"#hash-and-nonce\">#</a></h2>\n<p>To allow the execution of inline scripts, inline event handlers and inline styles, a hash or a nonce that matches the inline code can be specified, to avoid using the <code>'unsafe-inline'</code>expression.</p>\n<h3 id=\"hash\">Hash <a class=\"direct-link\" href=\"#hash\">#</a></h3>\n<hr>\n<p>A <a href=\"https://content-security-policy.com/hash/\" target=\"_blank\" rel=\"external noopener noreferrer\">hash</a> is a string composed of two parts connected by a dash with each other :</p>\n<ol>\n<li>The cryptographic algorithm used to create the hash value.</li>\n<li>The base64-encoded hash of a script or style.</li>\n</ol>\n<p>CSP supports sha256, sha384 and sha512.</p>\n<p>But when you hash a script or a style, the generated string matches only the hashed code, meaning that if the code changes in any way (dot, space, new line, comment, added/removed/formatted code), the hash will no longer match the code who gets blocked !<br>\nIn this case, you'll have to regenerate a hash that matches the modified code...<br>\nIt's a time consuming process if your code changes a lot, but commonly used and <strong>recommended</strong> over a nonce especially for static scripts.</p>\n<p>From MDN :</p>\n<blockquote>\n<p>Note: Only use nonce for cases where you have no way around using unsafe inline script or style contents. If you don't need nonce, don't use it. If your script is static, you could also use a CSP hash instead. (See usage notes on <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src#unsafe_inline_script\" target=\"_blank\" rel=\"external noopener noreferrer\">unsafe inline script</a>.) Always try to take full advantage of CSP protections and avoid nonces or unsafe inline scripts whenever possible.</p>\n</blockquote>\n<h3 id=\"nonce\">Nonce <a class=\"direct-link\" href=\"#nonce\">#</a></h3>\n<hr>\n<p>On the other hand, a <a href=\"https://content-security-policy.com/nonce/\" target=\"_blank\" rel=\"external noopener noreferrer\">nonce</a> is a cryptographic <strong>number used once</strong>, generated using a cryptographically secure random number generator, that must be unique for each HTTP response as a random base64-encoded string of at least 128 bits of data.</p>\n<p>So, in the case of server-side rendering, a nonce is more often used, and can be used for inline and external scripts and styles.<br>\nNote that a <code>nonce-value</code> will not allow stylesheet requests originating from the <code>@import</code> rule !</p>\n<p>To use a nonce, for a script, we have to declare at the top of our <code>script-src</code> directive the <code>'strict-dynamic'</code> expression to allow the execution of that script as well as any script loaded by this root script.<br>\nWhen using the <code>'strict-dynamic'</code> expression, other expressions such as <code>'self'</code> or <code>'unsafe-inline'</code> will be ignored.</p>\n<p>I like to keep my code clean and maintainable because at one point or another I'll want to update it, this is why I split (as most developers) my code into pieces where each one is easily trackable in a near or far future.<br>\nLet's add a file called <code>nonces.js</code> in the <code>middleware</code> folder, the app structure now looks like the following tree :</p>\n<pre class=\"language-text\"><code class=\"language-text\">Application's root without node_modules folder<br>├── index.js<br>├── middleware<br>│  ├── helmet.js<br>│  └── nonces.js<br>├── package-lock.json<br>├── package.json<br>└── views<br>  └── index.ejs</code></pre>\n<p>Open <code>nonces.js</code> and add the following content :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Determining if crypto support is unavailable</span><br><span class=\"token keyword\">let</span> crypto<br><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>\tcrypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"crypto\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"crypto support is disabled!\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Generating a nonce for Lodash with crypto</span><br><span class=\"token keyword\">let</span> lodashNonce <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">randomBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hex\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Maybe you'll have some other later</span><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> lodashNonce <span class=\"token punctuation\">}</span></code></pre>\n<p>The <a href=\"https://nodejs.org/docs/latest-v16.x/api/crypto.html\" target=\"_blank\" rel=\"external noopener noreferrer\">crypto</a> module is a built-in functionality of Node.js but it's better to check if it's included or not, in our installation, just like the docs.</p>\n<p>Now, update <code>helmet.js</code> :</p>\n<details>\n<summary>/middleware/helmet.js</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> helmet <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helmet\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> lodashNonce <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./nonces\"</span><span class=\"token punctuation\">)</span><br><br>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">helmet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>\t<span class=\"token literal-property property\">contentSecurityPolicy</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token literal-property property\">directives</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token literal-property property\">scriptSrc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>\t\t\t\t<span class=\"token string\">\"'strict-dynamic'\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// For nonces to work</span><br>\t\t\t\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'nonce-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lodashNonce<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token literal-property property\">scriptSrcAttr</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Remove Firefox warning</span><br>\t\t\t<span class=\"token literal-property property\">styleSrc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"'self'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https:\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Remove 'unsafe-inline'</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n</details>\n<p>This way is much elegant, clean and maintainable than a middleware function in the main server file.</p>\n<p>Finally, we'll have to pass the generated nonce from the route were we need to load the script as a variable and grab this variable in the route's template where the script tag is.<br>\nI'll be commenting the code to explain the steps :</p>\n<details>\n<summary>/index.js</summary>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Set CSP with helmet</span><br><span class=\"token keyword\">const</span> helmet <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middleware/helmet\"</span><span class=\"token punctuation\">)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>helmet<span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">/**<br> * 1- We require lodashNonce<br> * 2- This is our route \"/\"<br> * 3- We are rendering \"index.ejs\"<br> * 4- We pass lodashNonce into the route,<br> * with the second argument of res.render<br> * which is an object, as a variable<br> * 5- This object is now accessible<br> * in the EJS template file<br> * 6- We'll get lodashNonce value<br> * by the ourGenerateNonce key<br> * in the EJS template file<br> * 7- That's it here, open index.ejs below<br> */</span><br><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> lodashNonce <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./middleware/nonces\"</span><span class=\"token punctuation\">)</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ourGenerateNonce</span><span class=\"token operator\">:</span> lodashNonce <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">App 🚀 @ http://localhost:3000</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n</details>\n<details>\n<summary>/views/index.ejs</summary>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token comment\">&lt;!-- Pure.css --></span><br>\t\t<span class=\"token comment\">&lt;!-- <br>\t\t\tUse JSDELIVR to load Pure.css instead of UNPKG<br>\t\t--></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/purecss@2.1.0/build/pure-min.min.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello from EJS !<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br><br>\t\t<span class=\"token comment\">&lt;!-- Lodash --></span><br>\t\t<span class=\"token comment\">&lt;!-- <br>\t\t\tSet the nonce attribute to ourGenerateNonce<br>\t\t\tusing EJS output value tag &lt;%= %><br>\t\t--></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><br>\t\t\t<span class=\"token attr-name\">nonce</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;%= ourGenerateNonce %><span class=\"token punctuation\">\"</span></span><br>\t\t\t<span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js<span class=\"token punctuation\">\"</span></span><br>\t\t<span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<p>Save those files,reload your browser and open the browser's console 🥳🎉🎊<br>\nCongrats, you've just loaded an external script using a nonce !</p>\n<p>Hope that this post was helpful.<br>\nNext one will be about EJS.</p>\n",
      "date_published": "2022-07-03T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/to-node-or-not-deta-is-the-answer/",
      "url": "https://lebcit.github.io/posts/to-node-or-not-deta-is-the-answer/",
      "title": "To Node or not ? Deta is the answer !",
      "content_html": "<p><em>This post is about exploring <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external noopener noreferrer\">Node.js</a> with <a href=\"https://www.deta.sh/\" target=\"_blank\" rel=\"external noopener noreferrer\">Deta Cloud</a>.</em></p>\n<h2 id=\"motivation\">Motivation <a class=\"direct-link\" href=\"#motivation\">#</a></h2>\n<p>After <a href=\"/posts/back-to-the-roots-with-a-static-site/\">getting back to the roots with a static site</a> and working with Node.js on real projects in the static world, I wanted to try it on a server to dive a little bit deeper and understand how it works by itself.</p>\n<h2 id=\"quest-%26-luck\">Quest &amp; luck <a class=\"direct-link\" href=\"#quest-%26-luck\">#</a></h2>\n<p>So, I started to search for a free Node.js hosting and it took me a while, with a lot of chance, to land on an awesome project called Deta.<br>\nThe great developers behind Deta define it as <strong>The Cloud for Doers &amp; Dreamers</strong> and describe it as <em>the universe's most developer friendly cloud platform</em>.<br>\nHonestly speaking, I can only confirm those declarations because I've tried some other platforms !</p>\n<p>Deta gives you :</p>\n<ul>\n<li>blazing fast micro servers, called <strong>Micros</strong>, to get your apps to live.</li>\n<li>fast, scalable and secure NoSQL database with unlimited storage, called <strong>Base</strong>.</li>\n<li>safely encrypted 10GB cloud storage, called <strong>Drive</strong>.</li>\n</ul>\n<p>All of those services are completely and 100% <strong>FREE</strong> with no catch at all !</p>\n<h2 id=\"simplicity\">Simplicity <a class=\"direct-link\" href=\"#simplicity\">#</a></h2>\n<p>The amazing part of Deta is it's simplicity.!<br>\nOne statement on Deta's homepage tells everything about it :</p>\n<blockquote>\n<p>You don't need a degree to use Deta</p>\n</blockquote>\n<p>The <a href=\"https://docs.deta.sh/docs/home\" target=\"_blank\" rel=\"external noopener noreferrer\">Docs</a> are straightforward with simple examples to get you right away on the track.<br>\nThe <a href=\"https://docs.deta.sh/docs/cli/commands\" target=\"_blank\" rel=\"external noopener noreferrer\">CLI</a> to manage <strong>Micros</strong> is crystal clear and dead simple.</p>\n<p>Since my <a href=\"https://docs.deta.sh/docs/micros/getting_started#creating-your-first-micro\" target=\"_blank\" rel=\"external noopener noreferrer\">first_micro</a>, Deta gave me, and give me everyday, the opportunity to learn, apply, test, deploy and evolve as a developer in many ways.</p>\n<p>I was finally able to understand how much power and flexibility a Node.js server can give if configured correctly.<br>\nI've also been able to work for real with <a href=\"https://graphql.org/\" target=\"_blank\" rel=\"external noopener noreferrer\">GraphQL</a> without DB adapters/connectors.<br>\nAnd so on...</p>\n<h2 id=\"final-word\">Final word <a class=\"direct-link\" href=\"#final-word\">#</a></h2>\n<p>Deta is, for me, the best Node.js platform you could ever dream of !<br>\nDeta is made by great developers with developers concerns in mind !<br>\nDeta's spirit reflects the generosity and kindness of it's team who's always there to help !</p>\n<p>Thank you Deta 💘</p>\n",
      "date_published": "2022-06-26T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/automatically-close-other-details/",
      "url": "https://lebcit.github.io/posts/automatically-close-other-details/",
      "title": "Automatically close other &lt;details&gt;",
      "content_html": "<p><em>This post is about closing all <code>&lt;details&gt;</code> tag when another one is open.</em></p>\n<p>I was writing a post about MidDay, <a href=\"/posts/midday-wordpress-theme/\">my new WordPress Theme</a>, and wanted to include a simple FAQ section but with a little of style, this is when I remembered the <code>&lt;details&gt;</code> tag.</p>\n<p>It's an awesome <strong>accessible</strong> element, similar to an accordion.</p>\n<details>\n<summary>How to create one ?</summary>\nYou have just opened one 😁<br>\nJust follow the pattern in the code.\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span><span class=\"token punctuation\">></span></span>Summary/Question about the content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">></span></span><br>\tAnd here is the content, it could be anything, even code like this example 😉<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n<p>But when we use more than one <code>&lt;details&gt;</code> tag on the same page, especially when they are one after another, we can see that if one is opened and we open another one, the first stays opened.<br>\nImagine having 5 or more after each other, with a reasonable amount of content, they will take a lot of space.<br>\nAs an example, you can take a look at this informative pen : <a href=\"https://codepen.io/jdsteinbach/pen/GYmQjo\" target=\"_blank\" rel=\"external noopener noreferrer\">Teaching the Details Element with ... Details Elements!</a></p>\n<details>\n<summary>So how to close the opened one ?</summary>\nEasy !<br>\nJust include the following code in your scripts file or in a <code>script</code> tag at the bottom of your page before the closing <code>body</code> tag.\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** Close others &lt;details> tag */</span><br><span class=\"token keyword\">const</span> allDetails <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"details\"</span><span class=\"token punctuation\">)</span><br><br>allDetails<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">details</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\tdetails<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tallDetails<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">details</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>details <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">.</span>target <span class=\"token operator\">&amp;&amp;</span> details<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\tdetails<span class=\"token punctuation\">.</span>open <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n</details>\n<p>Let's break it down !</p>\n<p>First we select all the <code>&lt;details&gt;</code> tag :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> allDetails <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"details\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>And we iterate over them :</p>\n<pre class=\"language-js\"><code class=\"language-js\">allDetails<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">details</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre>\n<p>Then we listen to the <code>toggle</code> event used by the <code>&lt;details&gt;</code> element whenever its state changes between open and closed :</p>\n<pre class=\"language-js\"><code class=\"language-js\">details<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre>\n<p>Now, we wait for any <code>&lt;details&gt;</code> to be <code>open</code> :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre>\n<p>We iterate once again over all the <code>&lt;details&gt;</code> and check if anyone of them was not the <code>target</code> of the <code>toggle</code> event and was <code>open</code>, if so, we just close it by removing it's open state :</p>\n<pre class=\"language-js\"><code class=\"language-js\">allDetails<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">details</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>details <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">.</span>target <span class=\"token operator\">&amp;&amp;</span> details<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tdetails<span class=\"token punctuation\">.</span>open <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>In other words, if a <code>&lt;details&gt;</code> element was opened, it have the <code>open</code> attribute. Now if another <code>&lt;details&gt;</code> element is open, we remove the <code>open</code> attribute from the previous, leaving only the actual targeted one opened.</p>\n<p>Hope that this was useful, and that you'll start using <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details\" target=\"_blank\" rel=\"external noopener noreferrer\">The Details disclosure element</a>.</p>\n",
      "date_published": "2021-02-10T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/midday-wordpress-theme/",
      "url": "https://lebcit.github.io/posts/midday-wordpress-theme/",
      "title": "MidDay WordPress theme",
      "content_html": "<p>Hello everyone,</p>\n<p><em>This post is about the development and usage of MidDay WordPress theme.</em></p>\n<h2 id=\"credits\">Credits <a class=\"direct-link\" href=\"#credits\">#</a></h2>\n<p>This WordPress theme wouldn’t have seen the light without :</p>\n<ul>\n<li><a href=\"https://www.w3schools.com/w3css/tryw3css_templates_bw_portfolio.htm\" target=\"_blank\" rel=\"external noopener noreferrer\">Black &amp; White Portfolio Template</a> by <a href=\"https://www.w3schools.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">w3schools.com</a></li>\n<li><a href=\"https://purecss.io/layouts/blog/\" target=\"_blank\" rel=\"external noopener noreferrer\">Blog</a> template by <a href=\"https://purecss.io/\" target=\"_blank\" rel=\"external noopener noreferrer\">Pure.css</a></li>\n<li><a href=\"https://aristath.github.io/\" target=\"_blank\" rel=\"external noopener noreferrer\">Ari Stathopoulos</a> blog</li>\n<li><a href=\"https://underscores.me/\" target=\"_blank\" rel=\"external noopener noreferrer\">Underscores</a> starter theme for WordPress</li>\n<li><a href=\"https://necolas.github.io/normalize.css/\" target=\"_blank\" rel=\"external noopener noreferrer\">Normalize.css</a> by <a href=\"https://github.com/necolas\" target=\"_blank\" rel=\"external noopener noreferrer\">Nicolas Gallagher</a></li>\n<li>and our beloved CMS <a href=\"https://wordpress.org/\" target=\"_blank\" rel=\"external noopener noreferrer\">WordPress</a></li>\n</ul>\n<h2 id=\"about\">About <a class=\"direct-link\" href=\"#about\">#</a></h2>\n<p>After releasing my first WordPress theme, <a href=\"https://wordpress.org/themes/the-clean-blog/\" target=\"_blank\" rel=\"external noopener noreferrer\">The Clean Blog</a>, in 2017 and rewriting it from ground up in 2019, I wanted to create a new responsive, clear, clean, bold and dead simple WordPress theme, without any unnecessary functionalities or bells and whistles...<br>\nMy main concern was typography, I wanted a responsive, big and bold typography, so I chose <a href=\"https://twitter.com/MikeRiethmuller\" target=\"_blank\" rel=\"external noopener noreferrer\">Mike Riethmuller</a> approach explained in <a href=\"https://www.madebymike.com.au/writing/precise-control-responsive-typography/\" target=\"_blank\" rel=\"external noopener noreferrer\">Precise control over responsive typography</a>.<br>\nThen, looking here and there for templates with big sidebar, I've been inspired by the templates mentioned above.<br>\nA little from this, a little from that, and MidDay's HTML template was born.<br>\nFinally, MidDay's HTML template was ported to WordPress.</p>\n<h2 id=\"usage\">Usage <a class=\"direct-link\" href=\"#usage\">#</a></h2>\n<p>1- To use this theme, you have to <a href=\"https://wordpress.org/themes/midday/\" target=\"_blank\" rel=\"external noopener noreferrer\">download</a> it from the WordPress themes repository and add it under <em>Appearance→Themes→Add New→Upload Theme</em>, or search for <strong>MidDay</strong> under <em>Appearance→Themes→Add New</em> in the backend.</p>\n<p>2- Please note that this theme's menu is a one level depth only, meaning that there is no sub-menu, so even if you add them they will not appear.</p>\n<p>3- In the Customizer (<em>Appearance→Customize</em> or <em>Customize</em> link in the Admin Bar), you'll find a panel named <em>MidDay Theme</em> and three sections (for now: <em>Sidebar Image</em>, <em>Title &amp; Tagline Color</em>, and <em>Footer Copyright Area</em>) under it.<br>\nUnder each section, controls are explained in details.<br>\nNote that the first section <em>Sidebar Image</em> is only for the home page, each post and page can have their own sidebar image by assigning a Featured image to the post or the page.</p>\n<p>4- MidDay is a Responsive, Clear, Clean, Bold and dead Simple WordPress theme. Perfect for personal or company blogs.</p>\n<h2 id=\"frequently-asked-questions\">Frequently Asked Questions <a class=\"direct-link\" href=\"#frequently-asked-questions\">#</a></h2>\n<details>\n<summary>The Menu is not opening !</summary>\nThis is because this menu needs at least 2 items !\n</details>\n<details>\n<summary>The Menu is not showing children items !</summary>\nThis is because this menu is a one level menu only !\n</details>\n<details>\n<summary>Does this theme support any plugins?</summary>\nMidDay includes support for Infinite Scroll in Jetpack.\n</details>\n<h2 id=\"feedback-%2F-issue-%3F\">Feedback / Issue ? <a class=\"direct-link\" href=\"#feedback-%2F-issue-%3F\">#</a></h2>\n<p>Head over the <a href=\"https://wordpress.org/support/theme/midday/\" target=\"_blank\" rel=\"external noopener noreferrer\">support</a> page to tell me if you’re having some issues or if you wish to see some features added to the theme 😉<br>\nYou can also leave a review on the <a href=\"https://wordpress.org/support/theme/midday/reviews/\" target=\"_blank\" rel=\"external noopener noreferrer\">reviews</a> page to give me a push 👍<br>\nThanks in advance for your feedback !</p>\n<h2 id=\"final-word\">Final word <a class=\"direct-link\" href=\"#final-word\">#</a></h2>\n<p>I really hope that this theme will be useful for a lot of WordPress users and that they'll enjoy using it.<br>\nI'll be making improvements to MidDay from time to time, and be talking about it here, so stay tuned !</p>\n<p><em>This documentation is also available on <a href=\"https://github.com/LebCit/midday/wiki/MidDay-documentation\" target=\"_blank\" rel=\"external noopener noreferrer\">GitHub</a>.</em></p>\n",
      "date_published": "2021-02-02T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/creating-a-customizer-control-with-javascript/",
      "url": "https://lebcit.github.io/posts/creating-a-customizer-control-with-javascript/",
      "title": "Creating a Customizer control with JavaScript",
      "content_html": "<p><em>This post is about creating a control, from A to Z, in WordPress Customizer with JavaScript.</em></p>\n<p>Did you know that you can create panels, sections and controls in the Customizer with JavaScript ?<br>\n&quot;The PHP API for their registration is essentially a wrapper for the underlying JS API&quot; as mentioned by Weston Ruter in <a href=\"https://wp.me/p2AvED-6c4\" target=\"_blank\" rel=\"external noopener noreferrer\">Improvements to the Customize JS API in 4.9</a></p>\n<p>He also says &quot;you can also avoid statically registering settings and partials in PHP by instead adding filters to dynamically recognize settings and partials, allowing them to be registered on demand&quot;, meaning that you can create settings and partials in JS but will have to register them in PHP via a filter because they must be sanitized and validated by the server for security reasons !</p>\n<p>For this task, we need to :</p>\n<ul>\n<li>access the Customizer Pane to create a Panel, a Section, a Setting and a Control with JS</li>\n<li>access the Customizer Preview to define the related Partial of the Control with JS</li>\n<li>add a filter to validate and sanitize the Setting with PHP<br>\nFor more information about how things are related in the Customizer, please read my post <a href=\"/posts/listen-for-changes-in-customizer-preview/\">Listen for changes in Customizer Preview !</a></li>\n</ul>\n<p>I'll explain it as if the reader is a beginner so she/he can understand and follow along.</p>\n<p>My tree looks like this:</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">    - theme ( main folder)<br>    -- inc (folder)<br>    --- customizer.php<br>    -- js (folder)<br>    --- controls.js<br>    --- customizer.js<br>    --- main.js<br>    -- functions.php</code></pre>\n<p>The functions.php file is used to :</p>\n<ul>\n<li>enqueue and localize main.js where we will render on the front end our choice(s) from the Customizer</li>\n<li>require the customizer.php file where we hook controls.js (for Customizer Pane) and customizer.js (for Customizer Preview)<br>\nWe can of course hook controls.js and customizer.js from functions.php but it's better to keep things separated.</li>\n</ul>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// File functions.php</span><br><span class=\"token comment\">/**<br> * Load and localize main.js.<br> */</span><br><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">main_js</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">wp_enqueue_script</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'main-js'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_theme_file_uri</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'/js/main.js'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'1.0'</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token comment\">// Localize the script with new data and pass php variables to JS.</span><br>    <span class=\"token variable\">$main_js_data</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>        <span class=\"token comment\">/** FOR LATER USE. */</span><br>        <span class=\"token string single-quoted-string\">'siteTitleColor'</span> <span class=\"token operator\">=></span> <span class=\"token function\">get_theme_mod</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'siteTitleColorSetting'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'#fff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">wp_localize_script</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'main-js'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'main_vars'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$main_js_data</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token function\">add_action</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'wp_enqueue_scripts'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'main_js'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">/**<br> * Customizer additions.<br> */</span><br><span class=\"token keyword\">require</span> <span class=\"token function\">get_template_directory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/inc/customizer.php'</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// File customizer.php</span><br><span class=\"token comment\">/**<br> * Hooking in JS code to affect the controls in the Customizer.<br> */</span><br><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">midday_customize_controls_js</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">wp_enqueue_script</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'midday-controls'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_template_directory_uri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/js/controls.js'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'customize-controls'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">filemtime</span><span class=\"token punctuation\">(</span> <span class=\"token function\">get_theme_file_path</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'/js/controls.js'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token function\">add_action</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'customize_controls_enqueue_scripts'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday_customize_controls_js'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">/**<br> * Binds JS handlers to make Theme Customizer preview reload changes asynchronously.<br> */</span><br><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">midday_customize_preview_js</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">wp_enqueue_script</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'midday-customizer'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_template_directory_uri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/js/customizer.js'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'customize-preview'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'20151215'</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token function\">add_action</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'customize_preview_init'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday_customize_preview_js'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>If you don't know what is <a href=\"https://developer.wordpress.org/reference/functions/wp_localize_script/\" target=\"_blank\" rel=\"external noopener noreferrer\">wp_localize_script()</a> , think of it as a bridge between PHP and JS where we can pass variables from PHP to JS.<br>\nJust to let you know, there is also another function <a href=\"https://developer.wordpress.org/reference/functions/wp_add_inline_script/\" target=\"_blank\" rel=\"external noopener noreferrer\">wp_add_inline_script()</a> to add JS code to a registered JS file.</p>\n<p>Now that we are all set, let's create a Panel, a Section, a Setting and a Control in controls.js to change the site title color.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**<br> * File controls.js<br> *<br> * Access Theme Customizer Controls for a better user experience.<br> */</span><br><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">api</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">api</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ready\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// Create panel.</span><br>\t\tapi<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><br>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">api<span class=\"token punctuation\">.</span>Panel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myPanel\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Theme Options\"</span><span class=\"token punctuation\">,</span><br>\t\t\t\t<span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Customize Theme\"</span><span class=\"token punctuation\">,</span><br>\t\t\t\t<span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Optional default is 160.</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token comment\">// Site Title Color Section.</span><br>\t\tapi<span class=\"token punctuation\">.</span>section<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><br>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">api<span class=\"token punctuation\">.</span>Section</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"siteTitleColorSection\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Site Title Color Section\"</span><span class=\"token punctuation\">,</span><br>\t\t\t\t<span class=\"token literal-property property\">panel</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myPanel\"</span><span class=\"token punctuation\">,</span><br>\t\t\t\t<span class=\"token literal-property property\">customizeAction</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Customizing ▸ Site Title Color\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// String above title's Section.</span><br>\t\t\t\t<span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The order of this section in the panel.</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token comment\">// Site Title Color Setting.</span><br>\t\tapi<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><br>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">api<span class=\"token punctuation\">.</span>Setting</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"siteTitleColorSetting\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#fff\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token literal-property property\">transport</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postMessage\"</span><span class=\"token punctuation\">,</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token comment\">// Site Title Color Control.</span><br>\t\tapi<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><br>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">wp<span class=\"token punctuation\">.</span>customize<span class=\"token punctuation\">.</span>ColorControl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"siteTitleColorControl\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">\"siteTitleColorSection\"</span><span class=\"token punctuation\">,</span><br>\t\t\t\t<span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Site Title Color Control\"</span><span class=\"token punctuation\">,</span><br>\t\t\t\t<span class=\"token literal-property property\">setting</span><span class=\"token operator\">:</span> <span class=\"token string\">\"siteTitleColorSetting\"</span><span class=\"token punctuation\">,</span><br>\t\t\t\t<span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The order of this control in the section.</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>wp<span class=\"token punctuation\">.</span>customize<span class=\"token punctuation\">)</span></code></pre>\n<p>Please note that the pattern for the Setting is different from the others !<br>\nFor the Setting, we type <code>api.add(setting)</code> and define in the <code>setting</code> an <code>id</code>, a <code>defaultValue</code>, then we pass the desired call type (here we are using <code>postMessage</code>).</p>\n<p>Now, let's access the Customizer Preview in customizer.js and define how the Setting joins the Control to the Partial.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**<br> * File customizer.js.<br> *<br> * Theme Customizer enhancements for a better user experience.<br> *<br> * Contains handlers to make Theme Customizer preview reload changes asynchronously.<br> */</span><br><br><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// Site Title Color.</span><br>\twp<span class=\"token punctuation\">.</span><span class=\"token function\">customize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"siteTitleColorSetting\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">new_value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".site-title a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span> new_value<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">)</span></code></pre>\n<p>Now, let's add in customizer.php the filter to validate and sanitize our Setting, preferably (for logic) after the code that hooks controls.js</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// File customizer.php</span><br><span class=\"token function\">add_filter</span><span class=\"token punctuation\">(</span><br>    <span class=\"token string single-quoted-string\">'customize_dynamic_setting_args'</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$setting_args</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$setting_id</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'siteTitleColorSetting'</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$setting_id</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token variable\">$setting_args</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>                <span class=\"token string single-quoted-string\">'sanitize_callback'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'sanitize_hex_color'</span><span class=\"token punctuation\">,</span><br>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$setting_args</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><br>    <span class=\"token number\">2</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>As you can see, the above function uses the <code>customize_dynamic_setting_args</code> filter to tell the server to validate/recognize the Setting and to sanitize it.<br>\nThe number 10 is the priority of execution of the function, and the number 2 is the number of arguments the function accepts.<br>\nMore info about <a href=\"https://developer.wordpress.org/reference/functions/add_filter/\" target=\"_blank\" rel=\"external noopener noreferrer\">add_filter()</a> in the Code Reference.</p>\n<p>Now, if you go to the Customizer, you'll find the created panel, section, setting and control.<br>\nIf you try to change the site title it will change according to your choice.<br>\nBut if you publish it, nothing will happen on the front end 🤔<br>\nSo, our final step is to render/reflect our choice in the Customizer on the front end.<br>\nRemember the beginning of this post ?<br>\nWe have loaded and localized main.js for this purpose 😉<br>\nOpen main.js and add the following code</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**<br> * File main.js.<br> *<br> * Handles theme's JS functions.<br> */</span><br><span class=\"token string\">\"use strict\"</span><br><br><span class=\"token keyword\">const</span> siteTitleColor <span class=\"token operator\">=</span> midday_vars<span class=\"token punctuation\">.</span>siteTitleColor <span class=\"token comment\">// Retriving the passed variable from PHP to JS.</span><br><span class=\"token keyword\">const</span> siteTitleAnchor <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".site-title a\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Select the site title anchor.</span><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siteTitleColor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// If their is any value.</span><br>\tsiteTitleAnchor<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> siteTitleColor <span class=\"token comment\">// Add this value as a color to the site title anchor.</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>The code is explained and easy to understand, if you have any question don't hesitate !</p>\n<p>As a final note, I would like to let you know that I've created the same control with PHP along with the JS one.<br>\nWhen we change the site title color with the PHP control (let's say <code>#000</code>) and the JS control (let's say <code>#fff</code>) and publish our changes, it's the JS control that takes over 💪</p>\n<p>Hope this post will help you begin using the Customizer's JS API instead of it's PHP API 😊</p>\n",
      "date_published": "2020-06-01T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/clear-your-local-development-cache-with-js/",
      "url": "https://lebcit.github.io/posts/clear-your-local-development-cache-with-js/",
      "title": "Clear your local development cache with JS",
      "content_html": "<p><em>This post is about clearing your local development cache with JavaScript without a server side language.</em></p>\n<p>When we use a server side language to get our changes this is what happens :<br>\n1- the Request is made by the browser to the server<br>\n2- the Response is sent from the server to the browser<br>\nIn this case, if any changes are made within the files, the server will serve the browser with those changes.<br>\nBut, what if you're not using a server side language for your local development ?!</p>\n<p>If you're locally developing a website on the Classic Road (HTML + CSS + JS) without a plugin in your IDE to synchronize your changes, <strong>and have some generated cache</strong>, you'll have to refresh your page twice and sometimes more to see the changes you've just made even if you're using a local server as Laragon, WAMP, MAMP, XAMPP...<br>\nDid you ever asked yourself how much time you're spending on refreshing twice ?!<br>\nThis is a time killer, it's very annoying, and you're productivity will be affected !</p>\n<p>The solution would be to <strong>clear the cache</strong> when we refresh the page, you would say &quot;use Ctrl + F5 !&quot; and I would respond &quot;go try it with your generated cache !&quot;.</p>\n<p>To clear the cache when we hit the refresh button :<br>\n1- we'll have to access the <code>loading state</code> of the document <em>without waiting</em> for stylesheets, images...<br>\n2- we'll have to <code>open</code> the cache and access the particular cache causing headaches<br>\n3- we'll have to <code>delete</code> this particular cache !</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token string\">\"loading\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// Loading hasn't finished yet</span><br>\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loading...\"</span><span class=\"token punctuation\">)</span><br>\t\tcaches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cacheNameCausingHeadaches\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tcache<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deleted\"</span><span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Paste this code at the end of your scripts before the closing body tag and refresh your page twice for the last time !</p>\n<p>To get the <code>cacheNameCausingHeadeaches</code> :</p>\n<pre class=\"language-js\"><code class=\"language-js\">caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">keyList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keyList\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>I'm here to share and learn 😊 so if you have a better way without an IDE plugin for a static site with some cache please let me know because I like to refresh and see the difference 😉</p>\n<p>Hope this will be useful.</p>\n",
      "date_published": "2020-05-27T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/change-page-title-dynamically/",
      "url": "https://lebcit.github.io/posts/change-page-title-dynamically/",
      "title": "Change page title dynamically",
      "content_html": "<p><em>This post is about changing the document title when the user leaves your site's tab.</em></p>\n<p>A good way to grab the the user's attention is of course to write useful content 😁<br>\nBeing funny is also a very good strategy to keep users coming back to your blog.<br>\nA little bit of originality won't harm at all !</p>\n<p>We are going to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API\" target=\"_blank\" rel=\"external noopener noreferrer\">Page Visibility API</a> to detect if the user is on your site's tab or on another tab, and change your site's tab title using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/title\" target=\"_blank\" rel=\"external noopener noreferrer\">Document.title</a> property and an awesome french song title 😉</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Grab the document title of your site's current tab.</span><br><span class=\"token keyword\">let</span> currentTabTitle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>title<br><span class=\"token comment\">// Listen to visibility change events</span><br>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"visibilitychange\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// Fires when user leaves your site's tab.</span><br>\tdocument<span class=\"token punctuation\">.</span>visibilityState <span class=\"token operator\">===</span> <span class=\"token string\">\"hidden\"</span><br>\t\t<span class=\"token operator\">?</span> <span class=\"token comment\">// Document title when user leaves your site's tab.</span><br>\t\t  <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Ne Me Quitte Pas 😭</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token operator\">:</span> <span class=\"token comment\">// Document title when user comes back to your site's tab.</span><br>\t\t  <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> currentTabTitle<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"external noopener noreferrer\">Conditional (ternary) operator</a> is like an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\" target=\"_blank\" rel=\"external noopener noreferrer\">if...else statement</a></p>\n<p><strong>Important note</strong>: since the first change will occur when the user leaves your site's tab, we begin by listening to the <code>hidden</code> state (when the page's content is not visible to the user) and we change your tab title to whatever... Once the user gets back to your site's tab, the original tab title will be reassigned since we've grab it earlier.</p>\n<p>You can see it wright here, change to another tab or open a new one 😉</p>\n<p>Don't forget to check out <a href=\"https://youtu.be/Vz6r0TP4FBI\" target=\"_blank\" rel=\"external noopener noreferrer\">the song</a> 🎶</p>\n",
      "date_published": "2020-05-26T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/listen-for-changes-in-customizer-preview/",
      "url": "https://lebcit.github.io/posts/listen-for-changes-in-customizer-preview/",
      "title": "Listen for changes in Customizer Preview !",
      "content_html": "<p><em>This post is about how to listen for any changes in WordPress Customizer Preview.</em></p>\n<p>One of the most beautiful functionalities of WordPress is the Customizer, because it allows developers to give a simple way for users to modify themes/plugins appearance and behavior.<br>\nHowever, this beauty has it's own code of conduct.<br>\nLet's scratch it a little bit to find out how to listen for changes in the Customizer Preview.</p>\n<p>I always like to assume that the reader maybe a beginner, like I was a long time ago, and explain everything from A to Z, so she/he can follow the tutorial or jump to any part according to her/his experience.</p>\n<p>For simplicity and practice, as usual 😊, I’ll be using an <a href=\"https://underscores.me/\" target=\"_blank\" rel=\"external noopener noreferrer\">_s</a> (underscores) generated theme, and call it <em>Customizer Preview</em> 😉. It’s a 1 minute process, so don’t be afraid, type in the <em>Theme Name,</em> download it, and upload it like any other theme under <em>Appearance &gt; Themes &gt; Add New &gt; Upload Theme</em>.<br>\nNow you’re all set and we can begin.</p>\n<h2 id=\"understanding-how-it%E2%80%99s-related\">Understanding how it’s related <a class=\"direct-link\" href=\"#understanding-how-it%E2%80%99s-related\">#</a></h2>\n<p>In the <a href=\"https://codex.wordpress.org/Functions_File_Explained\" target=\"_blank\" rel=\"external noopener noreferrer\">functions.php</a> file, search for <em>customizer.php</em>, you’ll find a line like this one :</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">require</span> <span class=\"token function\">get_template_directory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/inc/customizer.php'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>So the file <a href=\"https://codex.wordpress.org/Theme_Customization_API\" target=\"_blank\" rel=\"external noopener noreferrer\">customizer.php</a> is located in a folder named <strong><em>inc</em></strong> at the root of the theme.<br>\nIf you look inside this file, at the very bottom, you’ll find a little block of code like this one :</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**<br> * Binds JS handlers to make Theme Customizer preview reload changes asynchronously.<br> */</span><br><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">customizer_preview_customize_preview_js</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">wp_enqueue_script</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'customizer-preview-customizer'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_template_directory_uri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/js/customizer.js'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'customize-preview'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'20151215'</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token function\">add_action</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'customize_preview_init'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'customizer_preview_customize_preview_js'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>So here, we have a call for another file <strong>customizer.js</strong>, located in a folder named <strong><em>js</em></strong> at the root of the theme.<br>\nIf you take a look inside it, you’ll find a bunch of code allowing us to view the changes we make from the Customizer.</p>\n<h2 id=\"the-customizer%E2%80%99s-parts\">The Customizer’s Parts <a class=\"direct-link\" href=\"#the-customizer%E2%80%99s-parts\">#</a></h2>\n<p>When you open the Customizer, you’ll find yourself in front of a screen with two parts :<br>\na- the <strong>Customizer Pane</strong> where the <strong>Controls</strong> (like Background Image) of a theme are defined in <strong>customizer.php</strong><br>\nb- the <strong>Customizer Preview</strong> where the <strong>Settings</strong> defined in <strong>customizer.js</strong> act like a bridge between the Controls and their related Partials.</p>\n<p>A <strong>Partial</strong> is simply a particular part of a theme like the header, the body, the footer, the logo, the site title, the tagline… and so on.</p>\n<p>As an example, you could have a Control to control the site title color by a Setting linking that color Control to the desired Partial (here the site title).<br>\nNow, when you change the color Control in the Pane, the defined Setting for this color Control calls the related Partial in the Preview and tells him to change according to the modifications of his Control.</p>\n<p>If you want to dive more into that, you can read about the <a href=\"https://developer.wordpress.org/themes/customize-api/customizer-objects/\" target=\"_blank\" rel=\"external noopener noreferrer\">Customizer Objects</a> in the Theme Handbook.</p>\n<h2 id=\"listening-to-changes\">Listening to changes <a class=\"direct-link\" href=\"#listening-to-changes\">#</a></h2>\n<p>At this point, you understand how the Customizer’s parts communicate.<br>\nBut what if you need to listen for changes in the Preview ?<br>\nThis will be mostly a need if you are a developer or in the process of becoming one 💪👍</p>\n<p>Quick quizz. Where do you think the following code will go ?<br>\nDon’t look under the code before giving an answer 😁</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Listen for any changes in the Customizer Preview.</span><br>wp<span class=\"token punctuation\">.</span><span class=\"token function\">customize</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">setting</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// Target the Setting, let's take background_image as an example.</span><br>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> setting<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background_image\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// The background is empty by default.</span><br>\t\t<span class=\"token comment\">// So, we begin by listening to a non empty value,</span><br>\t\t<span class=\"token comment\">// to catch the first change when it happens !</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setting<span class=\"token punctuation\">.</span>_value <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I Now Have A Background 🙂\"</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I Do Not Have A Background 🙁\"</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>What does this code do ?<br>\nIt listen to any <code>'change'</code> of a defined <code>( setting )</code>.<br>\nRemember, a Setting is a bridge allowing communication between a Control and it’s related Partial.<br>\nSo when a communication occurs, a change is ongoing and then done !<br>\nIn the example above, we are listening to any change on the <code>background_image</code>.</p>\n<p>Did you try to look for <code>background_image</code> in the generated theme from underscores ?!<br>\nIf you did, you know by now that it’s not here 🤔 and if you didn’t, don’t, you will not find it !<br>\nWell, I’ve used it as an example to grab your attention on Core Controls/Settings !<br>\nSome Controls/Settings comes with WordPress by default, they can be modified or removed, but this will be for another article.</p>\n<p>I didn’t forget, I just delayed it 😈<br>\nThe code above should go inside <strong>customizer.js</strong> between a :</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token constant\">YES</span> <span class=\"token constant\">HERE</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>I really hope that this will be useful.</p>\n",
      "date_published": "2020-05-24T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/hide-wordpress-toolbar-with-wp_add_inline_style/",
      "url": "https://lebcit.github.io/posts/hide-wordpress-toolbar-with-wp_add_inline_style/",
      "title": "Hide WordPress Toolbar with wp_add_inline_style",
      "content_html": "<p><em>This post is about using <code>wp_add_inline_style()</code> function to hide the WordPress Toolbar or Admin Bar.</em></p>\n<p>Ever wanted to hide the WordPress Toolbar ?<br>\nIf you are a new developer, you should know that it's not allowed to hide it directly wit CSS.<br>\nBut even if you are a junior or senior WordPress user, you should consider this requirement for best practice, also you'll maybe learn something new 😉</p>\n<p><a href=\"https://wordpress.org/support/article/toolbar/\" target=\"_blank\" rel=\"external noopener noreferrer\">The WordPress Toolbar</a> is the little black bar on top of the site that only the logged in user(s) can see, depending on their <a href=\"https://wordpress.org/support/article/roles-and-capabilities/\" target=\"_blank\" rel=\"external noopener noreferrer\">role(s)</a> and how the Super Admin or the Administrator has configured the visibility of this bar for each one…</p>\n<p>We can set the display status of this bar for the front side of our website by using the <a href=\"https://developer.wordpress.org/reference/functions/show_admin_bar/\" target=\"_blank\" rel=\"external noopener noreferrer\">show_admin_bar()</a> function.</p>\n<p>Also, we can directly target it by it’s CSS <em><code>id #wpadminbar</code></em> and hide it like so :</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#wpadminbar</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>but this way is not allowed for themes/plugins developers !</p>\n<p>You can say, <em>“just use <code>show_admin_bar</code> !”</em>, and I would ask the following :<br>\n<em>“what if I want to hide it with CSS without using a stylesheet so I can control it with JS for later use ?!”</em> 😉<br>\nIt’s not the main reason, you can have any other reason to hide it with CSS without using a stylesheet, scenarios are limitless.</p>\n<p>This is where <a href=\"https://developer.wordpress.org/reference/functions/wp_add_inline_style/\" target=\"_blank\" rel=\"external noopener noreferrer\">wp_add_inline_style()</a> function steps in 🙂<br>\nIn your <a href=\"https://codex.wordpress.org/Functions_File_Explained\" target=\"_blank\" rel=\"external noopener noreferrer\">functions.php</a> file, add the following :</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**<br> * Hide the Toolbar using inline style since we can't use #wpadminbar in CSS.<br> */</span><br><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">myfunction_hide_adminbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token variable\">$hide_adminbar</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"<br>        #wpadminbar{<br>            display: none;<br>        }\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">wp_add_inline_style</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'my-stylesheet-handle'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$hide_adminbar</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token function\">add_action</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'wp_enqueue_scripts'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'myfunction_hide_adminbar'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Please, pay attention to the <code>$handle</code> <strong>my-stylesheet-handle</strong> !<br>\nYou should replace it with the <code>$handle</code> of your stylesheet !<br>\nIn your <strong>functions.php</strong> file, you’ll find something like :</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">wp_enqueue_style</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'your-stylesheet-handle'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_stylesheet_uri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>your-stylesheet-handle</strong> is the <code>$handle</code> of your stylesheet 😉</p>\n<p>Hope this will be useful 🙂<br>\nPlease don’t hesitate to share your opinion, suggestions or other methods.</p>\n",
      "date_published": "2020-05-22T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/modifying-wordpress-theme-copyright-from-the-customizer/",
      "url": "https://lebcit.github.io/posts/modifying-wordpress-theme-copyright-from-the-customizer/",
      "title": "Modifying WordPress theme&#39;s copyright from the Customizer",
      "content_html": "<p><em>This post is about modifying WordPress theme's copyright from the Customizer.</em></p>\n<p>One of the most asked question by new WordPress users is:<br>\n<strong>&quot;how to change the copyright ?&quot;</strong>.<br>\nThey don't want a label of any kind on their site and that's totally comprehensible.<br>\nIn this post, I'll be talking of my own sauce to give users the ability to remove or modify the copyright without touching one line of code !</p>\n<p>If you are new to the Customizer, don't be afraid, I was too a long time ago...<br>\nSo in this post I'll show you a technique to control the copyright of WordPress, generally displayed in the footer of a theme, from the Customizer.<br>\nYou can use it in your own theme to give your users a clean and easy way to modify the footer copyright, or use it in a child theme to modify the footer copyright of the parent theme that you are using.</p>\n<h2 id=\"1--replace-the-footer-copyright-by-a-function\">1- Replace the footer copyright by a function <a class=\"direct-link\" href=\"#1--replace-the-footer-copyright-by-a-function\">#</a></h2>\n<p>First of all select the part that should be modified. Generally speaking, it's a sentence like: &quot;<em>Proudly powered by WordPress, Theme: theme-name by theme-author</em>&quot;.<br>\nI'm going to take the generated footer by <a href=\"https://underscores.me/\" target=\"_blank\" rel=\"external noopener noreferrer\">_s</a> (underscores) as an example for this task.<br>\nLooking inside the <strong>footer.php</strong>, we can see a code like this:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>footer</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>colophon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site-footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site-info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">echo</span> <span class=\"token function\">esc_url</span><span class=\"token punctuation\">(</span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'https://wordpress.org/'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?></span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>            <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span><br>            <span class=\"token comment\">/* translators: %s: CMS name, i.e. WordPress. */</span><br>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token function\">esc_html__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Proudly powered by %s'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'WordPress'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token delimiter important\">?></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sep<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> | <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span><br>            <span class=\"token comment\">/* translators: 1: Theme name, 2: Theme author. */</span><br>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token function\">esc_html__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Theme: %1$s by %2$s.'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'&lt;a href=\"https://github.com/LebCit\">LebCit&lt;/a>'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token delimiter important\">?></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- .site-info --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>footer</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- #colophon --></span></code></pre>\n<p>Here, we are interested with the code inside <code>&lt;div class=&quot;site-info&quot;&gt;</code>, so let's cut it, paste it somewhere else (like notepad), and replace it by a php function.<br>\nThe code should now be like the following:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>footer</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>colophon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site-footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site-info<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>site-info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">midday_site_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- .site-info --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>footer</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- #colophon --></span></code></pre>\n<p>You can name the function whatever you like, but be sure to replace any name modification according to the changes you have made in the wright place in the code.<br>\nPlease note that I've added an <code>&lt;id=&quot;site-info&quot;&gt;</code> this will be used in the Customizer.</p>\n<h2 id=\"2--put-the-footer-copyright-in-functions.php\">2- Put the footer copyright in functions.php <a class=\"direct-link\" href=\"#2--put-the-footer-copyright-in-functions.php\">#</a></h2>\n<p>Now we have to connect this <code>midday_site_info()</code> function with the block of code previously pasted elsewhere.<br>\nIn the <a href=\"https://codex.wordpress.org/Functions_File_Explained\" target=\"_blank\" rel=\"external noopener noreferrer\">functions.php</a> file of your theme or your child theme, put this code, I'll explain it just after :</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**<br> * Output the theme's copyright depending on user's choice.<br> */</span><br><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">midday_site_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token variable\">$midday_footer_copyright_area_checkbox</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_theme_mod</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_checkbox'</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token variable\">$midday_custom_copyright_textarea</span>      <span class=\"token operator\">=</span> <span class=\"token function\">get_theme_mod</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'midday_custom_copyright_textarea'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">''</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> <span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$midday_footer_copyright_area_checkbox</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span><br>            <span class=\"token variable\">$html</span>  <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'&lt;a href=\"'</span> <span class=\"token operator\">.</span> <span class=\"token function\">esc_url</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'https://wordpress.org/'</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\">'</span> <span class=\"token operator\">.</span> <span class=\"token function\">esc_html</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Proudly powered by WordPress'</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'&lt;/a>'</span><span class=\"token punctuation\">;</span><br>            <span class=\"token variable\">$html</span> <span class=\"token operator\">.=</span> <span class=\"token string single-quoted-string\">'&lt;span class=\"sep\"> | &lt;/span>'</span><span class=\"token punctuation\">;</span><br>            <span class=\"token variable\">$html</span> <span class=\"token operator\">.=</span> <span class=\"token function\">esc_html</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Theme: MidDay by '</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'&lt;a href=\"'</span> <span class=\"token operator\">.</span> <span class=\"token function\">esc_url</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'https://lebcit.github.io/'</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\">'</span> <span class=\"token operator\">.</span> <span class=\"token function\">esc_html</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'LebCit'</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'&lt;/a>'</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">echo</span> <span class=\"token function\">wp_kses</span><span class=\"token punctuation\">(</span><br>                <span class=\"token variable\">$html</span><span class=\"token punctuation\">,</span><br>                <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>                    <span class=\"token string single-quoted-string\">'a'</span>  <span class=\"token operator\">=></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>                        <span class=\"token string single-quoted-string\">'href'</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token string single-quoted-string\">'span'</span>  <span class=\"token operator\">=></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>                        <span class=\"token string single-quoted-string\">'class'</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                <span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">elseif</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$midday_footer_copyright_area_checkbox</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span> <span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$midday_custom_copyright_textarea</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">echo</span> <span class=\"token function\">wp_kses_post</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$midday_custom_copyright_textarea</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Allow html.</span><br>    <span class=\"token keyword\">endif</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>What in the hell is this ?<br>\nIt's nothing 😂 it's just the same pasted elsewhere code in PHP with some variables and an <code>if/elseif</code> statement to take care of the user's choice.</p>\n<p>Inside the function, I've defined 2 variables. Each one is related to a <code>theme_mod</code> (theme modification) that we will create and explain in a moment.</p>\n<p>I've opened an <code>if</code> statement saying:<br>\n<em>if the first variable (remember it's related to a <code>theme_mod</code>, yes it's a checkbox)</em> 😉 <em>is not empty (so it have a check tick, it's checked) please populate the copyright with the following code</em>.<br>\nThe code here is pretty easy to understand.<br>\nI've defined an <code>$html</code> variable replicating the pasted elsewhere code, then I've asked PHP to echo this code using <a href=\"https://developer.wordpress.org/reference/functions/wp_kses/\" target=\"_blank\" rel=\"external noopener noreferrer\">wp_kses</a> filtering the text content and striping out disallowed HTML.</p>\n<p>In other words:<br>\n<em>hey <code>wp_kses</code>, please echo the defined <code>$html</code> variable, and please allow it to only have <code>a</code> tag with <code>href</code> attribute and <code>span</code> tag with <code>class</code> attribute, thank you very much</em> 😊</p>\n<p>After that, I've opened an <code>elseif</code> statement saying:<br>\n<em>okay, if the first variable is empty (the checkbox is not checked) and the second variable (a text area) is not empty, please populate the copyright with the content of the text area allowing the user to use HTML inside it with</em> <a href=\"https://developer.wordpress.org/reference/functions/wp_kses_post/\" target=\"_blank\" rel=\"external noopener noreferrer\">wp_kses_post</a> <em>that will keep an eye and make sure the user type allowed HTML only, that's it I've nothing more to ask so please close the if statement with this <code>endif;</code></em></p>\n<h2 id=\"3--create-settings-and-controls-in-the-customizer\">3- Create settings and controls in the Customizer <a class=\"direct-link\" href=\"#3--create-settings-and-controls-in-the-customizer\">#</a></h2>\n<p>Do you remember the 2 previous variables ?<br>\nThey where related to theme's modifications.<br>\nIt's time to create those <code>theme_mod</code> and test our code.<br>\nTo keep the functions.php file clean, we will put the following in a customizer.php file if you don't have one already. Yous just have to require it from functions.php like so :</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">require</span> <span class=\"token function\">get_template_directory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/inc/customizer.php'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Please note that in this example the file is in a folder named inc (for includes) at the root of the theme or the child theme, you can change this but be sure to indicate the correct path.<br>\nNow, put the following in customizer.php, let's see the code and explain it later:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">midday_customize_register</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$wp_customize</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">/**<br>     * MidDay Theme Panel<br>     */</span><br>    <span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token function\">add_panel</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'midday_panel'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>            <span class=\"token string single-quoted-string\">'title'</span>       <span class=\"token operator\">=></span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'MidDay Theme'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'description'</span> <span class=\"token operator\">=></span> <span class=\"token function\">esc_html__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Customize MidDay Theme'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'priority'</span>    <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">/**<br>     * Footer Copyright Area Section.<br>     */</span><br>    <span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token function\">add_section</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_section'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>            <span class=\"token string single-quoted-string\">'title'</span>       <span class=\"token operator\">=></span> <span class=\"token function\">esc_html__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Footer Copyright Area'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'description'</span> <span class=\"token operator\">=></span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Modify &lt;b>Footer Copyright Area&lt;/b>.'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'panel'</span>       <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'midday_panel'</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'priority'</span>    <span class=\"token operator\">=></span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// Default copyright.</span><br>    <span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token function\">add_setting</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_checkbox'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>            <span class=\"token string single-quoted-string\">'default'</span>           <span class=\"token operator\">=></span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'transport'</span>         <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'postMessage'</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'sanitize_callback'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'midday_sanitize_checkbox'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token function\">add_control</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_checkbox'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>            <span class=\"token string single-quoted-string\">'label'</span>       <span class=\"token operator\">=></span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Enable/Disable Default Copyright.'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'description'</span> <span class=\"token operator\">=></span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'This checkbox, once &lt;b>unchecked&lt;/b>,&lt;br>removes &lt;b>Default Copyright.&lt;/b>'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'section'</span>     <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_section'</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'type'</span>        <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'checkbox'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token property\">selective_refresh</span><span class=\"token operator\">-></span><span class=\"token function\">add_partial</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_checkbox'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>            <span class=\"token string single-quoted-string\">'selector'</span>        <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'#site-info'</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'settings'</span>        <span class=\"token operator\">=></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_checkbox'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'render_callback'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'midday_site_info'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// Custom copyright.</span><br>    <span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token function\">add_setting</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'midday_custom_copyright_textarea'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>            <span class=\"token string single-quoted-string\">'default'</span>           <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'transport'</span>         <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'postMessage'</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'sanitize_callback'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'wp_kses_post'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Allow html.</span><br>        <span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token function\">add_control</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'midday_custom_copyright_textarea'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>            <span class=\"token string single-quoted-string\">'label'</span>       <span class=\"token operator\">=></span> <span class=\"token function\">esc_html__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Custom Copyright Textarea'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'description'</span> <span class=\"token operator\">=></span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'To display a &lt;b>Custom Copyright&lt;/b>,&lt;br>&lt;b>uncheck&lt;/b> the &lt;b>Default Copyright&lt;/b> checkbox,&lt;br>then type a custom copyright in the textarea.&lt;br>&lt;b>HTML&lt;/b> is allowed !'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'section'</span>     <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_section'</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'type'</span>        <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'textarea'</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'input_attrs'</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>                <span class=\"token string single-quoted-string\">'style'</span>       <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'border: 1px solid #999'</span><span class=\"token punctuation\">,</span><br>                <span class=\"token string single-quoted-string\">'placeholder'</span> <span class=\"token operator\">=></span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Enter Custom Copyright...'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token property\">selective_refresh</span><span class=\"token operator\">-></span><span class=\"token function\">add_partial</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'midday_custom_copyright_textarea'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>            <span class=\"token string single-quoted-string\">'selector'</span>        <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'#site-info'</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'settings'</span>        <span class=\"token operator\">=></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'midday_custom_copyright_textarea'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string single-quoted-string\">'render_callback'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'midday_site_info'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token punctuation\">}</span><br><span class=\"token function\">add_action</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'customize_register'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday_customize_register'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Don't panic, it's pretty straightforward !<br>\nLet's break it down and you'll see.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">mytheme_customize_register</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$wp_customize</span> <span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">//All our sections, settings, and controls will be added here</span><br><span class=\"token punctuation\">}</span><br><span class=\"token function\">add_action</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'customize_register'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'mytheme_customize_register'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>This is how we hook a function to the <a href=\"https://codex.wordpress.org/Plugin_API/Action_Reference/customize_register\" target=\"_blank\" rel=\"external noopener noreferrer\">'customize_register'</a> action and put inside it our panels, sections, settings and controls.<br>\nLooking at our code, you can now understand that I've created a panel, a section, 2 settings and their 2 related controls.<br>\nI'm not going to dive into the Customizer, but if you're not familiar with it, a good start would be this <a href=\"https://maddisondesigns.com/2017/05/the-wordpress-customizer-a-developers-guide-part-1/\" target=\"_blank\" rel=\"external noopener noreferrer\">excellent guide</a> by Anthony Hortin.<br>\nInstead, I'm going to explain a more important aspect here. If you take a good look at the code, you'll see something else under each control :</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token property\">selective_refresh</span><span class=\"token operator\">-></span><span class=\"token property\">add_partial</span></code></pre>\n<p>What is this and what does it do ?<br>\nWell, look closer and you'll figure it out yourself 😂<br>\nJust kidding, but in fact it's really clear.<br>\nLet's take one setting it's control and the related selective_refresh:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Default copyright.</span><br><span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token function\">add_setting</span><span class=\"token punctuation\">(</span><br>    <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_checkbox'</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'default'</span>           <span class=\"token operator\">=></span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string single-quoted-string\">'transport'</span>         <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'postMessage'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string single-quoted-string\">'sanitize_callback'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'midday_sanitize_checkbox'</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token function\">add_control</span><span class=\"token punctuation\">(</span><br>    <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_checkbox'</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'label'</span>       <span class=\"token operator\">=></span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'Enable/Disable Default Copyright.'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string single-quoted-string\">'description'</span> <span class=\"token operator\">=></span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'This checkbox, once &lt;b>unchecked&lt;/b>,&lt;br>removes &lt;b>Default Copyright.&lt;/b>'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'midday'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string single-quoted-string\">'section'</span>     <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_section'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string single-quoted-string\">'type'</span>        <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'checkbox'</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token variable\">$wp_customize</span><span class=\"token operator\">-></span><span class=\"token property\">selective_refresh</span><span class=\"token operator\">-></span><span class=\"token function\">add_partial</span><span class=\"token punctuation\">(</span><br>    <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_checkbox'</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string single-quoted-string\">'selector'</span>        <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'#site-info'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string single-quoted-string\">'settings'</span>        <span class=\"token operator\">=></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'midday_footer_copyright_area_checkbox'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string single-quoted-string\">'render_callback'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'midday_site_info'</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Remember the first variable ?<br>\nWell here is it's <code>theme_mod</code> !<br>\nTake a look at the <strong>setting</strong> name <code>midday_footer_copyright_area_checkbox</code> 😉<br>\nThe important part here is <code>'transport' =&gt; 'postMessage'</code>, because it tells the browser not to reload, but to make the change(s) in place !<br>\nAnother important aspect in the <strong>setting</strong> is <code>'sanitize_callback' =&gt; 'midday_sanitize_checkbox'</code>, this is a function to sanitize the checkbox, you should put it <strong>after</strong> the <code>'customize_register'</code> action hook:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> <span class=\"token function\">function_exists</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'midday_sanitize_checkbox'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">/**<br>     * Switch sanitization<br>     *<br>     * @param string $input Switch value.<br>     * @return integer  Sanitized value<br>     */</span><br>    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">midday_sanitize_checkbox</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$input</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token constant boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$input</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>In the <strong>control</strong>, the important part is the type of the control, as you can see it's defined as checkbox, no surprise, WYaskIWYG 😂<br>\nFor the <strong>partial</strong>, the important part is the selector, it must be an <code>id</code>, now you know why I've added an <code>id</code> previously 👍<br>\nIf you look at the <code>settings</code> and the <code>render_callback</code> of the <strong>partial</strong>, you'll understand that everything is related 🔗 and that we are just putting the wright piece in the wright place 🧩</p>\n<p>You maybe guessed it out or not, but yes I'm developing a new theme called MidDay (in fact I've finished it, just some clean up remaining) and I'll submit it very soon 😁</p>\n<p>I really hope that this was helpful.</p>\n",
      "date_published": "2020-05-21T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/get-google-products-on-desktop-with-thunderbird/",
      "url": "https://lebcit.github.io/posts/get-google-products-on-desktop-with-thunderbird/",
      "title": "Get Google products on desktop with Thunderbird",
      "content_html": "<p><em>This post is about using Google products on a desktop with Thunderbird.</em></p>\n<p><strong>Every time</strong> you want to check your Gmail, Agenda, Drive, Keep... on your desktop, you have to open a browser and log in, to be able use them.<br>\nDid you ever asked your self how much time this process is taking in a week, a month, a year ?<br>\nWell, with Thunderbird you will not ask yourself that anymore !</p>\n<h2 id=\"thunderbird\">Thunderbird <a class=\"direct-link\" href=\"#thunderbird\">#</a></h2>\n<p>I'm not going to explain in this post how to install Thunderbird, but you can just go to <a href=\"https://www.thunderbird.net/en-US/\" target=\"_blank\" rel=\"external noopener noreferrer\">the official website</a> and download it, the installation process is <strong>very</strong> easy.<br>\nSo, assuming you have Thunderbird installed and running, I'm going to explain how to get all Google products directly inside it, and it's also very easy to do it.</p>\n<h2 id=\"profile-or-profiles\">Profile or profiles <a class=\"direct-link\" href=\"#profile-or-profiles\">#</a></h2>\n<p>When you install Thunderbird and run it, a default profile will be created. You can access the profiles' manager by typing this command :</p>\n<pre class=\"language-batch\"><code class=\"language-batch\"><span class=\"token command\"><span class=\"token keyword\">thunderbird</span>.exe <span class=\"token parameter attr-name\">-p</span></span></code></pre>\n<p>You'll then be able to do various actions, as adding, renaming, deleting... a profile and so on...<br>\nThis is not a part of the process but it's important to know that you can do it, maybe you want to add a profile for your work and another for you 😉 this is a very convenient way to separate your personal stuff 👍<br>\nOnce a profile is created, start it, add your name (as you want to display it for this account), your e-mail, and your password, and that's it !<br>\n<strong>Important note</strong>if you use multiple profiles (or even one if you want) :<br>\nyou don't have to type the above command each time you want to access the manager, just untick the <em>Don't ask at startup</em> box and now you'll get the manager every time you launch Thunderbird.</p>\n<h2 id=\"google-products\">Google products <a class=\"direct-link\" href=\"#google-products\">#</a></h2>\n<p>The easiest way is to add only one plugin. To add an extension in Thunderbird, click the main menu button, choose <strong>Add-ons</strong>, then <strong>Extensions</strong> in the left panel, search for <em>ThunderKeepPlus</em> and install it.<br>\nOnce installed, it will ask you to connect to your Google account, after that your Google Keep will be displayed, in a new tab inside Thunderbird, as if it was in a browser and you will have access to all Google products as you usually do in a browser 💪</p>\n<h2 id=\"security\">Security <a class=\"direct-link\" href=\"#security\">#</a></h2>\n<p>I don't have to tell you to be aware of this technique because you should only do it on your personal machine only, but I'm telling you just for security and conscience reasons 😊</p>\n<h2 id=\"final-note\">Final note <a class=\"direct-link\" href=\"#final-note\">#</a></h2>\n<p>If you want to know more about Thunderbird, head over <a href=\"https://support.mozilla.org/en-US/products/thunderbird\" target=\"_blank\" rel=\"external noopener noreferrer\">the official support</a> , everything is well explained.</p>\n<hr>\n<p class=\"post-content hide\">\n<em>Note: background image used, work of <a href=\"https://pxhere.com/en/photo/417303\" target=\"_blank\">Les Haines</a></em>\n</p>\n",
      "date_published": "2020-05-14T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/the-clean-blog-wordpress-theme/",
      "url": "https://lebcit.github.io/posts/the-clean-blog-wordpress-theme/",
      "title": "The Clean Blog WordPress theme",
      "content_html": "<p>Hello everyone,</p>\n<p><em>This post is about the development and usage of The Clean Blog WordPress theme.</em></p>\n<h2 id=\"credits\">Credits <a class=\"direct-link\" href=\"#credits\">#</a></h2>\n<p>This WordPress Theme wouldn’t have seen the light without :</p>\n<ul>\n<li>the <a href=\"https://startbootstrap.com/themes/clean-blog/\" target=\"_blank\" rel=\"external noopener noreferrer\">Clean Blog</a> template by <a href=\"https://github.com/davidtmiller\" target=\"_blank\" rel=\"external noopener noreferrer\">David Miller</a></li>\n<li>the starter theme <a href=\"https://underscores.me/\" target=\"_blank\" rel=\"external noopener noreferrer\">Underscores</a> by <a href=\"https://automattic.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">Automattic</a></li>\n<li>and our beloved CMS <a href=\"https://wordpress.org/\" target=\"_blank\" rel=\"external noopener noreferrer\">WordPress</a></li>\n</ul>\n<h2 id=\"about\">About <a class=\"direct-link\" href=\"#about\">#</a></h2>\n<p>Users, like I was a long time ago, tend to search for themes with ‘cool’ functionalities to make their websites stand out without knowing the real cost (performance, accessibility, best practices, search engine optimization, and so on…) of the ‘bling-bling’ they are using…<br>\nTwo years ago, when <em>The Clean Blog</em> was released (in 2017), I was not aware of those critical facts and developed it with a user mindset…<br>\nToday (in 2019), after two more years of diving, learning and improving, I can’t just sit back and let even a few hundreds of people use a bloated theme with a lot of ‘bling-bling’ functionalities !<br>\nAs developers improve, they don’t feel shy or ashamed at all to point users in the right direction(s) for a better experience and a better Web even if this mean hours of developing are going to be wasted ( not really because we learn from our mistakes ) and gone with the wind…<br>\nUsers are always free to switch from a theme to any other one, but for me, as a conscientious developer, I have to make the best decisions concerning my code for the web and the users experience…<br>\nIn short, the new theme is much more well coded and to be very honest is not bloated like the old one…</p>\n<h2 id=\"usage\">Usage <a class=\"direct-link\" href=\"#usage\">#</a></h2>\n<p>1- To use this theme, you have to <a href=\"https://wordpress.org/themes/the-clean-blog/\" target=\"_blank\" rel=\"external noopener noreferrer\">download</a> it from the WordPress themes repository and add it under <em>Appearance→Themes→Add New→Upload Theme</em>, or search for <strong>The Clean Blog</strong> under <em>Appearance→Themes→Add New</em> in the backend.</p>\n<p>2- Since the theme is Bootstrap based, I've wrote a lightweight JavaScript plugin, <a href=\"https://github.com/LebCit/bsWalker.js\" target=\"_blank\" rel=\"external noopener noreferrer\">bsWalker.js</a> , to take care of multilevel dropdown navigation.<br>\nTo create an item link with children :</p>\n<ul>\n<li>go to <em>Appearance→Menus</em> in the backend</li>\n<li>create a <strong>Custom Link</strong></li>\n<li>in <em>URL</em> type <strong>#</strong></li>\n<li>in <em>Link Text</em> type the label of your choice</li>\n<li>put children links under this custom link</li>\n<li>in <strong>Menu Settings</strong>, under the created menu, choose <strong>Primary</strong> as location and save your menu</li>\n<li>nothing more to do, that's it ! 😁</li>\n</ul>\n<p>3- In the Customizer (<em>Appearance→Customize</em> or <em>Customize</em> link in the Admin Bar), you'll find a panel named <em>The Clean Blog Theme</em> and four sections (for now: <em>Homepage Header Slider, Featured Image Display, Footer Social Sites Links and Footer Copyright Area</em>) under it. Under each section, controls are explained in details.<br>\nNote that the third section <em>Header Image</em> is only for the home page, each post and page can have their own header image by assigning a <em>Featured image</em> to the post or the page.</p>\n<p>4- The only plugin I've used is <a href=\"https://freqdec.github.io/slabText/\" target=\"_blank\" rel=\"external noopener noreferrer\">slabText</a> by <a href=\"https://github.com/freqdec\" target=\"_blank\" rel=\"external noopener noreferrer\">Brian McAllister</a> to control the size of the site title, so don't worry if your site title is long, it will be big and bold ✨</p>\n<p>5- The Clean Blog (TCB) is a Responsive WordPress theme, perfect for personal or company blogs.</p>\n<h2 id=\"feedback-%3F\">Feedback ? <a class=\"direct-link\" href=\"#feedback-%3F\">#</a></h2>\n<p>Head over the <a href=\"https://wordpress.org/support/theme/the-clean-blog\" target=\"_blank\" rel=\"external noopener noreferrer\">support page</a> to tell me if you’re having some issues or if you wish to see some features added to the theme 😉<br>\nYou can also leave a review on the <a href=\"https://wordpress.org/support/theme/the-clean-blog/reviews/\" target=\"_blank\" rel=\"external noopener noreferrer\">reviews page</a> to give me a push 👍<br>\nThanks in advance for your feedback !</p>\n<h2 id=\"final-word\">Final word <a class=\"direct-link\" href=\"#final-word\">#</a></h2>\n<p>I really hope that this theme will be useful for a lot of WordPress users and that they'll enjoy using it. I'll be making improvements to TCB from time to time, so don't worry, and be talking about it here, so stay tuned !</p>\n",
      "date_published": "2020-05-09T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/back-to-the-roots-with-a-static-site/",
      "url": "https://lebcit.github.io/posts/back-to-the-roots-with-a-static-site/",
      "title": "Back to the roots with a static site",
      "content_html": "<p><em>This is a post about my own experience with development and static site.</em></p>\n<p>From Zero to Hero or at least not a zero anymore !<br>\nFrom the Highway to the Classic Road.</p>\n<p>If you didn't read my <a href=\"/about/\">About</a> section, you can quickly guess from the tagline that I'm a self-taught developer.</p>\n<p>I didn't have a clue about the amazing world of code, or even heard about HTML, CSS or JS.<br>\nSo with a will to understand, after being played and robbed by a so-called <em>developer</em>, my first task was to learn English ! Oh, yeah 🤣</p>\n<p>After acquiring a basic level of understanding, the real deal was to confront this nightmare, <code>the code</code> 👻<br>\nFrom where should I begin ?!<br>\nWhat should I learn first ?!<br>\nHow to create a website ?!<br>\n...<br>\nSo many questions with no clear answer for me 😱</p>\n<p>Since I wanted to start quick (newbie error), I took the wrong path and started to seek for easy ways to create a website (don't want to talk about it, very bad memory). It took me a while to realise that this was not a good choice and that I'm not really learning...<br>\nA friend talked about a tool for creating dynamic websites called Joomla, I created my first website with Joomla and coded a little bit, but Joomla was (for me) illogical (not clear/consistent), so I tried Drupal (a cannon to kill a fly), then discovered WordPress 💘</p>\n<p>I don't know why, but I felled at home with WordPress, especially with the Codex, the Forums and tons of tutorials everywhere on the Web, the nightmare was turning to a dream coming true...<br>\nMeanwhile, my English was improving with all the readings and my experience was getting pleasant and smoother.<br>\nSo I decided to make <a href=\"https://wordpress.org/plugins/full-screen-morphing-search/\" target=\"_blank\" rel=\"external noopener noreferrer\">my first plugin</a> (2016), then <a href=\"https://wordpress.org/themes/the-clean-blog/\" target=\"_blank\" rel=\"external noopener noreferrer\">my first theme</a> (2017), and I did it with <strong>a lot of difficulties</strong>... I wanted to quit many times, but a voice in my head was telling me: &quot;<em>continue, you've already spent a lot of time over this and you are so close, don't give up now !</em>&quot;.</p>\n<p>Since then, I've helped as much as I can other people, the same way great developers helped me by pointing to the right direction.<br>\nBut, yes there is always a but, I've written again my plugin and my theme from ground up, because I was improving, and everything with bells and whistles in the code world became (for me) useless.<br>\nI was turning to usability over functionality, simplicity over complexity and accessibility over bling bling code !</p>\n<p>Last year (2019), I was watching a lot of great developers turning their personal sites to static and a growing interest for <a href=\"https://jamstack.org/generators/\" target=\"_blank\" rel=\"external noopener noreferrer\">Static Site Generators</a> and <a href=\"https://jamstack.org/headless-cms/\" target=\"_blank\" rel=\"external noopener noreferrer\">Headless CMS</a>.<br>\nI was wondering why ?<br>\nI had a .tk domain that stopped working from one day to the next ! Another lesson in this world...<br>\nSo, it was time to turn over and try the static world. I've found myself in a completely new playground and didn't want to waste time, again, just to output basic HTML (another newbie error)...<br>\nAfter trying to totally code my site without an SSG, I figured out that it was a time killer and surely not the best way today.<br>\nComing from WordPress, I wanted a CMS to output my site, so I've tried <a href=\"https://jocms.net/\" target=\"_blank\" rel=\"external noopener noreferrer\">jocms</a> and <a href=\"https://getpublii.com/\" target=\"_blank\" rel=\"external noopener noreferrer\">Publii</a> but I was not satisfied at all by the result nor the limitations...<br>\nNow (2021), after trying some SSG, I deeply felled in love with <a href=\"https://www.11ty.dev/\" target=\"_blank\" rel=\"external noopener noreferrer\">Eleventy</a> 💘, the best SSG in my opinion, for it's freedom, power and simplicity.<br>\nInteresting post : <a href=\"https://snipcart.com/blog/choose-best-static-site-generator\" target=\"_blank\" rel=\"external noopener noreferrer\">Choosing the Best Static Site Generator</a>.</p>\n<p>I was working on a new WordPress theme, and decided to bake it on the Classic Road and use it for me as a beginning point to my new site.<br>\nBig, bold and clear 😉</p>\n<p>I really hope that you like it. Soon I'll be making comments available and be talking about how I made it, so stay tuned !</p>\n",
      "date_published": "2020-05-04T00:00:00Z"
    },{
      "id": "https://lebcit.github.io/posts/full-screen-morphing-search-plugin/",
      "url": "https://lebcit.github.io/posts/full-screen-morphing-search-plugin/",
      "title": "Full Screen Morphing Search Plugin",
      "content_html": "<p><em>This post is about my first WordPress plugin, full screen morphing search.</em></p>\n<p>I’m very excited and happy to announce the release (in 2016) of <strong>my first plugin</strong> ! This <a href=\"https://wordpress.org/plugins/full-screen-morphing-search/\" target=\"_blank\" rel=\"external noopener noreferrer\">plugin</a> is based on the <a href=\"http://tympanus.net/codrops/2014/11/04/simple-morphing-search/\" target=\"_blank\" rel=\"external noopener noreferrer\">Simple Morphing Search</a> experimental effect created by <a href=\"http://tympanus.net/codrops/author/crnacura/\" target=\"_blank\" rel=\"external noopener noreferrer\">Mary Lou (Manoela Ilic)</a>.</p>\n<p>It took me a week of hard work to implement this effect into WordPress. Some CSS rules were added, others slightly modified and some of them completely removed ! The JS is not the same at all ! The original effect is triggered with a function by clicking on a search input. This function relies on another script (<a href=\"https://github.com/desandro/classie#classie---class-helper-functions\" target=\"_blank\" rel=\"external noopener noreferrer\">classie – class helper functions</a>) to get the job done. I’ve removed them and created a simple JavaScript file that does the same job with 60 lines less code !</p>\n<p>I hope that this plugin will be useful for everyone using it. If you try it, don’t be shy and give me your feedback on the <a href=\"https://wordpress.org/support/plugin/full-screen-morphing-search/reviews/\" target=\"_blank\" rel=\"external noopener noreferrer\">repo</a> 🙂</p>\n",
      "date_published": "2020-04-28T00:00:00Z"
    }
  ]
}
