[{"0":"a-dedicated-site-for-blog-docs-documentation.md","1":{"frontmatter":{"title":"A dedicated site for Blog-Doc's documentation!","date":"2024/01/21","description":"the newly created site for Blog-Doc's documentation","featuredImage":"/static/img/pile-of-books.webp","tags":["Blog-Doc","Documentation"],"relatedPosts":["blog-doc-the-simplest-nodejs-cms-ssg","switch-themes-in-blog-doc"]},"content":"It's been a while since my last post - almost four and a half months to be precise!  \r\n[The previous post](/posts/create-a-simple-markdown-based-blog-in-nodejs), a detailed tutorial on creating a simple Markdown-based blog in Node.js, was quite an undertaking that consumed a significant amount of time and energy.  \r\nI doubt I'll be penning such lengthy posts anytime soon, and perhaps never again!\r\n\r\nSo, where have I been during this hiatus?  \r\nPrimarily, juggling between family, work, and my trusty keyboard.\r\n\r\nDuring this time, [Blog-Doc](https://github.com/LebCit/blog-doc) has undergone substantial evolution, prompting the need for a dedicated website for its documentation.  \r\nThe first order of business was finding a suitable template that aligned with my envisioned design - a layout commonly used for documentation:\r\n\r\n- Three columns on desktop: Main menu, Content, Table of contents\r\n- Two columns on tablet: Main menu, Table of contents at the top of Content\r\n- One column on mobile: Mobile menu with Table of contents at the top of Content\r\n\r\nSurprisingly, I couldn't locate a template that fit the bill. However, I stumbled upon the fantastic [Responsive Attributes](https://matthewjamestaylor.com/responsive-attributes) and used its guidance to craft the desired layout with minimal CSS footprint!\r\n\r\nWith the design in place, I seamlessly integrated it into Blog-Doc and generated the static site for Blog-Doc's documentation.  \r\nYou can check out the result by visiting [Blog-Doc's documentation site](https://blog-doc.pages.dev/) and see for yourself!\r\n"}},{"0":"create-a-simple-markdown-based-blog-in-nodejs.md","1":{"frontmatter":{"title":"Create a simple Markdown-based blog in Node.js","date":"2023/09/12","description":"the process of creating a simple Markdown  blog in Node.js","featuredImage":"","tags":["Development","Eta","Hono","Marked","Markdown","Node.js"],"relatedPosts":["blog-doc-a-tiny-and-dead-simple-ssg","blog-doc-the-simplest-nodejs-cms-ssg"]},"content":"\r\n## TOC (Table Of Contents)\r\n\r\n-   Intro\r\n-   [What is Markdown good for?](#markdown)\r\n-   [Converting Markdown to HTML.](#markdown-to-html)\r\n-   Using [Hono](https://hono.dev/) and [Eta](https://eta.js.org/) to render:\r\n    -   [The blog](#render-blog)\r\n    -   [A single blog post](#render-single-post-page)\r\n    -   [A single page](#render-single-post-page)\r\n-   [Blog-Doc](#blog-doc)\r\n\r\n## Intro\r\n\r\nA year ago, I wrote a short post about the same subject: [Markdown blog with EJS](/posts/markdown-blog-with-ejs).<br />\r\nThis year's post brings a lot of improvements.<br />\r\nFirst of all the stack has completely changed. We'll be using modern modules (Hono,[ Hono Node-Server](https://github.com/honojs/node-server), Eta and [Marked](https://marked.js.org/)) instead of old and aging ones (Express, EJS, Gray-Matter and Markdown-It). The benefit of this stack compared to the previous one is that we're using only 4 modules instead of 90 and the bundle size gets divided 12 times, from 862KB to 71KB!<br />\r\nThe content is organized in a better way, where each step is thoroughly explained, allowing the reader to easily understand the process.<br />\r\nThe code is written [asynchronously](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous), uses `import` statements instead of `require` and is split into reusable blocks to be maintainable.\r\n\r\n## What is Markdown good for? {#markdown}\r\n\r\nWhen a browser displays some content, it's rendering the `HTML` structure of a webpage along with its styles and scripts.<br />\r\n[HTML](https://html.spec.whatwg.org/dev/) is the Web's core markup language.<br />\r\nDevelopers use `HTML` to define elements, combine them and produce a document.<br />\r\nA document begins with `<!DOCTYPE html>` followed by the `<html>` element which includes a `<head>` and a `<body>`.<br />\r\nEach one of the last two elements contains other elements working together, like a painting, so we can see the whole picture.<br />\r\nLet's take a look at a basic `HTML` document:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\t<head>\r\n\t\t<!-- The title that appears in a browser's tab -->\r\n\t\t<title>My webpage title</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<!-- An H1 heading -->\r\n\t\t<h1>My webpage title</h1>\r\n\t\t<!-- A paragraph -->\r\n\t\t<p>\r\n\t\t\tThis is a paragraph with a link to a\r\n\t\t\t<!-- A link -->\r\n\t\t\t<a href=\"contact.html\">contact</a>\r\n\t\t\tform page.\r\n\t\t</p>\r\n\t\t<!-- this is a comment -->\r\n\t</body>\r\n</html>\r\n```\r\n\r\nAs you can see, the content of a webpage lives in the `<body>` and each `HTML` element begins with an opening tag `<tag>` and ends with a closing one `</tag>`.<br />\r\n_Nota bene: Some elements, [Void elements](https://html.spec.whatwg.org/dev/syntax.html#void-elements), don't have a closing tag._\r\n\r\nNow, imagine a webpage with a lot of content.<br />\r\nImagine how the structure would be huge, crowded and difficult to write...<br />\r\nIf you can't visualize it, right-click anywhere on this page then click on `View Page Source` and see for yourself...<br />\r\nThis is where [Markdown](https://daringfireball.net/projects/markdown/) comes in!\r\n\r\n> Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).\r\n\r\nSo instead of writing a complex structure, we just use plain text!<br />\r\nHow amazing is that?!<br />\r\nAnd this is why Markdown is gaining popularity among developers.<br />\r\n\r\nThere are many editors, online and offline, to use Markdown.<br />\r\nIn our case, a Node.js application that converts a Markdown file contents into data for a blog, we'll need the following:\r\n\r\n- A [Node.js](https://nodejs.org/en/download) version greater than 18.x\r\n- A code editor with Markdown support like [VS Code](https://code.visualstudio.com/), [VS Codium](https://vscodium.com/) or [Sublime Text](https://www.sublimetext.com/)...\r\n\r\nTo write in Markdown in one of those editors, simply create a file ending with the `.md` extension.<br />\r\nLet's create on the computer's desktop a folder named **node-markdown-blog**.<br />\r\nOpen this folder in your code editor and create a file named **from-markdown-to-html.md**.<br />\r\nCopy and paste the following code into this file and save:\r\n\r\n````markdown\r\n---\r\ntitle: From Markdown to HTML in Node.js\r\ndescription: A post about converting the contents of a Markdown file to HTML in a Node.js application\r\ndate: 2023-08-31\r\ntags: [Node.js, Markdown, HTML]\r\n---\r\n\r\n## Intro\r\n\r\nTo read the content of a Markdown file in Node.js,<br />\r\nwe need an interpreter that understands Markdown,<br />\r\nand can convert what he understood to HTML.<br />\r\nSo what we need is just like a translator,<br />\r\nwho can translate a context from one language to another.\r\n\r\n## The translator\r\n\r\nThere are many [Markdown to HTML translators](https://github.com/markdown/markdown.github.com/wiki/Implementations) out there.<br />\r\nSince we're building a Node.js app, we need a translator that works in this environnement.<br />  \r\nWe'll be using, the best one in my humble opinion for this task,<br />\r\n[Marked](https://github.com/markedjs/marked), a markdown parser and compiler.\r\n\r\n## Installation\r\n\r\nTo install Marked in a Node.js application,<br />\r\ntype the following command in the terminal of your code editor:\r\n\r\n```bash\r\nnpm install marked\r\n```\r\n\r\nYou now have a powerful Markdown converter at your service 😉\r\n\r\n## Usage\r\n\r\nTo start using Marked, all we have to do is to fill its `parse()` method with some Markdown.<br />\r\nIt's as simple as the following block of code:\r\n\r\n```js\r\nimport { marked } from 'marked'\r\nconst html = marked.parse('# An H1 heading converted from Markdown to HTML with Marked!')\r\n```\r\n\r\nThe output of the code above would be:\r\n\r\n```html\r\n<h1>An H1 heading converted from Markdown to HTML with Marked!</h1>\r\n```\r\n\r\nThat's all folks, CU!\r\n````\r\n\r\nIf you're using VS Code, like me, press `Ctrl + K` then press `V`, abracadabra!<br />\r\nYou can now see a preview of the Markdown file.<br />\r\nIf you look closer, the block that is delimited by a pair of 3 hyphens `---` is not being rendered.<br />\r\nThat's because it's a [YAML](https://yaml.org/) front matter and doesn't get parsed by a Markdown parser.<br />\r\nA front matter holds data in a Markdown file.<br />\r\nWe will see later how they will be used.\r\n\r\n\r\n## Converting Markdown to HTML {#markdown-to-html}\r\n\r\nWe have seen how to display a preview of a Markdown file, Let's now use Marked to get the `HTML` out of it.<br />\r\nFirst things first, we have to initialize our Node.js project.<br />\r\nType the following command in the terminal:\r\n\r\n```bash\r\nnpm init -y\r\n```\r\n\r\nThis will create a **package.json** file in the project:\r\n\r\n```json\r\n{\r\n  \"name\": \"markdown-blog\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\"\r\n}\r\n```\r\n\r\nThis file will hold all the information about our application, its scripts and dependencies.<br />\r\nNow install Marked with the following command:\r\n\r\n```bash\r\nnpm install marked\r\n```\r\n\r\nIf you have read the content of our Markdown file, you now know that we need to use the `parse()` method of Marked to get its corresponding `HTML`.<br />\r\nTo get there, we first have to instruct our application to read the content of the file and then to convert it to `HTML` with Marked.\r\n\r\nThe [file system](https://nodejs.org/api/fs.html#file-system) in Node.js allows us to interact with files.<br />\r\nThe only synchronous line that we will use in our code is the [readFileSync()](https://nodejs.org/api/fs.html#fsreadfilesyncpath-options) method of the `fs` module.<br />\r\nThe `readFileSync()` method returns the contents of a defined path, a file in our system, and this is exactly what we are looking for.\r\n\r\nCreate a file named **index.js**, this will be the main file of our application, also called the server file.<br />\r\nIf you look at **package.json** above, you'll see that there is a `main` property with a value of `index.js`.<br />\r\nNow you should remember that a Markdown parser doesn't parse a front matter, like we mentioned previously, so we must write a function that will do this job and make its data accessible.<br />\r\nIn **index.js** paste the following function:\r\n```js\r\nfunction parseFrontMatter(text, delimiter = \"---\") {\r\n\tconst lines = text.split(\"\\n\")\r\n\tconst frontmatter = {}\r\n\r\n\tlet i = 0\r\n\tif (!lines[i].startsWith(delimiter)) {\r\n\t\tthrow new Error(\"Front matter delimiter not found.\")\r\n\t}\r\n\r\n\ti++\r\n\twhile (i < lines.length && !lines[i].startsWith(delimiter)) {\r\n\t\tconst line = lines[i].trim()\r\n\t\tconst separatorIndex = line.indexOf(\":\")\r\n\t\tif (separatorIndex === -1) {\r\n\t\t\tthrow new Error(`Invalid front matter syntax: ${line}`)\r\n\t\t}\r\n\t\tconst key = line.slice(0, separatorIndex).trim()\r\n\t\tlet value = line.slice(separatorIndex + 1).trim()\r\n\r\n\t\t// Check if value is wrapped in brackets\r\n\t\tif (value.startsWith(\"[\") && value.endsWith(\"]\")) {\r\n\t\t\t// Remove brackets and split into array elements\r\n\t\t\tconst trimmedValue = value.slice(1, -1).trim()\r\n\t\t\tif (trimmedValue.length > 0) {\r\n\t\t\t\tvalue = trimmedValue.split(\",\").map((item) => item.trim())\r\n\t\t\t} else {\r\n\t\t\t\tvalue = []\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfrontmatter[key] = value\r\n\t\ti++\r\n\t}\r\n\r\n\tif (i === lines.length) {\r\n\t\tthrow new Error(\"End of front matter not found.\")\r\n\t}\r\n\r\n\tconst content = lines.slice(i + 1).join(\"\\n\")\r\n\r\n\treturn {\r\n\t\tfrontmatter,\r\n\t\tcontent,\r\n\t}\r\n}\r\n```\r\n\r\nThis function extracts front matter from a text and returns it as an [object](https://javascript.info/object) named `frontmatter`, along with the remaining `content` after the front matter.<br />\r\nIt verifies that the text begins with a front matter delimited by a pair of 3 hyphens `---` and that each property and value in the front matter are separated by a colon `:`.<br />\r\nIt also checks for any value in the front matter wrapped in square brackets `[ ]`. If so, it removes the brackets and splits the value by commas, creating an array of values, like the `tags` property in **from-markdown-to-html.md**.<br />\r\nFinally, the function returns a JavaScript object with two properties:\r\n\r\n1. `frontmatter` which is a JavaScript object allowing us to access the front matter data\r\n2. `content` which is a string that will be parsed with Marked to get the the corresponding `HTML`\r\n\r\nJust before jumping to the code, we must add a line to **package.json** to use `import` statements instead of `require`.<br />\r\nThis line will allow us to use [ES modules](https://nodejs.org/docs/latest-v18.x/api/esm.html). If you're new to the modules system, you should read this [tutorial](https://javascript.info/modules).<br />\r\nOpen **package.json** and add the following line `\"type\": \"module\"` just under `\"main\": \"index.js\"`, don't forget to add a coma at the end of each line and save `Ctrl + S`.\r\n\r\nNow that everything is in place, let's begin!<br />\r\nIn **index.js**, under the `parseFrontMatter()` function, `import` the `readFileSync()` method from the `fs` module to read the contents of our Markdown file then use the newly created function on the contents:\r\n\r\n```js\r\nfunction parseFrontMatter(text, delimiter = \"---\") {\r\n... // Code inside the function\r\n}\r\n\r\nimport { readFileSync } from \"node:fs\"\r\n\r\nconst contents = readFileSync(\"from-markdown-to-html.md\", \"utf-8\")\r\nconst data = parseFrontMatter(contents)\r\n```\r\n\r\nIf we [debug](https://code.visualstudio.com/Docs/editor/debugging) the code by setting a [breakpoint](https://code.visualstudio.com/Docs/editor/debugging#_breakpoints) in front of the `data` constant then [Step Over](https://code.visualstudio.com/Docs/editor/debugging#_debug-actions) it, we'll get the following output in the debug panel:\r\n\r\n<img src=\"/static/img/parse-front-matter-function-output.png\" class=\"img-responsive\" alt=\"Output of a function in the debug panel of VS Code\" />\r\n\r\nAs you can see, the returned variable, `data`, is an accessible object in which we have:\r\n\r\n1. The `content` of our Markdown file as a string\r\n2. Its `frontmatter` as an object with:\r\n    1. The `date`\r\n    2. The `description`\r\n    3. The `tags` as an array\r\n\r\nThis is just awesome! The most difficult and critical part of our application is done!<br />\r\nConcerning the debugging part,  VS Code has also a [Node.js debugging](https://code.visualstudio.com/docs/nodejs/nodejs-debugging) documentation.\r\n\r\nBack to the code, we are one step away from turning the `content` of the Markdown file to `HTML`.<br />\r\nAlways in **index.js**, we'll now `import` Marked to use its `parse()` method to finally get the `HTML` out of our Markdown file.<br />\r\nUpdate the code like so:\r\n\r\n```js\r\nfunction parseFrontMatter(text, delimiter = \"---\") {\r\n... // Code inside the function\r\n}\r\n\r\nimport { readFileSync } from \"node:fs\"\r\nimport { marked } from \"marked\"\r\n\r\nconst contents = readFileSync(\"from-markdown-to-html.md\", \"utf-8\")\r\nconst data = parseFrontMatter(contents)\r\nconst html = marked.parse(data.content) // Accessing data content with dot notation.\r\n```\r\n\r\nSince `data` is an object, we can [access its properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) with the dot notation or bracket notation.<br />\r\nNow, if you add a breakpoint in front of the `html` constant and run the debugger by hitting on `F5` then step over it, You'll notice that the `html` variable in the debug panel displays the returned `HTML` from the `content` of the Markdown file 🥳\r\n\r\n## Using Hono and Eta\r\n\r\nHaving all the ingredients at our disposal, it's  now time to cook and serve!<br />\r\nTo give our blog a nice design, download the free Bootstrap blog template [DevBlog](https://themes.3rdwavemedia.com/bootstrap-templates/personal/devblog-free-bootstrap-5-blog-template-for-developers/).<br />\r\nOnce downloaded and extracted, open the folder **devblog-bs5-v3.0** in your code editor.<br />\r\nDepending on your code editor, you can use an extension to launch a local server and display the template in your default browser.<br />\r\nIf you're using VS Code, you can use  [Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer) or [Live Preview](https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server) if you prefer to display the code in the workspace.<br />\r\nOr, you can simply browse the template's [live demo](https://themes.3rdwavemedia.com/demo/bs5/devblog/).\r\n\r\nLooking at the demo, locally or on the web, you can see that it has 3 pages:\r\n\r\n1. *Blog Home* to display the latest posts, corresponding to **index.html**\r\n2. *Blog Post* to display a single post, corresponding to **blog-post.html**\r\n3. *About Me* to display a single page, corresponding to **about.html**\r\n\r\nOpen the 3 files in your code editor and have a quick look at each page structure.<br />\r\nYou'll notice that they share almost the same `<head>`, **blog-post.html** has an additional line, and their `<body>` have the same `<header>` and the content of each page is wrapped inside a `<div class=\"main-wrapper\">` which holds the same `<footer>`.\r\n\r\nNow our goal is to write some files in Markdown and render:\r\n\r\n1. A list of the latest posts on the main route, or home\r\n2. Each post on a route matching the post's filename\r\n3. Each page on a route that matches the page's filename\r\n\r\nOur backend will use Hono as a [web framework](https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Web_frameworks) and Eta as a [template engine](/posts/templating-a-nodejs-app-with-ejs#template-engines).<br />\r\nBack then I used to prefer EJS, nowadays I recommend Eta because it's a faster, more lightweight, and more configurable EJS alternative, without any dependency!\r\n\r\nTo install Hono and Eta, type the following command in your terminal:\r\n\r\n```bash\r\nnpm install eta hono @hono/node-server\r\n```\r\n\r\nTo test our web framework, let's add the following code in **index.js** under everything else:\r\n\r\n```js\r\n... // All previous code\r\n\r\nimport { serve } from \"@hono/node-server\"\r\nimport { Hono } from \"hono\"\r\n\r\nconst app = new Hono()\r\napp.get(\"/\", (c) => c.text(\"Hono meets Node.js\"))\r\n\r\nserve(app, ({port}) => {\r\n\tconsole.log(`Listening on http://localhost:${port}`)\r\n})\r\n```\r\n\r\nThe code is simple, We have done the following:\r\n\r\n1. Imported Hono and its Node.js adapter\r\n2. Assigned the framework to a constant named `app`\r\n3. Defined a text to be displayed on the entry route `/`\r\n4. Served the `app` on a `port` that is `3000` by default\r\n\r\nType in the terminal `node index` and you'll get:\r\n\r\n```bash\r\nListening on http://localhost:3000\r\n```\r\n\r\nVisit the link in your browser and you'll see the defined text on the entry route.<br />\r\nTo stop the server press `Ctrl + C` to clear the terminal type `clear`.<br />\r\nGreat! Before going further, we should begin to organize our code because we can't put everything in **index.js**.<br />\r\nTo do so create the following:\r\n\r\n1. A **functions** folder 📁 that will hold various functions\r\n2. A **routes** folder 📁 that will hold the app's routes\r\n3. A **static** folder 📁 that will hold the frontend styles, scripts and images\r\n4. A **views** folder 📁 where the templates and the Markdown files will be stored\r\n5. Under the **views** folder create:\r\n    1. A **components** folder 📁 for the shared components of the app\r\n    2. A **layouts** folder 📁 for the different layouts of the app\r\n    3. A **pages** folder 📁 that will hold the Markdown files of the pages\r\n    4. A **posts** folder 📁 that will hold the Markdown files of the posts\r\n\r\nMove **from-markdown-to-html.md** inside the **posts** folder and you should have the following structure in alphabetical order under the main folder **node-markdown-blog**:\r\n\r\n```text\r\n📁 node-markdown-blog\r\n├── 📁 functions\r\n├── 📄 index.js\r\n├── 📁 node_modules\r\n├── 📄 package-lock.json\r\n├── 📄 package.json\r\n├── 📁 routes\r\n├── 📁 static\r\n└── 📂 views\r\n  ├── 📁 components\r\n  ├── 📁 layouts\r\n  ├── 📁 pages\r\n  ├── 📂 posts\r\n  │  └── 📄 from-markdown-to-html.md\r\n```\r\n\r\n### The blog {#render-blog}\r\n\r\nAs we have seen previously, the main route `/`, also known as the entry route or the home route, displays the most recent posts.<br />\r\nLet's begin by creating the shared components, then we'll move on to the layout of the main route or the blog.<br />\r\nWe know that we have a common `<head>`, `<header>` and `<footer>`.<br />\r\nCreate in the **components** folder 3 files:\r\n\r\n1. **head.html**\r\n2. **header.html**\r\n3. **footer.html**\r\n\r\nCopy inside each file the corresponding code:\r\n\r\n```html\r\n<head>\r\n\t<title>Home | Markdown-based blog</title>\r\n\r\n\t<!-- Meta -->\r\n\t<meta charset=\"utf-8\" />\r\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n\t<meta name=\"description\" content=\"List of the most recent posts\" />\r\n\t<link rel=\"shortcut icon\" href=\"/static/img/favicon.ico\" />\r\n\r\n\t<!-- FontAwesome JS-->\r\n\t<script defer src=\"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.2/js/all.min.js\"></script>\r\n\r\n\t<!-- Theme CSS -->\r\n\t<link id=\"theme-style\" rel=\"stylesheet\" href=\"/static/css/theme-1.css\" />\r\n</head>\r\n```\r\n\r\n```html\r\n<header class=\"header text-center\">\r\n\t<h1 class=\"blog-name pt-lg-4 mb-0\"><a class=\"no-text-decoration\" href=\"/\">My Markdown Blog</a></h1>\r\n\r\n\t<nav class=\"navbar navbar-expand-lg navbar-dark\">\r\n\t\t<button\r\n\t\t\tclass=\"navbar-toggler\"\r\n\t\t\ttype=\"button\"\r\n\t\t\tdata-bs-toggle=\"collapse\"\r\n\t\t\tdata-bs-target=\"#navigation\"\r\n\t\t\taria-controls=\"navigation\"\r\n\t\t\taria-expanded=\"false\"\r\n\t\t\taria-label=\"Toggle navigation\"\r\n\t\t>\r\n\t\t\t<span class=\"navbar-toggler-icon\"></span>\r\n\t\t</button>\r\n\r\n\t\t<div id=\"navigation\" class=\"collapse navbar-collapse flex-column\">\r\n\t\t\t<div class=\"profile-section pt-3 pt-lg-0\">\r\n\t\t\t\t<img class=\"profile-image mb-3 rounded-circle mx-auto\" src=\"/static/images/profile.png\" alt=\"image\" />\r\n\r\n\t\t\t\t<div class=\"bio mb-3\">\r\n\t\t\t\t\tHi, this is my Markdown blog. It's a Node.js app that I have created using Eta, Hono and Marked. You\r\n\t\t\t\t\tcan read more about the original application in the following link.\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<a href=\"https://github.com/LebCit/blog-doc\" target=\"_blank\">Find out more about Blog-Doc</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<!--//bio-->\r\n\t\t\t\t<ul class=\"social-list list-inline py-3 mx-auto\">\r\n\t\t\t\t\t<li class=\"list-inline-item\">\r\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fab fa-twitter fa-fw\"></i></a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li class=\"list-inline-item\">\r\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fab fa-linkedin-in fa-fw\"></i></a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li class=\"list-inline-item\">\r\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fab fa-github-alt fa-fw\"></i></a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li class=\"list-inline-item\">\r\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fab fa-stack-overflow fa-fw\"></i></a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li class=\"list-inline-item\">\r\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fab fa-codepen fa-fw\"></i></a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<!--//social-list-->\r\n\t\t\t\t<hr />\r\n\t\t\t</div>\r\n\t\t\t<!--//profile-section-->\r\n\r\n\t\t\t<ul class=\"navbar-nav flex-column text-start\">\r\n\t\t\t\t<li class=\"nav-item\">\r\n\t\t\t\t\t<a class=\"nav-link active\" href=\"/\">\r\n\t\t\t\t\t\t<i class=\"fas fa-home fa-fw me-2\"></i>\r\n\t\t\t\t\t\tBlog Home\r\n\t\t\t\t\t\t<span class=\"sr-only\">(current)</span>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"nav-item\">\r\n\t\t\t\t\t<a class=\"nav-link\" href=\"blog-post.html\">\r\n\t\t\t\t\t\t<i class=\"fas fa-bookmark fa-fw me-2\"></i>\r\n\t\t\t\t\t\tBlog Post\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"nav-item\">\r\n\t\t\t\t\t<a class=\"nav-link\" href=\"about.html\">\r\n\t\t\t\t\t\t<i class=\"fas fa-user fa-fw me-2\"></i>\r\n\t\t\t\t\t\tAbout Me\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\r\n\t\t\t<div class=\"my-2 my-md-3\">\r\n\t\t\t\t<a class=\"btn btn-primary\" href=\"https://themes.3rdwavemedia.com/\" target=\"_blank\">Get in Touch</a>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</nav>\r\n</header>\r\n```\r\n\r\n```html\r\n<footer class=\"footer text-center py-2 theme-bg-dark\">\r\n\t<!--/* This template is free as long as you keep the footer attribution link. If you'd like to use the template without the attribution link, you can buy the commercial license via our website: themes.3rdwavemedia.com Thank you for your support. :) */-->\r\n\t<small class=\"copyright\">\r\n\t\tDesigned with\r\n\t\t<span class=\"sr-only\">love</span>\r\n\t\t<i class=\"fas fa-heart\" style=\"color: #fb866a\"></i>\r\n\t\tby\r\n\t\t<a href=\"https://themes.3rdwavemedia.com\" target=\"_blank\">Xiaoying Riley</a>\r\n\t\tfor developers\r\n\t\t<!-- You can remove or modify the following line, including this comment, but everything before must stay in place. -->\r\n\t\t<br />\r\n\t\tNode.js App developed by\r\n\t\t<a href=\"https://lebcit.github.io/\" target=\"_blank\">LebCit</a>\r\n\t</small>\r\n</footer>\r\n```\r\n\r\nWe have slightly modified the original code of the three components. The important part to notice is that we have replaced `assets/` by `/static/` since this folder will serve the frontend's static assets.<br />\r\nPlease note that in **head.html**, I've kept the default theme:\r\n\r\n```html\r\n<!-- Theme CSS -->\r\n<link id=\"theme-style\" rel=\"stylesheet\" href=\"/static/css/theme-1.css\" />\r\n```\r\n\r\nCreate inside the **static** folder a **css** folder, then copy inside it the **theme-1.css** file from **devblog-bs5-v3.0/assets/css/**.<br />\r\n*Nota bene: You can of course choose anyone of the eight available color schemes that you like, but keep in mind that you'll have to replace the theme number according to your choice and import the corresponding file!*\r\n\r\nOur principal components are ready, we can attack the layout of the blog.<br />\r\nThe blog is made of 2 blocks each one inside a `<section>` tag.<br />\r\nThe first section is a call to action displaying the blog title, its description, a welcome message and a subscription form.<br />\r\nThe second section displays the latest posts with a navigation at their bottom to visit previous posts.<br />\r\nTo keep this tutorial as simple as possible, and since our goal is to create a simple Markdown-based blog with Node.js, I won't implement the subscription form or the posts' navigation.<br />\r\nInside the **layouts** folder, create a **base.html** file and paste the following code inside it:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\t<!-- Include the content of head.html file here -->\r\n\t<%~ include('../components/head.html', it) %>\r\n\t<body>\r\n\t\t<!-- Include the content of header.html file here -->\r\n\t\t<%~ include('../components/header.html') %>\r\n\t\t<div class=\"main-wrapper\">\r\n\t\t\t<!-- Here we open the if...else statement @see https://javascript.info/ifelse -->\r\n\t\t\t<% if (it.mainRoute) { %>\r\n\t\t\t<!-- If we are on the main route, the route that displays the list of posts -->\r\n\r\n\t\t\t<!-- BEGINNING OF THE BLOG'S STRUCTURE -->\r\n\r\n\t\t\t<!-- Start blog's intro -->\r\n\t\t\t<section class=\"cta-section theme-bg-light py-5\">\r\n\t\t\t\t<div class=\"container text-center single-col-max-width\">\r\n\t\t\t\t\t<h2 class=\"heading\">Markdown-based blog - A Markdown Blog Made With Node.js</h2>\r\n\t\t\t\t\t<div class=\"intro\">Welcome to my blog. Hope that you'll find useful information in my posts.</div>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t\t<!-- End blog's intro -->\r\n\r\n\t\t\t<!-- Start blog's posts' list -->\r\n\t\t\t<section class=\"blog-list px-3 py-5 p-md-5\">\r\n\t\t\t\t<div class=\"container single-col-max-width\">\r\n\t\t\t\t\t<!-- Include the content of index.html file here -->\r\n\t\t\t\t\t<%~ include('./index.html', it) %>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t\t<!-- End blog's posts' list -->\r\n\r\n\t\t\t<!-- ENDING OF THE BLOG'S STRUCTURE -->\r\n\r\n\t\t\t<% } else { %>\r\n\t\t\t<!-- Else we are not on the main route, we are on a route that displays a Markdown file -->\r\n\r\n\t\t\t<!-- Start Markdown file content -->\r\n\r\n\t\t\t<!-- Include the content of markdown.html file here -->\r\n\t\t\t<%~ include('./markdown.html', it) %>\r\n\r\n\t\t\t<!-- End Markdown file content -->\r\n\r\n\t\t\t<% } %>\r\n\t\t\t<!-- Here we close the if...else statement @see https://javascript.info/ifelse -->\r\n\r\n\t\t\t<!-- Start footer -->\r\n\r\n\t\t\t<!-- Include the content of footer.html file here -->\r\n\t\t\t<%~ include('../components/footer.html') %>\r\n\r\n\t\t\t<!-- End footer -->\r\n\t\t</div>\r\n\r\n\t\t<!-- Bootstrap's JavaScript -->\r\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\r\n\t</body>\r\n</html>\r\n```\r\n\r\nDon't be scared by Eta markup, every single step is commented on, It's pretty straightforward if you read it carefully!<br />\r\nIf you look closely, we have used plain `JavaScript`, like the [`if...else` statement](https://javascript.info/ifelse), inside an `HTML` file without a `<script>` tag. This is one of Eta's powers.<br />\r\nWe also have used the `include()` function of Eta to include a [partial](https://eta.js.org/docs/intro/template-syntax#partials-and-layouts) in a desired location by indicating its [relative path](https://www.w3schools.com/Html/html_filepaths.asp).<br />\r\nConcerning the `it` variable, it's an object containing the data that we pass on a route to a template, we will see `it` in action shortly.<br />\r\nDid you notice that we have included 2 templates, `index.html` and `markdown.html`, that do not exist?<br />\r\nGo ahead and create them in the **layouts** folder, the same folder where **base.html** is located.\r\n\r\nFor now, the main route `/` displays a text message as we can read in **index.js**:\r\n\r\n```js\r\napp.get(\"/\", (c) => c.text(\"Hono meets Node.js\"))\r\n```\r\n\r\nLet's dive into the blog transformation.<br />\r\nFor that we will need the following:\r\n\r\n1. A function to get the Markdown files from their respective directory. The directory could be the **pages** folder or the **posts** folder.\r\n2. A function to get the Markdown data from the Markdown files depending on their directory.\r\n3. A function that returns the posts' data and sorts them in chronological order, from the newest to the oldest.\r\n4. While at it, a function that returns the pages' data.\r\n5. A route that renders a template to display all the posts.\r\n\r\nFor simplicity and elegance, I'll wrap those functions with the previous one `parseFrontMatter()` under a [class](https://javascript.info/class).<br />\r\nIn the **functions** folder, create a file named **node-markdown-blog.js** and paste the following code inside it :\r\n\r\n```js\r\nimport { readFileSync } from \"node:fs\"\r\nimport { readdir } from \"node:fs/promises\"\r\n\r\nclass NodeMarkdownBlog {\r\n\t// Method to parse front-matter from Markdown files.\r\n\tparseFrontMatter(text, delimiter = \"---\") {\r\n\t\tconst lines = text.split(\"\\n\")\r\n\t\tconst frontmatter = {}\r\n\r\n\t\tlet i = 0\r\n\t\tif (!lines[i].startsWith(delimiter)) {\r\n\t\t\tthrow new Error(\"Front matter delimiter not found.\")\r\n\t\t}\r\n\r\n\t\ti++\r\n\t\twhile (i < lines.length && !lines[i].startsWith(delimiter)) {\r\n\t\t\tconst line = lines[i].trim()\r\n\t\t\tconst separatorIndex = line.indexOf(\":\")\r\n\t\t\tif (separatorIndex === -1) {\r\n\t\t\t\tthrow new Error(`Invalid front matter syntax: ${line}`)\r\n\t\t\t}\r\n\t\t\tconst key = line.slice(0, separatorIndex).trim()\r\n\t\t\tlet value = line.slice(separatorIndex + 1).trim()\r\n\r\n\t\t\t// Check if value is wrapped in brackets\r\n\t\t\tif (value.startsWith(\"[\") && value.endsWith(\"]\")) {\r\n\t\t\t\t// Remove brackets and split into array elements\r\n\t\t\t\tconst trimmedValue = value.slice(1, -1).trim()\r\n\t\t\t\tif (trimmedValue.length > 0) {\r\n\t\t\t\t\tvalue = trimmedValue.split(\",\").map((item) => item.trim())\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvalue = []\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfrontmatter[key] = value\r\n\t\t\ti++\r\n\t\t}\r\n\r\n\t\tif (i === lines.length) {\r\n\t\t\tthrow new Error(\"End of front matter not found.\")\r\n\t\t}\r\n\r\n\t\tconst content = lines.slice(i + 1).join(\"\\n\")\r\n\r\n\t\treturn {\r\n\t\t\tfrontmatter,\r\n\t\t\tcontent,\r\n\t\t}\r\n\t}\r\n\r\n\t// Method to get files from their directory recursively.\r\n\tasync getFiles(dirName) {\r\n\t\tlet files = []\r\n\t\tconst items = await readdir(dirName, { withFileTypes: true })\r\n\r\n\t\ttry {\r\n\t\t\tfor (const item of items) {\r\n\t\t\t\tif (item.isDirectory()) {\r\n\t\t\t\t\tfiles = [...files, ...(await getFiles(`${dirName}/${item.name}`))]\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfiles.push(`${dirName}/${item.name}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error)\r\n\t\t}\r\n\r\n\t\treturn files\r\n\t}\r\n\r\n\t// Method to get the pages and posts data.\r\n\tasync getMarkdownData(dirname) {\r\n\t\tconst files = await getFiles(dirname)\r\n\t\tconst mdFiles = files.filter((file) => file.endsWith(\".md\"))\r\n\t\tconst data = []\r\n\r\n\t\tmdFiles.forEach((file) => {\r\n\t\t\tconst fileName = file.split(\"/\").pop()\r\n\t\t\tconst contents = readFileSync(file, \"utf-8\")\r\n\t\t\tconst fileData = parseFrontMatter(contents)\r\n\t\t\tconst filePath = `${dirname}/${fileName}`\r\n\t\t\tconst fileDir = filePath.split(\"/\")[1]\r\n\t\t\tconst obj = { 0: fileName, 1: fileData }\r\n\t\t\tobj.path = filePath\r\n\t\t\tobj.dir = fileDir\r\n\t\t\tdata.push(obj)\r\n\t\t})\r\n\r\n\t\treturn data\r\n\t}\r\n\r\n\t// Method to get the pages data.\r\n\tgetPages() {\r\n\t\tconst pagesData = getMarkdownData(\"views/pages\")\r\n\t\treturn pagesData\r\n\t}\r\n\r\n\t// Method to get the posts data.\r\n\tasync getPosts() {\r\n\t\tconst postsData = await getMarkdownData(\"views/posts\")\r\n\t\tconst newPostsData = postsData\r\n\t\t\t.map((obj) => {\r\n\t\t\t\treturn { ...obj, date: new Date(obj[1].frontmatter.date) }\r\n\t\t\t})\r\n\t\t\t.sort((objA, objB) => Number(objB.date) - Number(objA.date))\r\n\r\n\t\treturn newPostsData\r\n\t}\r\n}\r\n\r\nexport const { parseFrontMatter, getFiles, getMarkdownData, getPages, getPosts } = new NodeMarkdownBlog()\r\n```\r\n\r\nWe have created a class `NodeMarkdownBlog()` containing the desired functions then [export](https://javascript.info/import-export) and [destructurize](https://javascript.info/destructuring-assignment) it to make its methods directly available outside the file.<br >\r\nYou already know how `parseFrontMatter()` works.<br />\r\nThe `getFiles()` function returns all the files inside a particular folder as an array, we just have to provide the folder's path.<br />\r\nWhy having a `getMarkdownData()` method since we already have `parseFrontMatter()`?<br />\r\nSimply because we need to know some more information about a Markdown file to render it on the frontend.<br />\r\nThe `getMarkdownData()` method uses the `getFiles()` and `parseFrontMatter()` methods to read and parse Markdown files, but it also gives us the file path, its directory and its name then returns all of them as an accessible object, we'll see that in a moment.<br />\r\nFinally, the `getPages()` and `getPosts()` methods use `getMarkdownData()` and return as their names indicate the data of the Markdown files respectively in the **pages** and **posts** folders.<br />\r\nNow let's create the logic that will display the available Markdown files inside the **posts** folder, we only have one for now, and render them on the main route or entry route `/`.<br>\r\nCreate in the **routes** folder a file named **mainRoute.js** and add to it the following code:\r\n\r\n```js\r\nimport { join } from \"path\"\r\nimport { Hono } from \"hono\"\r\nimport { Eta } from \"eta\"\r\nimport { getPosts } from \"../functions/node-markdown-blog.js\"\r\n\r\nconst app = new Hono()\r\nconst eta = new Eta({ views: join(process.cwd(), \"views\") })\r\n\r\nexport const mainRoute = app.get(\"/\", async (c) => {\r\n\t// Main Route data\r\n\tconst data = {\r\n\t\ttitle: \"Home\",\r\n\t\tdescription: \"List of the most recent posts\",\r\n\t}\r\n\r\n\tconst res = eta.render(\"layouts/base.html\", {\r\n\t\t// Passing Route data\r\n\t\tmainRoute: true,\r\n\t\t// Passing document data\r\n\t\tdata: data,\r\n\t\tposts: await getPosts(),\r\n\t\t// Passing needed settings for the template\r\n\t\tsiteTitle: \"Markdown-based blog\",\r\n\t})\r\n\treturn c.html(res)\r\n})\r\n``` \r\n\r\nThis block of code begins by importing the necessary modules and initializing an instance of `Hono()` and another one of `Eta()`.<br />\r\nThe `eta` constant defines the `views` folder as the one where the templates are located.<br />\r\nThe `mainRoute` constant is exported to be used outside this file. Inside it, a response constant `res` renders the template located in `views/layouts/base.html` where some data are passed and can be accessed with the `it` variable.<br />\r\nFinally, the response constant `res` is returned as `HTML` on the defined route `/`.\r\n\r\nNow change the line 2 of **head.html**, the `<title>` tag, to:\r\n\r\n```html\r\n<title><%= it.data.title %> | <%= it.siteTitle %></title>\r\n```\r\n\r\nAlso change the line 8 of **head.html**, the `<meta>` description tag, to:\r\n\r\n```html\r\n<meta name=\"description\" content=\"<%= it.data.description %>\" />\r\n```\r\n\r\nThose changes will allow us to use the defined `title`, `description` and `siteTitle` for each route. This way, we use only one head that will dynamically assign the correct variables for each document.\r\n\r\nBack to **base.html** where we've defined a template named **index.html** for the main route and created it in the same folder as **base.html**, open this **index.html** file and add the following code:\r\n\r\n```html\r\n<% it.posts.forEach(post => { %>\r\n\r\n<!-- GETTING THE DATA OF EACH POST -->\r\n\r\n<!-- Get the Markdown filename without its extension -->\r\n<% const postFilename = post[0].replace(\".md\", \"\") %>\r\n\r\n<!-- Get the Markdown post title from its front matter -->\r\n<% const postTitle = post[1].frontmatter.title %>\r\n\r\n<!-- Get the post date from its front matter -->\r\n<% const postDate = post[1].frontmatter.date %>\r\n\r\n<!-- Get the post description from its front matter -->\r\n<% const postDescription = post[1].frontmatter.description %>\r\n\r\n<!-- Get the post tags from its front matter -->\r\n<% const postTags = post[1].frontmatter.tags %>\r\n\r\n<div class=\"item mb-5\">\r\n\t<div class=\"row g-3 g-xl-0\">\r\n\t\t<div class=\"col-2 col-xl-3\">\r\n\t\t\t<img class=\"img-fluid post-thumb\" src=\"assets/images/blog/blog-post-thumb-1.jpg\" alt=\"image\" />\r\n\t\t</div>\r\n\t\t<div class=\"col\">\r\n\t\t\t<h3 class=\"title mb-1\">\r\n\t\t\t\t<a class=\"text-link\" href=\"/posts/<%= postFilename %>\"><%= postTitle %></a>\r\n\t\t\t</h3>\r\n\t\t\t<div class=\"meta mb-1\">\r\n\t\t\t\t<span class=\"date\"><%= postDate %></span>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<!-- Start post tag(s) -->\r\n\t\t\t\t\t<% postTags.forEach(tag => { %>\r\n\t\t\t\t\t<!-- Start each tag markup -->\r\n\t\t\t\t\t<%= tag %>\r\n\t\t\t\t\t<!-- End each tag markup -->\r\n\t\t\t\t\t<% }) %>\r\n\t\t\t\t\t<!-- End post tag(s) -->\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"intro\"><%= postDescription %></div>\r\n\t\t\t<a class=\"text-link\" href=\"/posts/<%= postFilename %>\">Read more &rarr;</a>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<% }) %>\r\n```\r\n\r\nUsing a [forEach()](https://javascript.info/array-methods#iterate-foreach) loop, thanks to Eta, we define the markup for each post preview on the homepage.<br>\r\nNow, to see what our homepage looks like, remove everything from **index.js** and paste the following code:\r\n\r\n```js\r\nimport { Hono } from \"hono\"\r\nimport { serveStatic } from \"@hono/node-server/serve-static\"\r\nimport { serve } from \"@hono/node-server\"\r\n\r\nconst app = new Hono()\r\n\r\n// Serve Static files\r\napp.use(\"/static/*\", serveStatic({ root: \"./\" }))\r\n\r\n// Routes\r\nimport { mainRoute } from \"./routes/mainRoute.js\"\r\n\r\napp.route(\"/\", mainRoute)\r\n\r\nserve(app, ({ port }) => {\r\n\tconsole.log(`Listening on http://localhost:${port}`)\r\n})\r\n```\r\n\r\nType `node index` in the terminal and visit the link, abracadabra!<br />\r\nI know that some elements are missing and that the footer is not at the bottom. It's okay, don't worry, we'll fix that later on.\r\n\r\nOkay, but you must be asking yourself where those variables defined in **index.html** came from?!<br />\r\nDo you remember that in **mainRoute.js** we have passed to the template, in the data object, a `posts` property with a value of `await getPosts()` and that in the template we have used a `forEach()` loop on those `posts`?<br />\r\nLet's test it. Add to **mainRoute.js** under the last `import` the following line:\r\n\r\n```js\r\nconst test = await getPosts()\r\n```\r\n\r\nAdd a breakpoint in front of this line and launch the debugger then step over it. Look at the `test` variable in the debug panel and you'll see how every post is returned inside an array as an accessible object like this image:\r\n\r\n<img src=\"/static/img/get-posts-function-output.png\" class=\"img-responsive\" alt=\"Output of a function in the debug panel of VS Code\" />\r\n\r\nSo each post is returned as an object containing:\r\n\r\n1. The post filename with its extension at [index](https://javascript.info/array) 0\r\n2. An object returned by `parseFrontMatter()` at index 1\r\n3. A `dir` and `path` properties, directly accessible\r\n\r\nNow remove or [comment](https://javascript.info/comments) on this added line since we don't need it in the code.\r\n\r\n### A single blog post, a single page {#render-single-post-page}\r\n\r\nIn this section, we will learn how to render a post and a page on the frontend and we will fix the issues of the previous section regarding the missing elements and the footer's position.<br />\r\nSo why do we have a separate section in the table of contents for rendering a page?<br />\r\nIt's just to let you know ahead that you'll be able to render posts as well as pages.\r\n\r\nIf you look at the structure of **blog-post.html** in **bevblog-bs5-v3.0**, you'll see that after the `<div class=\"main-wrapper\">`, that we already have in **base.html**, each post is made of:\r\n\r\n1. An `<article>` tag followed by a `<div class=\"container ...\"` in which we have:\r\n    1. A post `<header>`\r\n    2. A `<div class=\"blog-post-body\">`\r\n    3. A posts navigation\r\n    4. A comments section\r\n2. A promo `<section>`\r\n\r\nI will only include the post header and body, the posts' navigation and comments section are outside the scope of this tutorial, feel free to include the promo section by copying its `HTML` and pasting it after the article closing tag `</article>`.<br />\r\nWith this decision, the **about.html** file representing a page has now a very close design to the post. I will use the post structure for both of them to keep this tutorial as simple as possible.<br />\r\nFor the blog, I started with the template, Usually, we start with the route to pass the variables then we construct the template.<br />\r\nCreate a **markdownRoute.js** in the **routes** folder and add to it the following code:\r\n\r\n```js\r\nimport { join } from \"path\"\r\nimport { Hono } from \"hono\"\r\nimport { Eta } from \"eta\"\r\nimport { marked } from \"marked\"\r\nimport { getPages, getPosts } from \"../functions/node-markdown-blog.js\"\r\n\r\nconst app = new Hono()\r\nconst eta = new Eta({ views: join(process.cwd(), \"views\") })\r\n\r\nexport const markdownRoute = app.get(\"/:folder/:filename\", async (c, next) => {\r\n\t// Merge the pages and the posts arrays into a single array named mdFiles\r\n\tconst pages = await getPages()\r\n\tconst posts = await getPosts()\r\n\tconst mdFiles = pages.concat(posts)\r\n\r\n\tconst currentFile = mdFiles.find(\r\n\t\t(file) => file.path === `views/${c.req.param(\"folder\")}/${c.req.param(\"filename\")}.md`\r\n\t)\r\n\r\n\tif (currentFile) {\r\n\t\tconst fileData = currentFile[1].frontmatter\r\n\t\tconst fileContent = marked.parse(currentFile[1].content)\r\n\t\tconst fileDirectory = currentFile.dir\r\n\t\tconst res = eta.render(\"layouts/base.html\", {\r\n\t\t\t// Passing Route data\r\n\t\t\tmdRoute: true,\r\n\t\t\t// Passing Markdown file data\r\n\t\t\tdata: fileData,\r\n\t\t\tcontent: fileContent,\r\n\t\t\tdirname: fileDirectory,\r\n\t\t\t// Passing needed settings for the template\r\n\t\t\tsiteTitle: \"Markdown-based blog\",\r\n\t\t})\r\n\t\treturn c.html(res)\r\n\t} else {\r\n\t\t// Proceed to the 404 route if no file is found\r\n\t\tawait next()\r\n\t}\r\n})\r\n```\r\n\r\nHere we did the following:\r\n\r\n1. Initialize Hono and Eta like previously. Import Marked, the pages and the posts\r\n2. Export a `markdownRoute` constant to be used outside this file\r\n3. Define a dynamic path `\"/:folder/:filename\"` that will look for a filename in a folder\r\n4. [Merge](https://javascript.info/array-methods#concat) the pages and posts in a `mdFiles` array\r\n5. The `currentFile` looks for an existing file matching the folder (**pages** or **posts**) and the filename\r\n6. If the file exists, we pass the desired variables inside the template and return its `HTML`\r\n7. Otherwise, the `404 Not Found` message will be displayed\r\n\r\nFor this route to work on the frontend, we must call it inside the server file **index.js** like so:\r\n\r\n```js\r\n// Add this line under: import { mainRoute }...\r\nimport { markdownRoute } from \"./routes/markdownRoute.js\"\r\n\r\n// Add this line under: app.route(\"/\", mainRoute)\r\napp.route(\"/\", markdownRoute)\r\n```\r\n\r\nTo attach an image to a Markdown file, just add an `image` property to the file's front matter.<br />\r\nWe can also add an `imageAlt` (alternative text) and `imageCredit` properties.<br />\r\nIt's always good to give credit where credit is due!<br >\r\nDownload the medium size of the following [image from Unsplash](https://unsplash.com/photos/Fi-GJaLRGKc) and save it inside the **/static/img/** folder of our application.<br />\r\nLet's add those properties to the front matter of our Markdown file like so:\r\n\r\n```yaml\r\n---\r\ntitle: From Markdown to HTML in Node.js\r\ndescription: A post about converting the contents of a Markdown file to HTML in a Node.js application\r\ndate: 2023-08-31\r\ntags: [Node.js, Markdown, HTML]\r\nimage: /static/img/pankaj-patel-Fi-GJaLRGKc-unsplash.jpg\r\nimageAlt: JavaScript code inside ES6 templates by Pankaj Patel\r\nimageCredit: https://unsplash.com/@pankajpatel\r\n---\r\n```\r\n\r\nYou can, of course, put the direct link to an image instead of downloading it and saving it in the **img** folder.<br />\r\nAs an example, we could have put in front of the `image` property the following link:\r\n\r\n```yaml\r\nimage: https://source.unsplash.com/Fi-GJaLRGKc\r\n```\r\n\r\nThe template that renders Markdown files in our application is **markdown.html**, Open it and paste the following code:\r\n\r\n```html\r\n<article class=\"blog-post px-3 py-5 p-md-5\">\r\n\t<div class=\"container single-col-max-width\">\r\n\t\t<header class=\"blog-post-header\">\r\n\t\t\t<h2 class=\"title mb-2\"><%= it.data.title %></h2>\r\n\t\t\t<h3><%= it.data.description %></h3>\r\n\t\t\t<% if (it.dirname === \"posts\") { %>\r\n\t\t\t<div class=\"meta mb-3\">\r\n\t\t\t\t<span class=\"date\"><%= it.data.date %></span>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<!-- Start post tag(s) -->\r\n\t\t\t\t\t<% it.data.tags.forEach(tag => { %>\r\n\t\t\t\t\t<!-- Start each tag markup -->\r\n\t\t\t\t\t<%= tag %>\r\n\t\t\t\t\t<!-- End each tag markup -->\r\n\t\t\t\t\t<% }) %>\r\n\t\t\t\t\t<!-- End post tag(s) -->\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<% } %>\r\n\t\t</header>\r\n\r\n\t\t<div class=\"blog-post-body\">\r\n\t\t\t<!-- Markdown file image -->\r\n\t\t\t<figure class=\"blog-banner\">\r\n\t\t\t\t<a href=\"<%= it.data.imageCredit %>\" target=\"_blank\">\r\n\t\t\t\t\t<img class=\"img-fluid\" src=\"<%= it.data.image %>\" alt=\"<%= it.data.imageAlt %>\" />\r\n\t\t\t\t</a>\r\n\t\t\t\t<figcaption class=\"mt-2 text-center image-caption\">\r\n\t\t\t\t\tImage Credit:\r\n\t\t\t\t\t<a class=\"theme-link\" href=\"<%= it.data.imageCredit %>\" target=\"_blank\"><%= it.data.imageAlt %></a>\r\n\t\t\t\t</figcaption>\r\n\t\t\t</figure>\r\n\r\n\t\t\t<!-- Markdown file content -->\r\n\t\t\t<%~ it.content %>\r\n\t\t</div>\r\n\t</div>\r\n</article>\r\n```\r\n\r\nLook closely at the `<header>`, the `date` and `tags` will only be displayed if the file's directory is `posts`.<br />\r\nIn other words, if the file is a post display the date and tags otherwise don't, and that's because a page doesn't usually have those properties in its front matter.<br />\r\nType `node index` in the terminal, follow the link and click on the link of our only article or its **Read more &rarr;** button, abracadara!\r\n\r\nNow, let's fix the image of the post preview on the blog.<br />\r\nFor this, add the following variables under the existing ones in **index.html**:\r\n\r\n```html\r\n<!-- Get the post image from its front matter -->\r\n<% const postImage = post[1].frontmatter.image %>\r\n\r\n<!-- Get the post image alternative text from its front matter -->\r\n<% const postImageAlt = post[1].frontmatter.imageAlt %>\r\n```\r\n\r\nOne more adjustment and our blog will render the image of a post.<br />\r\nAlways in **index.html** make the following modification:\r\n\r\n```html\r\n<!-- Replace this line -->\r\n<img class=\"img-fluid post-thumb\" src=\"assets/images/blog/blog-post-thumb-1.jpg\" alt=\"image\" />\r\n<!-- By the following line -->\r\n<img class=\"img-fluid post-thumb\" src=\"<%= postImage %>\" alt=\"<%= postImageAlt %>\" />\r\n```\r\n\r\nIf the server is still running, restart it by pressing `Ctrl + C` then type `node index` in the terminal.<br />\r\nThe defined image of a post is now correctly displayed in the post's preview on the blog.\r\n\r\nTo fix the footer's position on the blog, you must add at least two more posts to the blog, I'll leave this exercise to you so you can familiarize yourself with the process of creating a blog post.<br />\r\nConcerning the profile image in **header.html**, you can download any image that suits your needs into the **img** folder and replace **profile.png** with the filename of the downloaded one.<br />\r\nDon't forget to modify in **header.html** the social media icons and links to yours. Also, change the menu titles and links in **header.html** according to your needs.\r\n\r\nFinally, the process of creating a page is the same as creating a post. The only difference is that the page's front matter doesn't have a `date` or `tags` properties.<br />\r\nAs an example, the following front matter for a page:\r\n\r\n```yaml\r\n---\r\ntitle: The title of the page\r\ndescription: The description of the page's contents\r\nimage: The path or URL to the page's image\r\nimageAlt: The alternative text of the image\r\nimageCredit: The link to the image or its author\r\n---\r\n```  \r\n\r\n## Blog-Doc {#blog-doc}\r\n\r\nThis tutorial is a simplified approach to how the blog, the pages and the posts are rendered on the frontend in [Blog-Doc](https://github.com/LebCit/blog-doc): The simplest Node.js CMS and SSG!<br />\r\nBlog-Doc allows you to create a working site without touching a line of code and to choose the look of your site from [the available themes](https://github.com/LebCit/blog-doc#themes).<br />\r\nSoon, the template used for this tutorial will be fully integrated into Blog-Doc as its third theme!<br />\r\nIf you have a GitHub account, please consider giving a star to Blog-Doc and also for the [GitHub repository of this tutorial](https://github.com/LebCit/node-markdown-blog) where you can ask me anything about it in the [Q&A section of the discussions](https://github.com/LebCit/node-markdown-blog/discussions/categories/q-a).\r\n\r\nI've dedicated one week and a half, from 31 August to 11 September, of my free time to write this long and detailed tutorial.<br />\r\nIf you read it on [my Hashnode blog](https://lebcit.hashnode.dev/) and found it useful, please consider liking it and leaving a little comment.<br />\r\nAnyway, thank you for your time and patience, I hope that this tutorial will be useful and instructive in many ways for all its readers."}},{"0":"switch-themes-in-blog-doc.md","1":{"frontmatter":{"title":"Switch themes in Blog-Doc!","date":"2023/08/27","description":"the theming feature in Blog-Doc","featuredImage":"/static/img/colorful-lanterns-hanging-on-a-string.avif","tags":["Blog-Doc","CMS","SSG","Theme","Node.js"],"relatedPosts":["from-145-to-7"]},"content":"I've released the [new version of Blog-Doc](https://github.com/LebCit/blog-doc/releases/tag/v2.0.0) about a month ago.\r\nSince then, I've decided that Blog-Doc must have a feature that allows the user to change the look and feel of the generated static site with ease.\r\n\r\nThis decision forced me to [modify the architecture of Blog-Doc](https://github.com/LebCit/blog-doc/releases/tag/v2.2.0) in a way that will preserve the data while switching from one theme to another and keep all the functionalities working regardless of the chosen design.\r\n\r\nBlog-Doc ships with a default theme based on the [Responsive Side Menu Layout of Pure.css](https://purecss.io/layouts/side-menu/).<br />\r\nIn the past, I've developed a WordPress theme based on the [Clean Blog](https://startbootstrap.com/theme/clean-blog) from Start Bootstrap. Now, it's the first available theme in Blog-Doc.\r\n\r\nThe following 30-second video shows how easy it is to switch between themes in [Blog-Doc](https://github.com/LebCit/blog-doc).\r\n\r\n<style>\r\n  .container {\r\n  position: relative;\r\n  overflow: hidden;\r\n  width: 100%;\r\n  padding-top: 56.25%; /* 16:9 Aspect Ratio (divide 9 by 16 = 0.5625) */\r\n}\r\n/* Then style the iframe to fit in the container div with full height and width */\r\n.responsive-iframe {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n<div class=\"container\">\r\n<iframe class=\"responsive-iframe\" src=\"https://www.youtube.com/embed/qaulkcZ-yu8?si=Ptq9mGrwU0hj9Uo1\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\r\n</iframe>\r\n</div>\r\n\r\nIf you ever code a theme for Blog-Doc and wish to list it among [the available themes](https://github.com/LebCit/blog-doc#themes), you can let me know in the Discussions of Blog-Doc's repository under the [Ideas](https://github.com/LebCit/blog-doc/discussions/categories/ideas) category.<br />\r\nPlease keep in mind that Blog-Doc themes MUST only use plain JavaScript and cannot contain any code or image(s) that have publishing and/or distribution restrictions!"}},{"0":"node-modules-is-not-heavy-developers-are-lazy.md","1":{"frontmatter":{"title":"node_modules is not heavy, developers are lazy!","date":"2023/07/29","description":"using modern Node.js modules","featuredImage":"/static/img/black-words-graffitti-on-yellow-wall-saying-if-you-are-reading-this-it-is-time-to-change.avif","tags":["Development","JavaScript","Node.js","Modules"],"relatedPosts":["from-145-to-7"]},"content":"## Intro\r\n\r\nStart typing in the search bar of any browser **node modules** and one of the first three suggestions will be *node modules meme*.<br />\r\nWhy developers of back-end languages, outside the Node.js environment, started to create jokes about the `node_modules` folder?<br />\r\nIs it heavy or misused?!\r\n\r\n## Problem\r\n\r\nIn the early days of Node.js which was created in 2009 and just after the release of the package manager in 2010, anyone with a little knowledge of JavaScript could publish a package.<br />\r\nNot only packages were massively created, but no one cares at the time if they were good or not!<br />\r\nPeople using Node.js back then just searched for the package that will get the job done and installed it.<br />\r\nThen tutorials about the most used modules came out and every newcomer took the path.<br />\r\nThe problem was, and sadly still mostly is, that developers creating packages to resolve common tasks search for existing modules to a particular aspect and add it as a dependency of theirs to save time.<br />\r\nAs a result, some of the most used packages are a bundle of a considerable amount of other ones, leading to gasworks when it comes to creating an app using them and inevitably making the `node_modules` folder the heaviest object in the universe...\r\n\r\n<img class=\"img-responsive\" src=\"/static/img/node-modules-meme.jpg\" alt=\"A meme about the node modules folder\">\r\n\r\n## Solution\r\n\r\nThe most famous web framework for Node.js is indisputably [Express](https://expressjs.com/) with over [28 million downloads per week](https://www.npmjs.com/package/express)!<br />\r\nIts npm page indicates that it relies on 31 direct dependencies while looking at its [graph](https://npmgraph.js.org/?q=express) we can see that its direct dependencies and theirs expand to 58 with a minified bundle size of 573 kB!<br />\r\nSo the majority of Node.js developers don't think twice to get a web framework and install Express for 2 main reasons:\r\n\r\n1. They are in their comfort zone with it\r\n2. They are just being as lazy as they can\r\n\r\nAren't there in the vast Node.js ecosystem any decent alternatives?<br />\r\nWell, here are two in the following table:\r\n\r\n<style>\r\ntable, th, td {\r\n  border: 1px solid;\r\n}\r\n</style>\r\n\r\n| Package | Dependencies | Minified Bundle Size |\r\n| :---: | :---: | :---: |\r\n| [itty-router](https://www.npmjs.com/package/itty-router) | 0 | 4kB |\r\n| [hono](https://www.npmjs.com/package/hono) | 0 | 20kB |\r\n\r\nHono was not designed for Node.js in the first place but it has an [adapter](https://www.npmjs.com/package/@hono/node-server) of 3kB with no dependency.\r\n\r\n## Conclusion\r\n\r\nSome of you may already think that an application is not only about a web framework.<br />\r\nMy simple answer is that I've updated **[Blog-Doc](https://github.com/LebCit/blog-doc): _The simplest Node.js CMS and SSG!_** to use 7 dependencies only instead of 145 and you can read more about it in [From 145 to 7 💪](/posts/from-145-to-7)."}},{"0":"from-145-to-7.md","1":{"frontmatter":{"title":"From 145 to 7 💪","date":"2023/07/21","description":"How Blog-Doc Lost 138 Dependencies","featuredImage":"/static/img/a-cardboard-sign-that-says-all-you-need-is-less.avif","tags":["Blog-Doc","Development","Hono","Eta","Marked"],"relatedPosts":["node-modules-is-not-heavy-developers-are-lazy","blog-doc-the-simplest-nodejs-cms-ssg"]},"content":"Once in a while, a crazy idea installs itself in your mind, like Blog-Doc.  \r\nBlog-Doc is not only *The Simplest Node.js CMS & SSG*, but it's also **The Best**!  \r\nI know that my word is not enough to prove the above statement, but numbers and purpose are!\r\n\r\n## Blog-Doc's beginning\r\n\r\nIt all started with my tutorials about templating a Node.js app with EJS and turning it to a simple SSG with the ability to write content in Markdown.  \r\nThen, I decided to combine those tutorials just as a proof of concept, and this is how Blog-Doc was created.  \r\nI created over the years some websites, themes, plugins, web apps... but nothing like Blog-Doc!  \r\nEach time I work on it I learn something new and find an aspect that can be improved.  \r\nYou can call me crazy, but it's like the code is asking to be better because it can!\r\n\r\n## A proof of concept\r\n\r\nSince Blog-Doc was here, as an SSG, I had to prove that it can be used and modified in any way a developer wants to.  \r\nI was using 11ty with Nunjucks to generate the static version of my personal blog [https://lebcit.github.io/](https://lebcit.github.io/).  \r\nSo I've turned the back-end of my static site to Blog-Doc with EJS without any hesitation and it was an easy task to do.  \r\nI felt proud and victorious, with some tears in the corners of my eyes,  after republishing my site with Blog-Doc.  \r\nIt's not everyday that a developer's idea sees the light...\r\n\r\n## An SSG with a CMS\r\n\r\nTo build a static site with a Static Site Generator you should read a lot of documentation to understand how everything is related and dive for days in your IDE to structure the back-end just to output some HTML, CSS and JS.  \r\nMoreover, if you don't have some back-end knowledge, you will not be able to use it or spend hours over hours searching, reading and trying to get the job done...  \r\nComing from a long journey as a WordPress developer to Node.js, I wanted any user without any coding knowledge to be able to use Blog-Doc.  \r\nNot only I created an integrated Content Management System for Blog-Doc, but I've also made it user-friendly.  \r\nBlog-Doc's administration is a front-end application, yes a front-end one, that can be protected like any other app so don't freak out.  \r\nWith the CMS in place, I've written some articles about it by effectively using it for the task and it worked like a charm.  \r\nAgain I felt more proud, without tears this time, especially since I'm not aware of any SSG having an integrated CMS.\r\n\r\n## Perfectionist by default\r\n\r\nI'm the kind of person that doesn't sit and relax when the code works even if it's good, I'm always in the quest of improving.  \r\nOne of my **strict coding rules** is that the console of the browser must not output a single warning or error, otherwise, the code isn't usable.  \r\nI was not satisfied by the design of Blog-Doc's administration so I've modified it completely to a more modern one using Tabler.  \r\nThen the tiny unhappy developer sitting in the back of my head said:  \r\n    - \"Really! Are you serious? Go find something else to be passionate about it, you're using a cannon to kill a fly!\"  \r\nThat time, he just remembered a meme about Node.js developers using a tremendous amount of modules to achieve simple tasks...  \r\nSo the challenge took place! I had to reduce significantly the number of dependencies that Blog-Doc relies on and keep all of its functionalities!\r\n\r\n## Gasworks\r\n\r\nWith all due respect to the time and hard work of every developer who made a Static Site Generator with Node.js, **including the previous versions of Blog-Doc**, those are gasworks!  \r\nI offer my sincerest apologies in advance to each one of these developers, but an app is not supposed to be a gasworks...  \r\nTo better understand what I'm talking about, I'll briefly share with you the research that I've made starting with the last previous version of Blog-Doc.\r\n\r\nN.B.: The last previous version of Blog-Doc can be found under the following GitHub repository [https://github.com/LebCit/blog-doc-space](https://github.com/LebCit/blog-doc-space).\r\n\r\nTo get the size of a node module, you can visite [BUNDLEPHOBIA](https://bundlephobia.com/)  \r\nTo visualize the dependencies of a node module, you can visit:\r\n 1. [npmgraph -](https://npmgraph.js.org/)\r\n 2. [Visualization of npm dependencies](http://npm.anvaka.com/#/)\r\n\r\n### Blog-Doc\r\n\r\nThe dependencies of Blog-Doc were as follows:\r\n\r\n- [archiver](https://www.npmjs.com/package/archiver)\r\n- [ejs](https://www.npmjs.com/package/ejs)\r\n- [express](https://www.npmjs.com/package/express)\r\n- [formidable](https://www.npmjs.com/package/formidable)\r\n- [gray-matter](https://www.npmjs.com/package/gray-matter)\r\n- [markdown-it](https://www.npmjs.com/package/markdown-it)\r\n- [markdown-it-prism](https://www.npmjs.com/package/markdown-it-prism)\r\n\r\nLooking at the `package.json` file of Blog-Doc, a Node.js novice would say that it has 7 dependencies, an amateur would say that it has 52 dependencies after looking to the direct dependencies shown on each dependency page on [NPM](https://www.npmjs.com/), but an advised user would click on each direct dependency to see if it also relies on other dependencies.  \r\nThis is of course a time killer and this is why tools like visualization of npm dependencies exist.  \r\nTo spare you the time, after looking at each dependency, Blog-Doc had 145 dependencies and this is not acceptable!  \r\nSome of them may stop being maintained or incompatible with other packages and I'll find myself debugging, losing time and energy over a gasworks that was never intended to be one...\r\n\r\n### Other SSG\r\n\r\nLooking at the most used [rendering frameworks](https://2022.stateofjs.com/en-US/libraries/rendering-frameworks/), I've searched the number of dependencies of each one and was completely shocked:\r\n\r\n- Astro ---> 450\r\n- SvelteKit ---> 26\r\n- Next.js ---> 26\r\n- Docusorus ---> 1009\r\n- Remix ---> 1\r\n- Nuxt ---> 592\r\n- Eleventy ---> 210\r\n- Gatsby ---> 1246\r\n\r\nDo you think that this is normal?!  \r\nI think that **this is insane**!  \r\nJavaScript is not about accumulating a gigantic number of lines on top of each other to produce a working application!  \r\nStarting from ES6 and going forward, the essence of JavaScript is to **write less and do more**!\r\n\r\nFrom my point of view, Remix is the only one in the list that is usable but I'm not a fan at all of JSX or JS front-end frameworks.\r\n\r\n## Long story short\r\n\r\nAfter a long week of research, I've concluded that Blog-Doc dependencies could be reduced to 7 and 7 only!  \r\nThat's great news, but now I had to rebuild Blog-Doc from the ground up.  \r\nOnce done,with a much better code organization, I was surprised to see that I'd written much less code compared to the last previous version.  \r\nAt this point, the little man in the back of my head said:  \r\n    - \"Knowing that I'm still unsatisfied, May The Code Be With You!\"\r\n\r\nThe actual dependencies of Blog-Doc are as follows:\r\n\r\n- [@hono/node-server](https://www.npmjs.com/package/@hono/node-server)\r\n- [adm-zip](https://www.npmjs.com/package/adm-zip)\r\n- [eta](https://www.npmjs.com/package/eta)\r\n- [highlight.js](https://www.npmjs.com/package/highlight.js)\r\n- [hono](https://www.npmjs.com/package/hono)\r\n- [marked](https://www.npmjs.com/package/marked)\r\n- [marked-highlight](https://www.npmjs.com/package/marked-highlight)\r\n\r\nAs you can check it out by yourself with ease, Blog-Doc is now relying on only 7 dependencies to output your static site.\r\n\r\n## Upcoming\r\n\r\nYou can find the newest version of Blog-Doc under its GitHub repository [https://github.com/LebCit/blog-doc](https://github.com/LebCit/blog-doc).  \r\nThe little unsatisfied man in the back of my head intends to:\r\n\r\n1. Reduce the number of dependencies Blog-Doc relies on.\r\n2. Enhance Blog-Doc's administration and functionalities.\r\n3. Create a design without any CSS framework.\r\n4. Use TinyMCE instead of TOAST UI Editor.\r\n5. Improve, improve and improve 😉\r\n\r\nBecause ALL YOU NEED IS LESS!"}},{"0":"blog-doc-updating-the-administration-design.md","1":{"frontmatter":{"title":"Blog-Doc, updating the administration design !","date":"2023/04/22","description":"updating the design of Blog-Doc administration","featuredImage":"/static/img/blog-doc-menu-configuration-page.png","tags":["Blog-Doc","CMS","SSG","Administration"],"relatedPosts":["blog-doc-the-front-end-administration","blog-doc-the-simplest-nodejs-cms-ssg"]},"content":"\r\n## Intro\r\n\r\nI've build the first version of the administration using [Pure.css](https://purecss.io/) because Blog-Doc uses it.  \r\nSince I wanted to split the menu out of the settings and give it a dedicated page, I told myself :  \r\n\"Why not a whole new design ?!\"\r\n\r\n## The new design\r\n\r\nSome time ago, I had to build a project with a modern administration interface and used [Tabler](https://tabler.io/) for that.  \r\nYou guessed it, Blog-Doc administration now uses Tabler !\r\n\r\n## Images\r\n\r\nA picture is worth a thousand words...  \r\nClick on each image to display it.\r\n\r\n<style>\r\n.gallery-container {\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\tjustify-content: center;\r\n}\r\n\r\n.image-container {\t\r\n\twidth: calc(33.33% - 10px);\r\n\tmargin: 5px;\r\n}\r\n\r\n.image-container img {\r\n\tobject-fit: cover;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tcursor: pointer;\r\n}\r\n\r\n.image-container img:hover {\r\n\tborder: 2px solid black;\r\n\tbox-shadow: 2px 2px 5px rgba(0,0,0,0.3);\r\n}\r\n\r\n.lightbox {\r\n\tdisplay: none;\r\n\tposition: fixed;\r\n\tz-index: 9999;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tbackground-color: rgba(0, 0, 0, 0.7);\r\n\ttext-align: center;\r\n}\r\n\r\n.lightbox-img {\r\n\tmax-width: 90%;\r\n\tmax-height: 90%;\r\n\tmargin-top: 20px;\r\n}\r\n\r\n.close {\r\n\tcolor: #fff;\r\n\tfont-size: 60px;\r\n\tfont-weight: bold;\r\n\tposition: absolute;\r\n\ttop: 20px;\r\n\tright: 30px;\r\n\tcursor: pointer;\r\n}\r\n\r\n.close:hover,\r\n.close:focus {\r\n\tcolor: #000;\r\n\ttext-decoration: none;\r\n\tcursor: pointer;\r\n}\r\n\r\n@media screen and (max-width: 480px) {\r\n\t.image-container {\r\n\t\twidth: calc(50% - 10px);\r\n\t}\r\n\r\n\t.close {\r\n\t\tcolor: #000;\r\n\t\tfont-size: 30px;\r\n\t}\r\n\r\n\t.close:hover,\r\n\t.close:focus {\r\n\t\tcolor: #fff;\r\n\t}\r\n}\r\n</style>\r\n\r\n<div class=\"gallery-container\">\r\n\t<div class=\"image-container\">\r\n\t\t<img src=\"/static/img/bd-adm.avif\" alt=\"Blog-Doc Administration\">\r\n\t</div>\r\n\t<div class=\"image-container\">\r\n\t\t<img src=\"/static/img/bd-adm-pages.avif\" alt=\"Blog-Doc Pages Administration\">\r\n\t</div>\r\n\t<div class=\"image-container\">\r\n\t\t<img src=\"/static/img/bd-adm-posts.avif\" alt=\"Blog-Doc Posts Administration\">\r\n\t</div>\r\n\t<div class=\"image-container\">\r\n\t\t<img src=\"/static/img/bd-adm-create.avif\" alt=\"Blog-Doc Creation Page\">\r\n\t</div>\r\n\t<div class=\"image-container\">\r\n\t\t<img src=\"/static/img/bd-config-site.avif\" alt=\"Blog-Doc Site Settings\">\r\n\t</div>\r\n\t<div class=\"image-container\">\r\n\t\t<img src=\"/static/img/bd-config-menu.avif\" alt=\"Blog-Doc Menu Settings\">\r\n\t</div>\r\n\t<div class=\"image-container\">\r\n\t\t<img src=\"/static/img/bd-adm-gallery.avif\" alt=\"Blog-Doc Gallery\">\r\n\t</div>\r\n</div>\r\n\r\n<div id=\"lightbox\" class=\"lightbox\">\r\n  <span class=\"close\">&#10007;</span>\r\n  <img id=\"lightbox-img\" class=\"lightbox-img\">\r\n</div>\r\n\r\n<script>\r\n\tconst page = document.querySelector(\"#page\")\r\n\tconst gallery = document.querySelector(\".gallery-container\");\r\n\tconst lightbox = document.querySelector(\"#lightbox\");\r\n\tconst lightboxImg = document.querySelector(\"#lightbox-img\");\r\n\tconst close = document.querySelector(\".close\");\r\n\r\n\tpage.append(lightbox)\r\n\r\n\tgallery.addEventListener(\"click\", function(event) {\r\n\t\tif (event.target.tagName === \"IMG\") {\r\n\t\t\tlightbox.style.display = \"block\";\r\n\t\t\tlightboxImg.src = event.target.src;\r\n\t\t}\r\n\t});\r\n\r\n\tclose.addEventListener(\"click\", function() {\r\n\t\tlightbox.style.display = \"none\";\r\n\t});\r\n\r\n\t\r\n</script>\r\n"}},{"0":"blog-doc-the-front-end-administration.md","1":{"frontmatter":{"title":"Blog-Doc, the front-end administration !","date":"2023/04/13","description":"the administration page of Blog-Doc","featuredImage":"/static/img/blog-doc-administration.avif","tags":["Blog-Doc","CMS","SSG","Administration"],"relatedPosts":["blog-doc-a-tiny-and-dead-simple-ssg","blog-doc-the-simplest-nodejs-cms-ssg"]},"content":"## A front-end administration !\r\n\r\n<img src=\"/static/img/blog-doc-administration.avif\" class=\"img-responsive\" alt=\"Blog-Doc Administration\" />\r\n\r\nIf you have ever worked with a CMS (Content Management System), you know that you have an administration part (the back-end) where you can do various operations that will be rendered on the client side (the front-end in the browser).  \r\nTo my modest knowledge of the most popular CMS, they all share the same logic of a separated administration that you can access through an authentication (login) page.  \r\nBlog-Doc's administration is rendered with the app on the front-end, making it more user friendly and simpler to deal with !  \r\nI'm already hearing \"***What ?! An administration on the front-end ?! This is  totally crazy !***\".  \r\nDon't freak out ! At the end of the day it's just a route that can be protected !  \r\nBlog-Doc's administration is already protected if you use it on [Deta Space](https://deta.space/discovery/@lebcit/blocdoc).  \r\nMoreover, if you use [Blog-Doc](https://github.com/LebCit/blog-doc-space) on a personal server, this route can be modified to whatever you like making it harder to guess, unlike well known CMS where you'll have to load plugin(s) / add-on(s) to block the default route and display the administration on another route...  \r\nVarious authentication methods can be applied to protect a route in Node.js, but if you just want to use Blog-Doc as a local CMS/SSG to generate your static site there is nothing to protect, this is why I didn't implement a default one *for now*.\r\n\r\n## Simple and easy\r\n\r\nThe administration page is pretty easy to understand.\r\n\r\nA menu on the left give access to the different routes of the administration :\r\n- Pages : displays a table of available pages that you can delete or access to update.\r\n- Posts :  displays a table of available posts that you can delete or access to update.\r\n- New : displays an interface to create a new page or post.\r\n- Gallery : a gallery to manage (upload/delete) your images.\r\n- Settings : a form  where you can modify the app settings to suit your needs.\r\n\r\nA central section with 6 cards redirecting to the same routes as the menu except for the last one that launches the build of a static site from your content and offers you to download the generated site as a zipped folder.\r\n\r\n## Future ?\r\n\r\nSo many ideas come to my mind to improve Bog-Doc's administration.  \r\nMy only and mandatory rule it to keep it as simple as possible.  \r\nIf you have any suggestion(s)/idea(s) regarding anything about Blog-Doc, please don't hesitate, head over the [Discussions](https://github.com/LebCit/blog-doc-space/discussions), click the 💡**Ideas** category and hit the green **New discussion** button.\r\n\r\nYou can read more about what Blog-Doc has to offer on it's [documentation page](https://blocdoc-1-v3476171.deta.app/pages/doc)."}},{"0":"blog-doc-the-simplest-nodejs-cms-ssg.md","1":{"frontmatter":{"title":"Blog-Doc, The Simplest Node.js CMS & SSG !","date":"2023/04/09","description":"turning Blog-Doc into a CMS and SSG","featuredImage":"/static/img/computer-programming-codes-displayed-on-monitor.avif","tags":["Blog-Doc","CMS","SSG"],"relatedPosts":["blog-doc-a-tiny-and-dead-simple-ssg","turn-a-markdown-blog-to-a-simple-ssg"]},"content":"## Intro\r\n\r\nAfter creating [Blog-Doc as a static site generator](/posts/blog-doc-a-tiny-and-dead-simple-ssg), [Deta got a major upgrade](https://deta.space/blog/introducing-space) and every app running on Deta Cloud must migrate to [Deta Space](https://deta.space/).  \r\nDeta Space comes supercharged with great features allowing developers to bring their ideas to live freely !  \r\nThe philosophy of Deta Space, in short, is to give everyone a personal computer in the cloud where developers build apps that can be directly installed and used by anyone.  \r\nYou can browse the available apps running on Deta Space by visiting the [Discovery](https://deta.space/discovery) page.\r\n\r\n## New mindset\r\n\r\nSince Blog-Doc had to be updated to be installable and usable on a personal cloud, the code had to be modified in a way allowing any user to make modifications from the app itself !  \r\nSo, the user should be able to Create, Read, Update and Delete without accessing the source code !  \r\nI had to restructure the architecture of a SSG to a CMS, easier said than done !  \r\nBut, Deta Space is so great that an application can have public routes available to everyone and private routes available to the app's user only !  \r\nMy task was now to create a **private administration** to give the user the **full control over Blog-Doc from the front-end** !  \r\nMy personal and mandatory requirement was to make an administration in the global spirit of Blog-Doc : **SIMPLICITY !**\r\n\r\n## SSG to CMS & SSG\r\n\r\nFrom the beginning of the transformation, I didn't want to remove the fact that Blog-Doc can still be used as a Static Site Generator.  \r\nThis is why, I refactored Blog-Doc's code in a way allowing to use the built in CMS to generate a static site out of the created content.  \r\nI'm not aware of a CMS that does it by default, and this is one of the great features of Blog-Doc !\r\n\r\n## Blog-Doc's Features\r\n\r\n- Administrate your app from the front-end !\r\n- Gallery to upload your images\r\n- Create, Read, Update & Delete your pages and posts\r\n- Paginated blog with chosen number of posts per page\r\n- Posts pagination to navigate between your posts\r\n- Write your content in Markdown\r\n- Ability to use HTML in Markdown\r\n- Tag(s) for posts\r\n- Featured image for pages & posts\r\n- Archive route for posts\r\n- Tags list route\r\n- Individual route for each tag\r\n- Titles & Meta Descriptions\r\n- Drag and drop your menu links to sort them\r\n- RSS feed\r\n- Sitemap\r\n- Search\r\n- Code highlighting with Prism\r\n- Ids for H2 till H4 in Markdown\r\n\r\nYou can read more about what Blog-Doc has to offer on it's [documentation page](https://blogdoc.github.io/pages/documentation/).\r\n\r\n## Upcoming\r\n\r\nI'll be maintaining and improving Blog-Doc in every possible aspect.  \r\nStay tuned, next posts will be about how I coded Blog-Doc and how you can use it with your own design !\r\n\r\n_**Nota-Bene : this site is build using Blog-Doc as a proof of concept that Blog-Doc can be adapted to any design !**_"}},{"0":"blog-doc-a-tiny-and-dead-simple-ssg.md","1":{"frontmatter":{"title":"Blog-Doc, a tiny and dead simple SSG !","date":"2022/11/13","description":"Blog-Doc, a tiny and dead simple static site generator written in JavaScript","featuredImage":"/static/img/digital-art-painting-of-giant-clocks-mechanisms.webp","tags":["Development","Node.js","Express","EJS","Markdown"],"relatedPosts":["turn-a-markdown-blog-to-a-simple-ssg","markdown-blog-with-ejs"]},"content":"\r\nBlog-Doc uses [Eta](https://eta.js.org/) as a template engine and Markdown to write and format the markup of the generated posts and pages.\r\n\r\n## Motivation\r\n\r\nIt's after some of my previous tutorials about templating a Node.js app with EJS and turning it to a simple SSG with the ability to write posts and pages in Markdown that I've decided to put it all together and bring it to the light as a proof of concept and prototype.\r\n\r\n## Live demo & documentation\r\n\r\nAn overview of the app and it's documentation can be found on [Blog-Doc](https://blogdoc.github.io/) live demo site.\r\n\r\n## Nota Bene\r\n\r\nYou can take Blog-Doc as a prototype and modify it totally to use it with another design and/or another template language.\r\n\r\nI really hope that this app will be useful in any way for a lot of people out there, I'm considering it as my personal contribution to the Node.js and Markdown communities.\r\n"}},{"0":"click-without-javascript.md","1":{"frontmatter":{"title":"Click without JavaScript !","description":"clicking on an element without JavaScript","date":"2022/08/01","tags":["Tips and Tricks","CSS"],"relatedPosts":["automatically-close-other-details","change-page-title-dynamically"],"featuredImage":"/static/img/hand-pointing-upward-on-a-pink-background.webp"},"content":"\n## Intro\n\nLet's say that you have a button on which you want to click and perform a simple action like displaying some hidden content.  \nYou'll directly think :\n\n```js\nconst btn = document.getElementById(\"btn\")\nbtn.addEventListener(\"click\", () => {\n\t// display my hidden content...\n})\n```\n\nWhat if I tell you that you could do it with CSS ?!\n\n## The :target CSS pseudo-class\n\nWhile surfing the net, you surely clicked before on a `hash-link`, a link that redirects to a particular section in a page, just like the above [Intro](#intro) heading !  \nIt could also redirect to another page, but always to a particular `target` on the page.  \nThe `target` in this case is reached by a link with a hash `#` :\n\n```html\n<a href=\"#intro\">Intro</a>\n```\n\nThis is why we call it a `hash-link`.\n\nCSS has a [:target](https://developer.mozilla.org/en-US/docs/Web/CSS/:target) _pseudo-class_, that can be used to select a `target` and style it !  \nAre you already thinking about the `display` property ? 😉\nLet's do it !\n\n<a href=\"#the-code\">Reveal the code !</a>\n\n<div id=\"the-code\">\n\n```html\n<a href=\"#the-code\">Reveal the code !</a>\n\n<div id=\"the-code\">\n\t<p>This block of code is displayed after you click on the link</p>\n\n\t<a href=\"#hide-the-code\">Hide the code !</a>\n</div>\n```\n\n```css\n#the-code {\n\tdisplay: none;\n}\n\n#the-code:target {\n\tdisplay: block;\n}\n```\n\n<a href=\"#hide-the-code\">Hide the code !</a>\n\n</div>\n\n<style>\n#the-code {\n\tdisplay: none;\n}\n\n#the-code:target {\n\tdisplay: block;\n}\n</style>\n\nSo how does this work ?!  \nIt's quite simple :\n\n1. We have a `hash-link` :\n\n```html\n<a href=\"#the-code\">Reveal the code !</a>\n```\n\n2. We have a `div` with an `ID` matching the `hash-link` :\n\n```html\n<div id=\"the-code\">...</div>\n```\n\n3. We hide this `div` by default :\n\n```css\n#the-code {\n\tdisplay: none;\n}\n```\n\n4. Then we display it if the `hash-link` becomes the target :\n\n```css\n#the-code:target {\n\tdisplay: block;\n}\n```\n\nI've also added at the end of the `div` a `hash-link` that doesn't correspond to any `target` :\n\n```html\n<a href=\"#hide-the-code\">Hide the code !</a>\n```\n\nWhen this one is clicked, the `target` is changed and the block of code goes back to it's original state, hidden, since this `hash-link` doesn't match it's `ID`.\n\nHope you'll find it useful.\n"}},{"0":"turn-a-markdown-blog-to-a-simple-ssg.md","1":{"frontmatter":{"title":"Turn a Markdown blog to a simple SSG","description":"improving a Markdown blog and turn it into a simple SSG","date":"2022/07/31","tags":["Development","Node.js","Express","EJS"],"relatedPosts":["markdown-blog-with-ejs","templating-a-nodejs-app-with-ejs"],"featuredImage":"/static/img/connected-gears-inside-pocket-watch.webp"},"content":"\n## Intro\n\nOver the past few weeks, I mostly wrote on how to template a Node.js application with [EJS](https://ejs.co/) using [Express](https://expressjs.com/).  \nThen, I wrote an article showing how to create a Markdown blog in Node.js using EJS, Express, [gray-matter](https://www.npmjs.com/package/gray-matter) and [markdown-it](https://www.npmjs.com/package/markdown-it).  \nToday, I'll combine those tutorials to turn the Markdown blog, from [the last tutorial](/posts/markdown-blog-with-ejs), into a simple SSG.\n\n## Jamstack & SSG\n\nWherever you head on the web, the content you'll get as a client is made of HTML, CSS and some JavaScript.  \nThink of HTML as a skeleton, CSS as it's external shapes and colors, and JavaScript as it's internal functionalities.  \nWith this in mind, you can ask yourself about the need of server side rendering...  \nStatic sites are way performant and secure than dynamic ones.  \nBut what about the need of interacting with a database or sending data on a particular page... ?  \nThis is where the JAMstack (JavaScript, APIs, and Markup) steps in to leverage the static notion from \"fixed\" to \"on demand dynamic functionalities\" like submitting forms, posting comments, making payments, searching content, authentication, and so on...  \nToday [Jamstack](https://jamstack.org/) is a continuous evolving ecosystem allowing developers to build better, faster and more secure applications, without losing the advantage of using dynamic features.\n\nAll of this is great but _easier said than done_.  \nI took the time, excitement, ambition and hard work of great developers to bring this concept to life.  \nToday, you can head over the [list of Static Site Generators for Jamstack sites](https://jamstack.org/generators/), choose what suits your needs, read the documentation, and build your project effortlessly in no time.  \nA simple explanation of a SSG is that it takes data passed to templates and generates HTML pages, just like a blender that gives you a ready-to-drink cocktail.  \nAt the date of writing this article, the Jamstack site lists more than 300 SSGs used to pre-built ready to serve HTML pages.  \nBut if you want to have your own dead simple SSG, that's also possible !\n\n## Improving our Markdown blog\n\nThe Markdown blog from the last tutorial was already a simple SSG, since it was taking data passed to templates and generating HTML pages out of them !  \nBut everything was inside the main server file and if we wanted to add more functionalities, the file would become crowded and unmaintainable.  \nThis is why, I'll show you how to improve this backend and make it ready to adopt more features.\n\n### LiveReload\n\n---\n\nIt would be a waist of time if we had to reload the server and refresh the browser to see our changes each time we make some of them.  \nIn [Templating a Node.js app with EJS](/posts/templating-a-nodejs-app-with-ejs), we've learned how to implement a live reload from the main server file.  \nThis time, we'll put this feature as a separate file.  \nLet's bring in three development dependencies :\n\n```bash\nnpm i -D nodemon livereload connect-livereload\n```\n\nIn the main server file, `index.js`, add a line to export `app` :\n\n```js\n// /index.js\nconst express = require(\"express\")\nconst app = express()\nexports.app = app 👈\n...\n```\n\nNow we can call `app` in other files 😉  \nAt the root of the application, create a file called `liveReload.js` with the following content :\n\n```js\n// /liveReload.js\nmodule.exports = () => {\n\t/** Start LiveReload implementation  */\n\tconst livereload = require(\"livereload\")\n\tconst connectLiveReload = require(\"connect-livereload\")\n\tconst { app } = require(\"./index\") 👈\n\n\t// Create a server with livereload and fire it up\n\tconst liveReloadServer = livereload.createServer()\n\t// Refresh the browser after each saved change on the server with a delay of 100 ms\n\tliveReloadServer.server.once(\"connection\", () => {\n\t\tsetTimeout(() => {\n\t\t\tliveReloadServer.refresh(\"/\")\n\t\t}, 100)\n\t})\n\t// Add livereload script to the response\n\tapp.use(connectLiveReload())\n\t/** End LiveReload implementation  */\n}\n```\n\nNow, back to `index.js`, let's `require` this function :\n\n```js\n// /index.js\n...\napp.set(\"view engine\", \"ejs\")\napp.use(express.static(\"public\"))\n\n// LiveReload\nconst liveReload = require(\"./liveReload\")\nliveReload()\n...\n```\n\nFinally, let's add a script to `package.json` :\n\n```json\n// /package.json\n...\n  \"scripts\": {\n    \"watch\": \"nodemon -e js,ejs,css,md\"\n  },\n...\n```\n\nNow, the following command `npm run watch` will tell Nodemon to watch for any changes in `.js`, `.ejs`, `.css` and `.md` files, and restart the server while `liveReload()` will reload the browser.\n\n### Routing\n\n---\n\nThe routes where defined in `index.js`, let's also put them in their own directory.  \nAt the root of the application, create a folder called `routes`.  \nInside this folder, create 2 files :\n\n1. `mainRoute.js`\n2. `postsRoute.js`\n\nThe first one is obviously for the homepage, and the second one is for each individual post.\n\nSince we have multiple routes and each one will be in it's own file, let's use a [global router in Express for a DRY code](/posts/express-global-router-for-a-dry-code).  \nIn `index.js`, parse an `express.Router()` to a `global.router` assigned to a `router` variable, then use it in the app :\n\n```js\n// /index.js\n...\n// LiveReload\nconst liveReload = require(\"./liveReload\")\nliveReload()\n\n// Express global router\nconst router = (global.router = express.Router())\napp.use(router)\n...\n```\n\nNow, let's move the logic of each route in it's own file :\n\n```js\n// /routes/mainRoute.js\nconst router = global.router\n\nconst fs = require(\"fs\")\nconst matter = require(\"gray-matter\")\n\nconst getPosts = () => {\n\t// Get the posts from their directory\n\tconst posts = fs.readdirSync(`${__dirname}/../views/posts`).filter((post) => post.endsWith(\".md\"))\n\t// Set the post content as an empty array\n\tconst postContent = []\n\t// Inject into the post content array the front matter\n\tposts.forEach((post) => {\n\t\tpostContent.push(matter.read(`${__dirname}/../views/posts/${post}`))\n\t})\n\n\t/**\n\t * 1- Return a list of posts as a two dimensional array containing for each one :\n\t * . the post filename with it's extension (e.g : postFilename.md)\n\t * . the post content as an object {content:\"Markdown content as a string\", data:{front matter}, excerpt:\"\"}\n\t * 2- Return each array as an object and create a Date instance from it's date front matter\n\t * 3- Sort posts by publication's date in descending order (newest to oldest)\n\t */\n\tconst postsList = posts\n\t\t.map(function (post, i) {\n\t\t\treturn [post, postContent[i]]\n\t\t})\n\t\t.map((obj) => {\n\t\t\treturn { ...obj, date: new Date(obj[1].data.date) }\n\t\t})\n\t\t.sort((objA, objB) => Number(objB.date) - Number(objA.date))\n\n\treturn postsList\n}\n\n// Render the list of posts on the main route\nrouter.get(\"/\", (req, res) => {\n\tres.render(\"postsList\", {\n\t\tposts: getPosts(),\n\t})\n})\n\nmodule.exports = router\n```\n\n```js\n// /routes/postsRoute.js\nconst router = global.router\n\nconst matter = require(\"gray-matter\")\n\n// Using a route parameter to render each post on a route matching it's filename\nrouter.get(\"/posts/:post\", (req, res) => {\n\tconst postTitle = req.params.post // Get the Markdown filename\n\n\t// Read the Markdown file and parse it's front matter\n\tconst post = matter.read(`${__dirname}/../views/posts/${postTitle}.md`)\n\n\t// Convert the Markdown file content to HTML with markdown-it\n\tconst md = require(\"markdown-it\")({ html: true }) // Allows HTML tags inside the Markdown file\n\tconst content = post.content // Read the Markdown file content\n\tconst html = md.render(content) // Convert the Markdown file content to HTML\n\n\t// Render the postsTemplate for each post and pass it's front matter as a data object into postsTemplate\n\tres.render(\"postsTemplate\", {\n\t\ttitle: post.data.title,\n\t\tdate: post.data.date,\n\t\tpostContent: html,\n\t})\n})\n\nmodule.exports = router\n```\n\n_Nota bene: in both files, I've replaced concatenation with template strings for paths_.\n\nUpdate `index.js` to `require` those routes :\n\n```js\n// /index.js - COMPLETE FILE\nconst express = require(\"express\")\nconst app = express()\nexports.app = app\n\napp.set(\"view engine\", \"ejs\")\napp.use(express.static(\"public\"))\n\n// LiveReload\nconst liveReload = require(\"./liveReload\")\nliveReload()\n\n// Express global router\nconst router = (global.router = express.Router())\napp.use(router)\n\n// Routes\napp.use(\"/\", require(\"./routes/mainRoute\"))\napp.use(\"/\", require(\"./routes/postsRoute\"))\n\n// Launching the application on port 3000\napp.listen(3000, () => {\n\tconsole.log(`App 🚀 @ http://localhost:3000`)\n})\n```\n\nNow that's a clean server file 👍\n\n### Styles and Scripts\n\n---\n\n**Important subsection ahead !**\n\nIn a common webapp, we would have a main stylesheet as well as a main scripts file.  \nBoth files would be rendered on each and every page of the application, but we all know that we do not need all the styles nor all the scripts on every page !  \nIf you look closer to `postsRoute.js`, even in `index.js` from the last tutorial, we passed an option along with `markdown-it` to allow HTML tags inside the Markdown files :\n\n```js\nconst md = require(\"markdown-it\")({ html: true })\n```\n\nSo we can use `<style>` and `<script>` tags inside our Markdown files 😉  \nLet's try to change the color of the title in `my-first-article.md` :\n\n```md\n---\ntitle: My first article\ndate: 2022/07/25\n---\n\nThis is the content of my first article\n\n<style>h1{color:red}</style>\n<!-- /views/posts/my-first-article.md -->\n```\n\nTake a look at this post, the title is now red !  \nBut if you look at `a-second-post.md`, the title is still black !  \nThis is awesome, we can load individual styles for each and every post 🥳\n\nThe same logic is applicable for scripts :\n\n```md\n---\ntitle: My first article\ndate: 2022/07/25\n---\n\nThis is the content of my first article\n\n<style>h1{color:red}</style>\n<script>alert(\"Hello from my-first-article.md\")</script>\n<!-- /views/posts/my-first-article.md -->\n```\n\nOkay, but what if a page has a decent amount of individual styles or scripts and we don't want to put the whole block inside the Markdown file ?  \nGood question ! Easy-peasy, just load it as you would normally do it.  \nLet's say that I have some particular styles and scripts for `a-second-post.md`.  \nCreate a folder at the root of the application called `public` and under it create two folders called `css` and `scripts`.  \nIn `css`, create a file called `second-post-styles.css` with the following content :\n\n```css\n/* /public/css/second-post-styles.css */\nh1 {\n\tcolor: blue;\n}\n```\n\nIn `scripts`, create a file called `second-post-scripts.js` with the following content :\n\n```js\n/* /public/scripts/second-post-scripts.js */\nconsole.log(\"Hello from second-post-scripts.js\")\n```\n\nNow, update `a-second-post.md` to look like this :\n\n```md\n---\ntitle: A second post\ndate: 2022/07/28\n---\n\nHere goes the content of my second post\n\n<link rel=\"stylesheet\" href=\"/css/second-post-styles.css\">\n<script src=\"/scripts/second-post-scripts.js\"></script>\n<!--- /views/posts/a-second-post.md -->\n```\n\nTake a look at this post, the title is now blue and if you open the browser's console `F12`, you'll see the message 🥳\n\n⚠️ The first slash `/` in the paths `href` and `src` is mandatory, if you omit it you'll get an error in the console.  \nThe reason is because the `link` and `script` tags are treated as a Markdown content, converted to HTML, injected in EJS template, rendered on the frontend.  \nIf we omit the first slash, the Markdown parser will think that those folder are in the same folder as the post, the `posts` folder, then those incorrect paths will be converted to HTML and injected into the EJS template that will render the post on the frontend where the browser will respond with a `404 Not Found`.  \nBy putting a slash `/` at the beginning of the path, Express will understand that we are asking for folders and files living under the the root directory from which to serve static assets, the `public` folder :\n\n```js\napp.use(express.static(\"public\"))\n```\n\n_Nota bene : the first slash `/` is not mandatory for a path directly defined in a template, an `.ejs` file_.  \nIn our case, `postsTemplate.ejs` is an exception because it's rendered on a dynamic route where the content comes from a parsed Markdown file, so in this file and every similar file, if we want to use the `public` folder, all our paths must begin with a slash `/`.\n\n## Conclusion\n\nFrom here, you can take control over this simple SSG and maybe add a `pagesTemplate.ejs`, a pagination, a contact form, a searchbox...\n\nI hope that this was helpful.\nThanks for reading so far.\n"}},{"0":"markdown-blog-with-ejs.md","1":{"frontmatter":{"title":"Markdown blog with EJS","description":"creating a Markdown blog with EJS","date":"2022/07/25","tags":["Development","Node.js","Express","EJS"],"relatedPosts":["express-global-router-for-a-dry-code","templating-a-nodejs-app-with-ejs"],"featuredImage":"/static/img/markdown-logo-with-white-background.webp"},"content":"\n## Intro\n\nWriting a post content with HTML is not as easy as doing it with [Markdown](https://daringfireball.net/projects/markdown/).  \nSince my coming [back to the roots whit a static site](/posts/back-to-the-roots-with-a-static-site), I write my posts content with Markdown.  \nA little time after that, I discovered [Deta Cloud](/posts/to-node-or-not-deta-is-the-answer) and was able to try everything I've learned about Node.js on a live server.  \nMy favorite templating language is [EJS](https://ejs.co/), and I wanted to create a dead simple blog by combining the content of a Markdown file with an EJS template.  \nAfter a lot of research and tries & fails, I've understood the mechanism needed to accomplish my goal.  \nI found some tutorials about the subject and this tutorial is inspired by the last one I stumbled on, [Building A Markdown Blog App with Express and EJS](https://julianterenzio.io/blog/Building%20A%20Markdown%20Blog%20App%20with%20Express%20and%C2%A0EJS), with some improvements and all the details.\n\n## Requirements\n\nTo execute our magic spell, we'll need the following packages :\n\n1. EJS, to template our application\n2. [Express](https://expressjs.com/), the web framework for Node.js\n3. [gray-matter](https://www.npmjs.com/package/gray-matter), to parse the front matter from the Markdown files\n4. [markdown-it](https://www.npmjs.com/package/markdown-it), to parse the Markdown files content\n\nTo install them with one command :\n\n`npm i ejs express gray-matter markdown-it`\n\n## Server setup\n\nIn your main server file, mine is `index.js`, put the following :\n\n<details>\n<summary>/index.js</summary>\n\n```js\nconst express = require(\"express\")\nconst app = express()\n\n// Built-in module to access and interact with the file system\nconst fs = require(\"fs\")\n// To parse front matter from Markdown files\nconst matter = require(\"gray-matter\")\n\napp.set(\"view engine\", \"ejs\")\napp.use(express.static(\"public\"))\n\nconst getPosts = () => {\n\t// Get the posts from their directory\n\tconst posts = fs.readdirSync(__dirname + \"/views/posts\").filter((post) => post.endsWith(\".md\"))\n\t// Set the post content as an empty array\n\tconst postContent = []\n\t// Inject into the post content array the front matter\n\tposts.forEach((post) => {\n\t\tpostContent.push(matter.read(__dirname + \"/views/posts/\" + post))\n\t})\n\n\t/**\n\t * 1- Return a list of posts as a two dimensional array containing for each one :\n\t * . the post filename with it's extension (e.g : postFilename.md)\n\t * . the post content as an object {content:\"Markdown content as a string\", data:{front matter}, excerpt:\"\"}\n\t * 2- Return each array as an object and create a Date instance from it's date front matter\n\t * 3- Sort posts by publication's date in descending order (newest to oldest)\n\t */\n\tconst postsList = posts\n\t\t.map(function (post, i) {\n\t\t\treturn [post, postContent[i]]\n\t\t})\n\t\t.map((obj) => {\n\t\t\treturn { ...obj, date: new Date(obj[1].data.date) }\n\t\t})\n\t\t.sort((objA, objB) => Number(objB.date) - Number(objA.date))\n\n\treturn postsList\n}\n\n// Render the list of posts on the main route\napp.get(\"/\", (req, res) => {\n\tres.render(\"postsList\", {\n\t\tposts: getPosts(),\n\t})\n})\n\n// Using a route parameter to render each post on a route matching it's filename\napp.get(\"/posts/:post\", (req, res) => {\n\tconst postTitle = req.params.post // Get the Markdown filename\n\n\t// Read the Markdown file and parse it's front matter\n\tconst post = matter.read(__dirname + \"/views/posts/\" + postTitle + \".md\")\n\n\t// Convert the Markdown file content to HTML with markdown-it\n\tconst md = require(\"markdown-it\")({ html: true }) // Allows HTML tags inside the Markdown file\n\tconst content = post.content // Read the Markdown file content\n\tconst html = md.render(content) // Convert the Markdown file content to HTML\n\n\t// Render the postsTemplate for each post and pass it's front matter as a data object into postsTemplate\n\tres.render(\"postsTemplate\", {\n\t\ttitle: post.data.title,\n\t\tdate: post.data.date,\n\t\tpostContent: html,\n\t})\n})\n\n// Launching the application on port 3000\napp.listen(3000, () => {\n\tconsole.log(`App 🚀 @ http://localhost:3000`)\n})\n```\n\n</details>\n\nAs you can see everything is explained in detail.  \n_Nota bene : I'm directly using the views folder as the template files location, no need to declare it, Express detects it by default, and the Markdown files are under the views folder inside another folder called posts_.\n\nI want to bring your attention to one particular point.  \nWhen we render the `postTemplate` and pass the Markdown front matter and content as a data object, we can add and pass as many `key: value` pair as we want, but we can't call an undefined `key` inside the `postTemplate` !  \nSo, if you add a `description: my post description` to the front matter of the Markdown file, you can't call it directly inside the `postTemplate` without adding it in the data object.  \n_Nota bene : No need to declare the `.ejs` extension for a template file, Express detects it by default_.\n\n## Rendering the frontend\n\nAs you have seen in `index.js`, I'm rendering a list of posts on the main route from a template called `postsList.ejs`. Add the following to this file :\n\n```html\n<!-- /views/postsList.ejs -->\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>Home | My blog</title>\n\t</head>\n\t<body>\n\t\t<h1>\n\t\t\tWelcome to my blog\n\t\t\t<br />\n\t\t\tList of recent posts\n\t\t</h1>\n\t\t<% posts.forEach(post => { %>\n\t\t<!-- Get the Markdown filename without it's extension -->\n\t\t<% const postFilename = post[0].replace(/\\.[^/.]+$/, \"\") %>\n\t\t<!-- Get the Markdown post title from it's front matter -->\n\t\t<% const postTitle = post[1].data.title %>\n\t\t<!-- Render the title as a link to the post -->\n\t\t<h2><a href=\"/posts/<%= postFilename %>\"><%= postTitle%></a></h2>\n\t\t<% }) %>\n\t</body>\n</html>\n```\n\nNow, each post has the same structure, one template file called `postsTemplate.ejs`. Add the following to this one :\n\n```html\n<!-- /views/postsTemplate.ejs -->\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title><%= title %> | My blog</title>\n\t</head>\n\t<body>\n\t\t<h1><%= title %></h1>\n\t\t<p><%= date %></p>\n\t\t<div><%- postContent %></div>\n\t</body>\n</html>\n```\n\nEverything is in place, we can now write our posts with Markdown in the `views` folder under the `posts` folder 🥳\n\nI've created two files for you to see the output if you try it :\n\n```md\n---\ntitle: My first article\ndate: 2022/07/23\n---\n\nThis is the content of my first article\n\n<!--- /views/posts/my-first-article.md -->\n```\n\n```md\n---\ntitle: A second post\ndate: 2022/07/25\n---\n\nHere goes the content of my second post\n\n<!--- /views/posts/a-second-post.md -->\n```\n\nThe app structure looks like the following tree :\n\n```txt\n// App's structure without the node_modules folder\n├── index.js\n├── package-lock.json\n├── package.json\n└── views\n  ├── posts\n  │  ├── a-second-post.md\n  │  └── my-first-article.md\n  ├── postsList.ejs\n  └── postsTemplate.ejs\n```\n\nI hope that this tutorial will be helpful for everyone trying to create a Markdown blog with EJS.\n"}},{"0":"express-global-router-for-a-dry-code.md","1":{"frontmatter":{"title":"Express global router for a DRY code","description":"using a global router in Express for a DRY code","date":"2022/07/18","tags":["Tips and Tricks","Node.js","Express"],"relatedPosts":["improving-a-nodejs-app-built-with-express-and-ejs","to-node-or-not-deta-is-the-answer"],"featuredImage":"/static/img/black-strings-connected-with-each-other-like-a-network-forming-a-globe.webp"},"content":"\nWhen developing a Node.js app with Express, we'll usually have two or more routes.  \nIf we use the [express.Router](https://expressjs.com/en/guide/routing.html#express-router) class to put each route in a separate file, we'll always have to begin with the same block of code :\n\n```js\nconst express = require(\"express\")\nconst router = express.Router()\n```\n\nThere is a better approach by using a global router.\n\nIn the main server file, we'll parse an [express.Router](https://expressjs.com/en/guide/routing.html#express-router) to a `global.router` assigned to a `router` variable, and in each route we'll only use this global router.\n\nLet's say we have only two routes : main `\"/\"` and about `\"/about\"`.  \nFollowing the common way, any route in it's own file will look like :\n\n```js\n// /routes/aRoute.js\nconst express = require(\"express\")\nconst router = express.Router()\n\nrouter.get(\"/\", (req, res) => {\n\tres.send(\"A route content\")\n})\n```\n\nThen, in the main server file we'll have :\n\n```js\n// /index.js\n...\napp.use(\"/a-route\", require(\"./routes/aRoute\"))\n...\n```\n\nBut by using a global router we can do the following :\n\n```js\n// /index.js\n\nconst express = require(\"express\")\nconst app = express()\n\n// Parse an express router to a global router variable\nconst router = (global.router = express.Router())\n// Use the global router variable\napp.use(router)\n\n// Routes\napp.use(\"/\", require(\"./routes/main\"))\napp.use(\"/\", require(\"./routes/about\"))\n\n// Launching the app on port 3000\napp.listen(3000, () => {\n\tconsole.log(`App 🚀 @ http://localhost:3000`)\n})\n```\n\nThen our two routes will look like so :\n\n```js\n// /routes/main.js\n\nconst router = global.router\n\nrouter.get(\"/\", (req, res) => {\n\tres.send(\"Welcome to the main route\")\n})\n\nmodule.exports = router\n```\n\n```js\n// /routes/about.js\n\nconst router = global.router\n\nrouter.get(\"/about\", (req, res) => {\n\tres.send(\"Welcome to the about route\")\n})\n\nmodule.exports = router\n```\n\nHope this will help you write a DRY code.\n"}},{"0":"improving-a-nodejs-app-built-with-express-and-ejs.md","1":{"frontmatter":{"title":"Improving a Node.js app built with Express and EJS","description":"improving a Node.js application built with Express and EJS","date":"2022/07/17","tags":["Development","JavaScript","Node.js","EJS"],"relatedPosts":["csp-nonce-with-nodejs-and-ejs","templating-a-nodejs-app-with-ejs"],"featuredImage":"/static/img/a-lego-wall.webp"},"content":"\n## Intro\n\nIn the [last tutorial](/posts/templating-a-nodejs-app-with-ejs), we've built a basic Node.js web application using EJS and Express. So, to understand this one, you should have followed the previous.\n\nIn this post, we are going to improve this application to make it look nicer on the server.  \nAs usual, I'll be explaining every step so you get the most out of this tutorial if you follow.\n\n## Dynamic content\n\nTill now, we had a homepage with an image and a button that displays a message when you click on it.  \nWe also had an about page with a link inside a paragraph and an image under it.  \nBoth pages have different document title, different page title, and the same menu.\n\nNothing fancy in fact, but let's assume that our homepage will display a list of titles.  \nThose titles may come from each post in a blog.\n\nUpdate `index.js` to create a list of titles of posts that will be rendered on the homepage.\n\n```js\n// /index.js\n...\napp.get(\"/\", function (req, res) {\n\tlet posts = [\n\t\t{ title: \"Who invented JavaScript ?\" },\n\t\t{ title: \"My first JavaScript piece\" },\n\t\t{ title: \"Logging into the console !\" },\n\t]\n\tres.render(\"index\", {\n\t\tdocTitle: \"Homepage | EJS App\",\n\t\tpageTitle: \"Homepage of templating with EJS application\",\n\t\tposts: posts,\n\t})\n})\n...\n```\n\nWe are creating an [array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of [objects](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics) inside the main route `\"/\"` called `posts`, where each object has a `key` and in front of each one a `value`.\n\nRemember that our main route renders `index.ejs`. So to access and display those titles, we should update `index.ejs` to integrate them like so :\n\n```html\n<!-- /views/index.ejs -->\n...\n<!-- Looping through the posts array -->\n<% posts.forEach((post) => { %>\n<h2><%= post.title %></h2>\n<% }) %>\n<button id=\"btn\" class=\"pure-button\">A Button</button>\n...\n```\n\nWe are looping through the `posts` array using the [forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method.  \n**Note how we are opening and closing EJS tags !**  \nIt's very important to understand the logic of opening and closing the EJS and HTML tags when using them together.  \nThe code isn't difficult at all, we are telling EJS to get the `posts`, and `forEach` one we want to display it's `title` inside an `<h2>` tag.  \nSave both files and take a look at the homepage.  \nGreat job !\n\nIn addition to a title, a post should have at least a description to give the reader an idea about it's content, maybe an image to make it more appealing, and a date indicating how recent and relevant it is in today's world.  \nOf course it should also have a link to the post itself, but we are not going to do it since we're not going to create them on the frontend.  \nLet's update our files to look like so :\n\n```js\n// /index.js\n...\napp.get(\"/\", function (req, res) {\n\tlet posts = [\n\t\t{\n\t\t\ttitle: \"Who invented JavaScript ?\",\n\t\t\tdescription: \"A post about the father of JavaScript\",\n\t\t\tdate: \"2022-06-03\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"My first JavaScript piece\",\n\t\t\tdescription: \"A post about my first JavaScript block\",\n\t\t\tdate: \"2022-06-10\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Logging into the console !\",\n\t\t\tdescription: \"A post about messages in the console\",\n\t\t\tdate: \"2022-06-17\",\n\t\t},\n\t]\n\tres.render(\"index\", {\n\t\tdocTitle: \"Homepage | EJS App\",\n\t\tpageTitle: \"Homepage of templating with EJS application\",\n\t\tposts: posts,\n\t})\n})\n...\n```\n\n```html\n<!-- /views/index.ejs -->\n...\n<!-- Looping through the posts array -->\n<% posts.forEach((post) => { %>\n<!-- Adding the title inside an <h2> -->\n<h2><%= post.title %></h2>\n<!-- Adding the date inside a paragraph -->\n<p>posted on <%= post.date %></p>\n<!-- Adding the description inside an <h3> -->\n<h3><%= post.description %></h3>\n<% }) %>\n<!-- Closing the loop -->\n...\n```\n\nSave both files and take a look at the homepage.\nAll of this is great, but imagine that we have a blog of 50 posts and each post have a title, a link, a description, an image, a date of publication, a date of update, and some tags 😱  \nYes, `index.js` would be crowded and difficult to maintain with a huge block of information just for the posts.  \nWe'll be addressing this in the next section.\n\n## Organizing the backend\n\nSince we are working on a server-side application, our code on the backend will evolve and get longer.  \nWe shouldn't put everything inside our main server file because it will become almost impossible to look for a specific portion to update it or find a bug and correct it...\n\nI don't think that their is a developer who doesn't split his code.  \nWe split our code into pieces where each one is easily trackable in a near or far future to keep it clean and maintainable.\n\n### Routing\n\n---\n\nFor now we only have 2 routes, main `\"/\"` and `\"/about\"`, but when our application will have some other routes where each one have it's logic and functionalities, our main server file will be huge, a little bit ugly and unmaintainable.\n\nDo you remember the [Simple routing](/posts/templating-a-nodejs-app-with-ejs#simple-routing) section ?  \nWell now we'll do a better one by putting each route in it's own file.\n\nTo do so, we'll use the [express.Router](https://expressjs.com/en/guide/routing.html#express-router) class.  \nCreate a new folder called `routes` at the root of the app.  \nInside this folder, create a file called `home.js` with the following content :\n\n```js\n// /routes/home.js\n\nconst express = require(\"express\")\nconst router = express.Router()\n\n// Defining a route\nrouter.get(\"/\", (req, res) => {\n\tlet posts = [\n\t\t{\n\t\t\ttitle: \"Who invented JavaScript ?\",\n\t\t\tdescription: \"A post about the father of JavaScript\",\n\t\t\tdate: \"2022-06-03\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"My first JavaScript piece\",\n\t\t\tdescription: \"A post about my first JavaScript block\",\n\t\t\tdate: \"2022-06-10\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Logging into the console !\",\n\t\t\tdescription: \"A post about messages in the console\",\n\t\t\tdate: \"2022-06-17\",\n\t\t},\n\t]\n\tres.render(\"index\", {\n\t\tdocTitle: \"Homepage | EJS App\",\n\t\tpageTitle: \"Homepage of templating with EJS application\",\n\t\tposts: posts,\n\t})\n})\n\nmodule.exports = router\n```\n\nInstead of `app.get` we use `router.get` and `export` it as a `module`.  \nNow, in `index.js`, replace the main route by this :\n\n```js\n// /index.js\n...\n/**\n * Rendering index page on the main route,\n * using the express.Router class.\n */\napp.use(\"/\", require(\"./routes/home\"))\n...\n\n```\n\nHere we are telling Express to look for the file `home.js` that lives under the `routes` folder and to execute it's content on the main route `\"/\"`.\n\nSo far, so good, but the `posts` array will grow and now this `home.js` file will not be maintainable, so let's get it out of there inside a separate file where only the posts info lives.  \nCreate a file called `postsListInfo.js` inside the `routes` folder :\n\n```js\n// /routes/postsListInfo.js\n\nmodule.exports = [\n\t{\n\t\ttitle: \"Who invented JavaScript ?\",\n\t\tdescription: \"A post about the father of JavaScript\",\n\t\tdate: \"2022-06-03\",\n\t},\n\t{\n\t\ttitle: \"My first JavaScript piece\",\n\t\tdescription: \"A post about my first JavaScript block\",\n\t\tdate: \"2022-06-10\",\n\t},\n\t{\n\t\ttitle: \"Logging into the console !\",\n\t\tdescription: \"A post about messages in the console\",\n\t\tdate: \"2022-06-17\",\n\t},\n]\n```\n\nSee, we directly exported the array itself.  \nNow, all we have to do is update `home.js` like so :\n\n```js\n// /routes/home.js\n\nconst express = require(\"express\")\nconst router = express.Router()\n\nlet posts = require(\"./postsListInfo\")\n\n// Defining a route\nrouter.get(\"/\", (req, res) => {\n\tres.render(\"index\", {\n\t\tdocTitle: \"Homepage | EJS App\",\n\t\tpageTitle: \"Homepage of templating with EJS application\",\n\t\tposts: posts,\n\t})\n})\n\nmodule.exports = router\n```\n\nPay attention !\n\n1. Since the two files are at the same level, we directly require `postsListInfo.js`. See [Paths](/posts/templating-a-nodejs-app-with-ejs#paths).\n2. The variable `posts` assigned to this require statement **should** match the `value` of the `data object` !  \n   We could name the variable `postsListInfo`, but the `data object` would now be `posts: postsListInfo`. See [Data object](/posts/templating-a-nodejs-app-with-ejs#data-object).\n\nSave both files and take a look at the homepage.  \nGreat job ! We now have the same display on the frontend, but with a clean, clear and maintainable code on the backend !\n\n_Nota bene : we could create at the root of the app a folder just for the `postsListInfo.js` file and `require` it from there_.\n\nLets's now put the `\"/about\"` route in it's own file.  \nUnder `routes`, create a file called `about.js` with the following content :\n\n```js\n// /routes/about.js\n\nconst express = require(\"express\")\nconst router = express.Router()\n\n// Defining a route\nrouter.get(\"/\", (req, res) => {\n\tres.render(\"about\", { docTitle: \"About me | EJS App\", pageTitle: \"A little bit about myself\" })\n})\n\nmodule.exports = router\n```\n\nWe are defining a route on which we'll render `about.ejs`.  \nNow replace `\"/about\"` route in `index.js` by :\n\n```js\n// /index.js\n...\n/**\n * Rendering about page on the /about route,\n * using the express.Router class.\n */\napp.use(\"/about\", require(\"./routes/about\"))\n...\n```\n\nHere we are telling Express to look for the file `about.js` that lives under the `routes` folder and to execute it's content on the `\"/about\"` route.\n\nNow, if you ever want to make changes on a specific route, you know where to make them, it will always be under one specific file 😉\n\n### Don't Repeat Yourself\n\n---\n\nDo you remember the [DRY](/posts/templating-a-nodejs-app-with-ejs#do-not-repeat-yourself) section ?  \nWell, in the backend also, you should avoid to repeat yourself !\n\nIf you take a closer look to `postsListInfo.js`, you'll notice that every description begins with _A post about_, assuming that you'll follow this pattern for each and every post's description, or maybe a much longer one such as _The content of the following post is about_, we could do the following :\n\n```js\n// /routes/postsListInfo.js\n\nconst descIntro = \"The content of the following post is about\"\n\nmodule.exports = [\n\t{\n\t\ttitle: \"Who invented JavaScript ?\",\n\t\tdescription: `${descIntro} the father of JavaScript`,\n\t\tdate: \"2022-06-03\",\n\t},\n\t{\n\t\ttitle: \"My first JavaScript piece\",\n\t\tdescription: `${descIntro} my first JavaScript block`,\n\t\tdate: \"2022-06-10\",\n\t},\n\t{\n\t\ttitle: \"Logging into the console !\",\n\t\tdescription: `${descIntro} messages in the console`,\n\t\tdate: \"2022-06-17\",\n\t},\n]\n```\n\n**WHAT IS THIS ?!**  \nThis is a [Template string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals).  \nYou can pass a variable into a string by writing the whole string inside backtick and call your variable inside a `${}` at the desired place.  \n`Template literals` are much more powerful than that, they can be used inside functions to create reusable blocks, yes just like template engines...\n\nOn the other hand, if you look at `home.js` and `about.js`, they both begin with the same block of code :\n\n```js\nconst express = require(\"express\")\nconst router = express.Router()\n```\n\nTo resolve this one, we'll use a `global.router` configuration.  \nUpdate the content of those files as well as `index.js` :\n\n```js\n// /routes/home.js\n\nconst router = global.router\n\nlet posts = require(\"./postsListInfo\")\n\n// Rendering index.ejs on the main route.\nrouter.get(\"/\", (req, res) => {\n\tres.render(\"index\", {\n\t\tdocTitle: \"Homepage | EJS App\",\n\t\tpageTitle: \"Homepage of templating with EJS application\",\n\t\tposts: posts,\n\t})\n})\n\nmodule.exports = router\n```\n\n```js\n// /routes/about.js\n\nconst router = global.router\n\n// Rendering about.ejs on /about route.\nrouter.get(\"/about\", (req, res) => {\n\tres.render(\"about\", { docTitle: \"About me | EJS App\", pageTitle: \"A little bit about myself\" })\n})\n\nmodule.exports = router\n```\n\n```js\n// /index.js complete file\nconst express = require(\"express\")\nconst app = express()\n\n// Set EJS as template engine\napp.set(\"view engine\", \"ejs\")\n\n// Serve static files from a folder named public\napp.use(express.static(\"public\"))\n\n// Require livereload and connectLiveReload\nconst livereload = require(\"livereload\")\nconst connectLiveReload = require(\"connect-livereload\")\n\n// Create a server with livereload and fire it up\nconst liveReloadServer = livereload.createServer()\n\n// Refresh the browser after each saved change on the server with a delay of 100 ms\nliveReloadServer.server.once(\"connection\", () => {\n\tsetTimeout(() => {\n\t\tliveReloadServer.refresh(\"/\")\n\t}, 100)\n})\n\n// Add livereload script to the response\napp.use(connectLiveReload())\n\n/** Start Routing */\n// Parse an express router to a global router variable\nconst router = (global.router = express.Router())\n// Use the global router variable\napp.use(router)\n// Execute home.js content on the entry route of the app.\napp.use(\"/\", require(\"./routes/home\"))\n// Execute about.js content on the entry route of the app.\napp.use(\"/\", require(\"./routes/about\"))\n/** End Routing */\n\n// Launching the app on port 3000\napp.listen(3000, () => {\n\tconsole.log(`App 🚀 @ http://localhost:3000`)\n})\n```\n\nNow you know the basics to organize your backend and make it maintainable.\n\nTo test your new skills, I suggest that you replicate the **Blog** of Pure.css [Layouts](https://purecss.io/layouts/) as a Node.js app.\n\nI hope that this was helpful.\n"}},{"0":"templating-a-nodejs-app-with-ejs.md","1":{"frontmatter":{"title":"Templating a Node.js app with EJS","date":"2022/07/09","description":"templating a Node.js application with EJS","featuredImage":"/static/img/block-of-red-orange-yellow-and-green-lego.webp","tags":["Development","JavaScript","Node.js","EJS"],"relatedPosts":["csp-nonce-with-nodejs-and-ejs","to-node-or-not-deta-is-the-answer"]},"content":"\r\n## Intro\r\n\r\nThere are a lot of tutorials about EJS out there, as well as a lot of [questions/answers](https://stackoverflow.com/questions/tagged/ejs).  \r\nI decided to make my own as a beginner's guide, full of details, to bring the reader's attention about what could be going on or maybe off...\r\n\r\nIn this post, we are going to build a basic Node.js web application using EJS as a templating language.  \r\nSo, we'll go through the process step by step and explain every step to understand it 🧠\r\n\r\n## Template engines {#template-engines}\r\n\r\nA template engine, processor or parser, is a software designed to inject data into a file, that commonly have the same extension as the template language or refers to, by using special markups that the template engine is programmed to understand and execute, resulting in a document where data have been passed from one end to another.\r\n\r\nWhy don't we put the desired data directly into the file ?  \r\nGood question !  \r\nThe simple answer is that template engines where created not only to structure the output of a document, but also to pass, get and set dynamic data as numbers, dates, strings, database information and so on...\r\n\r\nToday, template engines are mostly used to build server-side applications structured as fragments, using a template language to combine those small pieces and pass data across them to rapidly produce a ready to use application.\r\n\r\nSome popular JavaScript template engines :\r\n\r\n-   [EJS](https://ejs.co/) : Embedded JavaScript templating\r\n-   [Pug](https://pugjs.org/api/getting-started.html) : Robust, elegant, feature rich template engine for Node.js\r\n-   [Handlebars](https://handlebarsjs.com/) : Minimal templating on steroids\r\n-   [Nunjucks](https://mozilla.github.io/nunjucks/) : A rich and powerful templating language for JavaScript\r\n-   [Mustache](https://github.com/janl/mustache.js) : Logic-less {{mustache}} templates with JavaScript\r\n\r\nI prefer and recommend EJS because :\r\n\r\n> It's just plain JavaScript.\r\n\r\n## Setup\r\n\r\nTo follow up this tutorial, you'll need to install on your machine [Node.js](https://nodejs.org/en/), always go for the Long Time Support version, at the time of writing this post it's 16.15.1 LTS.  \r\nYou'll also need a code editor, I use and strongly recommend [VS Code](https://code.visualstudio.com/), the best and most developer friendly code editor in my opinion.\r\n\r\nNow, create a folder named ejs where you usually stock your projects, mine is simply projects.  \r\nOpen this folder in VS Code, then open the [TERMINAL](https://code.visualstudio.com/docs/editor/integrated-terminal) by pressing on 'Ctrl' and '`' (the backtick character under Esc) at the same time.  \r\nType the following command to initialize a project using [npm](https://www.npmjs.com/) (Node Package Manager) :\r\n\r\n```bash\r\nnpm init -y\r\n```\r\n\r\nThis command will create a `package.json` file at the root of your ejs project. This `JSON` file contains all the information about your project.  \r\nYou can add a `description`, modify the `version`'s app as well as the `main` entry file of the app (default is `index.js`), add `scripts`, `keywords`, your name as the `author`, and keep track of installed packages (we'll see this last one in a moment).  \r\nYou can leave it as it is, and it's also fine, since we are just testing and not publishing our app.\r\n\r\n## Express\r\n\r\nSince we're building a web app in Node.js, we'll be using [Express](https://expressjs.com/) to simplify our development and take advantage of it's features :\r\n\r\n-   Fast server-side development : Time saver, by using features of Node.js as functions\r\n-   Middleware : Access application's request-response cycle\r\n-   Routing : Great routing mechanism for client requests\r\n-   Templating : Build dynamic content with template engines\r\n-   Debugging : Express points to the part where a bug occurs\r\n\r\nExpress is the most popular Node.js web framework, written in plain JavaScript, that helps developers build web and mobile applications quickly with ease.  \r\nExpress let's also developers build the way they want, without forcing them into a specific way of doing things, this is why it's called unopinionated !\r\n\r\nInstall Express by typing the following command in the TERMINAL :\r\n\r\n```bash\r\nnpm i express\r\n# i stands for install\r\n```\r\n\r\nThis command will install Express into the application.  \r\nYou'll see after running this command a `node_modules` folder as well as a `package-lock.json` file at the root of the app.\r\n\r\nWe now have to display the famous _Hello World !_ with Express.  \r\nThe main entry file, if you didn't change it in `package.json`, is `index.js`, this file is commonly known as the main server file.  \r\nCreate this file at the root of the app.  \r\nThe app structure should now look like the following tree :\r\n\r\n```txt\r\nApplication's root without node_modules folder\r\n├── index.js\r\n├── package-lock.json\r\n└── package.json\r\n```\r\n\r\nPut the following code in `index.js` :\r\n\r\n<details>\r\n<summary>/index.js</summary>\r\n\r\n```js\r\nconst express = require(\"express\")\r\nconst app = express()\r\n\r\napp.get(\"/\", (req, res) => {\r\n\tres.send(\"Hello World !\")\r\n})\r\n\r\n// Launching the app on port 3000\r\napp.listen(3000, () => {\r\n\tconsole.log(`App launched @ http://localhost:3000`)\r\n})\r\n```\r\n\r\n</details>\r\n\r\nTo run this app, simply type in the TERMINAL the following command :\r\n\r\n```bash\r\nnode index\r\n```\r\n\r\nYou'll immediately see under it :\r\n\r\n```bash\r\nApp launched @ http://localhost:3000\r\n```\r\n\r\nPut your mouse over the link and click on **Follow link**.  \r\nIf you don't see it, put your mouse over the link, press `Ctrl` and click on the link.  \r\nYou now should see a beautiful _Hello World !_ in your default browser !\r\n\r\n## Nodemon\r\n\r\nRemember that this app is a server-side one !  \r\nBrief and quick example.  \r\nTry to change _Hello World !_ in `index.js` to whatever other string, let's say _Hi from server-side !_ and save the file.  \r\nIf you reload your browser nothing happens, no change is made !  \r\nThis is because the server is still running up your previous code.  \r\nTo display your new string, you should stop the server, restart it, then reload the browser.  \r\nYou can do the following in the TERMINAL :\r\n\r\n1. Focus inside your TERMINAL and click `Ctrl+c`, this will stop the server\r\n2. Type `node index`, this will restart the server\r\n3. Reload your browser and your new string appears\r\n\r\nWhen developing, you'll inspect your changes in the browser as much as you're coding, the above process to see the new output is unproductive, a time killer, and will make your hate coding.\r\n\r\nFortunately, their is a very popular and well maintained package called [nodemon](https://www.npmjs.com/package/nodemon) that takes care of automatically restarting the Node.js application when changes are detected for a `.js`, `.mjs` or `.json` file in the working directory.  \r\nNodemon is configurable and will allow us to define which directories and extensions to watch or even ignore, and that's just great !\r\n\r\nLet's install Nodemon.\r\nIn the TERMINAL, type the following command :\r\n\r\n```bash\r\nnpm i -D nodemon\r\n# -D is a flag standing for development\r\n```\r\n\r\nThis command will install Nodemon as a development package, this means that we need this package only for development and not for production/deployment.  \r\nOpen `package.json`, remove `test` command under `scripts` and replace it by the following one :\r\n\r\n```json\r\n\"start\": \"nodemon index.js\"\r\n```\r\n\r\nThe file should now look like this :\r\n\r\n<details>\r\n<summary>/package.json</summary>\r\n\r\n```json\r\n{\r\n\t\"name\": \"ejs\",\r\n\t\"version\": \"1.0.0\",\r\n\t\"description\": \"\",\r\n\t\"main\": \"index.js\",\r\n\t\"scripts\": {\r\n\t\t\"start\": \"nodemon index.js\"\r\n\t},\r\n\t\"keywords\": [],\r\n\t\"author\": \"\",\r\n\t\"license\": \"ISC\",\r\n\t\"dependencies\": {\r\n\t\t\"express\": \"^4.18.1\"\r\n\t},\r\n\t\"devDependencies\": {\r\n\t\t\"nodemon\": \"^2.0.19\"\r\n\t}\r\n}\r\n```\r\n\r\n</details>\r\n\r\nNow, all you have to do is to stop the server if it's running then type in the TERMINAL :\r\n\r\n```bash\r\nnpm start\r\n```\r\n\r\nYou'll get directly under it :\r\n\r\n```bash\r\n> ejs@1.0.0 start\r\n> nodemon index.js\r\n\r\n[nodemon] 2.0.19\r\n[nodemon] to restart at any time, enter `rs`\r\n[nodemon] watching path(s): *.*\r\n[nodemon] watching extensions: js,mjs,json\r\n[nodemon] starting `node index.js`\r\nApp 🚀 @ http://localhost:3000\r\n```\r\n\r\nYes, I've replaced _launched_ by 🚀 in `index.js`.  \r\nFollow the link.  \r\nTry now to change _Hi from server-side !_ to anything else, save the file and then reload your browser.  \r\nGreat ! The server have restarted the app and you can now see your changes, after you have saved them, by reloading the browser.\r\n\r\n## First EJS file\r\n\r\nTo start using EJS in Node.js, we have first to install it, you should by now know where to type the following command :\r\n\r\n```bash\r\nnpm i ejs\r\n```\r\n\r\nUpdate `index.js` to `set` EJS as our template engine :\r\n\r\n<details>\r\n<summary>/index.js</summary>\r\n\r\n```js\r\nconst express = require(\"express\")\r\nconst app = express()\r\n\r\n// Set EJS as template engine\r\napp.set(\"view engine\", \"ejs\")\r\n\r\napp.get(\"/\", (req, res) => {\r\n\tres.send(\"Hello World !\")\r\n})\r\n\r\n// Launching the app on port 3000\r\napp.listen(3000, () => {\r\n\tconsole.log(`App 🚀 @ http://localhost:3000`)\r\n})\r\n```\r\n\r\n</details>\r\n\r\nSince EJS is now installed, let's use it !  \r\nTo do so, we have to create a `views` folder at the root of our app.  \r\nExpress will look inside this folder to `render` our page(s) by using EJS as a template engine.  \r\nInside `views`, create an `index.ejs` file.  \r\nThe app structure should now look like the following tree :\r\n\r\n```txt\r\nApplication's root without node_modules folder\r\n├── index.js\r\n├── package-lock.json\r\n├── package.json\r\n└── views\r\n  └── index.ejs\r\n```\r\n\r\nPut the following content inside `index.ejs` :\r\n\r\n<details>\r\n<summary>/views/index.ejs</summary>\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\t<head>\r\n\t\t<meta charset=\"UTF-8\" />\r\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n\t\t<title>EJS App Homepage</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<h1>Hello from EJS</h1>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n</details>\r\n\r\nAs you can see, an `.ejs` file is just `HTML` in which we can use plain `JavaScript`, and we'll do that later on.\r\n\r\nNow, all we have to do to `render` this template is to modify only one line in `index.js`.  \r\nReplace  \r\n`res.send(\"Hello World !\")`  \r\nby  \r\n`res.render(\"index\")`\r\nNo need to specify the extension of the file because Express has been told to use EJS as a template engine.\r\n\r\nIf your server is still running, just reload your browser, otherwise restart it and follow the link.  \r\nCongrats, your first EJS file is rendered !  \r\nYou can try to modify it, save your modification(s), and refresh your browser to see the changes.\r\n\r\n## LiveReload\r\n\r\nEarlier, we've solved a half of the problem, no need to shut down the server and restart it anymore.  \r\nBut what about the browser, should I always refresh it ?  \r\nAbsolutely not ! This would also be an insane development step to do in today's world !  \r\nImagine having to refresh each and every time you make some changes...\r\n\r\nLet's bring into our project 2 packages that will do the work for us.  \r\nType the following command :\r\n\r\n```bash\r\nnpm i -D livereload connect-livereload\r\n```\r\n\r\nThis command will install [livereload](https://www.npmjs.com/package/livereload) and [connect-livereload](https://www.npmjs.com/package/connect-livereload) as development dependencies, just like Nodemon.  \r\nAs you can guest, they work together, along with Nodemon, to reload the browser when files on the server have been modified.\r\n\r\nLet's implement this behavior by updating `index.js` :\r\n\r\n<details>\r\n<summary>/index.js</summary>\r\n\r\n```js\r\nconst express = require(\"express\")\r\nconst app = express()\r\n\r\n// Set EJS as template engine\r\napp.set(\"view engine\", \"ejs\")\r\n\r\n// Require livereload and connectLiveReload\r\nconst livereload = require(\"livereload\")\r\nconst connectLiveReload = require(\"connect-livereload\")\r\n\r\n// Create a server with livereload and fire it up\r\nconst liveReloadServer = livereload.createServer()\r\n\r\n// Refresh the browser after each saved change on the server with a delay of 100 ms\r\nliveReloadServer.server.once(\"connection\", () => {\r\n\tsetTimeout(() => {\r\n\t\tliveReloadServer.refresh(\"/\")\r\n\t}, 100)\r\n})\r\n\r\n// Add livereload script to the response\r\napp.use(connectLiveReload())\r\n\r\n// Render the main route with EJS\r\napp.get(\"/\", (req, res) => {\r\n\tres.render(\"index\")\r\n})\r\n\r\n// Launching the app on port 3000\r\napp.listen(3000, () => {\r\n\tconsole.log(`App 🚀 @ http://localhost:3000`)\r\n})\r\n```\r\n\r\n</details>\r\n\r\nA final step is needed for this to work as expected.  \r\nWe'll have to add a command under `scripts` in `package.json` :\r\n\r\n<details>\r\n<summary>/package.json</summary>\r\n\r\n```json\r\n{\r\n\t\"name\": \"ejs\",\r\n\t\"version\": \"1.0.0\",\r\n\t\"description\": \"\",\r\n\t\"main\": \"index.js\",\r\n\t\"scripts\": {\r\n\t\t\"start\": \"nodemon index.js\",\r\n\t\t\"watch\": \"nodemon -e js,ejs\" // Added command\r\n\t},\r\n\t\"keywords\": [],\r\n\t\"author\": \"\",\r\n\t\"license\": \"ISC\",\r\n\t\"dependencies\": {\r\n\t\t\"ejs\": \"^3.1.8\",\r\n\t\t\"express\": \"^4.18.1\"\r\n\t},\r\n\t\"devDependencies\": {\r\n\t\t\"connect-livereload\": \"^0.6.1\",\r\n\t\t\"livereload\": \"^0.9.3\",\r\n\t\t\"nodemon\": \"^2.0.19\"\r\n\t}\r\n}\r\n```\r\n\r\n</details>\r\n\r\nThis command tells Nodemon to watch for changes of files with a `.js` or `.ejs` extension in the app.  \r\n_Nota bene_ : you can change the name of the command to whatever you like !  \r\nSo for example you could rename _start_ to _fire_ and maybe _watch_ to _build_...\r\n\r\nNow comes the moment of truth.  \r\nIf the server is running stop it.  \r\nType the following command :\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nIf you follow the link, you should see a big _Hello from EJS_.  \r\nNow, try to change it to whatever you like and save.  \r\n**Abracadabra**, the browser reloads automatically and your changes are rendered to the browser instantly !\r\n\r\n## Templating with EJS\r\n\r\nTemplating is the mechanism of combining multiple parts into one.  \r\nIn the `views` folder, create a new folder called `partials`.  \r\nThis folder will contain the different parts of our app.  \r\nAs you know, the main parts of a webpage are :\r\n\r\n1. The head\r\n2. The body\r\n3. The footer\r\n\r\nSometimes, there is also a sidebar, but it's generally a part of the body.\r\n\r\nNow, create 2 files inside the `partials` folder :  \r\n`head.ejs` and `footer.ejs`.\r\n\r\n<details>\r\n<summary>/views/partials/head.ejs</summary>\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\t<head>\r\n\t\t<meta charset=\"UTF-8\" />\r\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n\t\t<title>EJS App Homepage</title>\r\n\t</head>\r\n\t<body>\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>/views/partials/footer.ejs</summary>\r\n\r\n```html\r\n</body>\r\n</html>\r\n```\r\n\r\n</details>\r\n\r\nMan, your code is a mess !  \r\nThere is no closing tags for `html` and `body` in `head.ejs`, moreover there is two lonely closing tags for `html` and `body` in `footer.ejs` !  \r\nI know, be patient, the magic is coming.  \r\nUpdate `index.ejs` with the following content :\r\n\r\n<details>\r\n<summary>/views/index.ejs</summary>\r\n\r\n```html\r\n<%- include('partials/head') %>\r\n\r\n<h1>I'm templating with EJS</h1>\r\n\r\n<%- include('partials/footer') %>\r\n```\r\n\r\n</details>\r\n\r\nSave and go take a look at your browser 😁  \r\nThe code is self explanatory.  \r\nWe are using the `include()` function of EJS, to **include** a template into another **at a specific location**.  \r\nThis is a **HUGE** step in your dev journey, trust me !\r\n\r\nOk, it's very nice, but what's the benefit since we could put it all together ?! 🤔  \r\nGood question !  \r\nThe first obvious benefit is to write a **DRY** (Don't Repeat Yourself) code !  \r\nIf you have ever built a static website before, you'll know that you would include the header, maybe a sidebar, and the footer for each and every page.  \r\nWell, this will not be the case anymore 😉  \r\nThe second and most amazing benefit is that you'll be able to write dynamic code by using JavaScript inside the template, you already did it with `include()`, but we'll see much more in the next section.\r\n\r\n## Passing data\r\n\r\nThis is, in my opinion, the most powerful, used and sensitive functionality of any template engine !  \r\nAlthough, we should be aware of how to use it and what we are passing from one file to another and especially from one end (the backend/server) to another (the frontend/browser) !\r\n\r\n### Simple routing {#simple-routing}\r\n\r\n---\r\n\r\nLet's begin by adding another page to our app.  \r\nCreate an `about.ejs` file in the `views` folder :\r\n\r\n<details>\r\n<summary>/views/about.ejs</summary>\r\n\r\n```html\r\n<%- include('partials/head') %>\r\n\r\n<h1>About me</h1>\r\n<p>\r\n\tI'm LebCit, a Citizen of a small country called\r\n\t<a href=\"https://www.google.com/maps/@33.8735578,35.84741,9z\">Lebanon</a>\r\n\tin the Middle East.\r\n</p>\r\n\r\n<%- include('partials/footer') %>\r\n```\r\n\r\n</details>\r\n\r\nWhile your server is running up, try to go to the following route :\r\n\r\n```txt\r\nhttp://localhost:3000/about\r\n```\r\n\r\nYou will see an `error` page with the following message :\r\n\r\n```txt\r\nCannot GET /about\r\n```\r\n\r\nThis is because the `/about` route was not defined in the backend.  \r\nOpen `index.js` and add under the main route a new one :\r\n\r\n```js\r\n// Rendering about page on the /about route\r\napp.get(\"/about\", (req, res) => {\r\n\tres.render(\"about\")\r\n})\r\n```\r\n\r\nGo back to your browser and refresh it.  \r\nWhy the browser did not refresh itself ?  \r\nYour server did reload the app, but your browser is on an `error` page and `livereload` is now blocked, so even if you make changes they will not be reflected on the frontend.  \r\nWhen you refresh your browser, you'll see the content of `about.ejs`.\r\n\r\nSimple exercise : try to `render` `about.ejs` on `about-me` route.\r\n\r\n### Data object {#data-object}\r\n\r\n---\r\n\r\nIf you look closer to the browser's title when you're viewing the content of `about.ejs`, you'll notice that it's the same one as `index.ejs` : _EJS App Homepage_  \r\nThis is because they share the same `<title>` passed from `head.ejs` !  \r\nThe `<title>` is intended to announce the content of a page, so our pages cannot have the same `<title>` since they provide different content.  \r\nIn a real life situation, an app will have a different `<title>` for each page rendered on a route.\r\n\r\nTo give our pages different titles, we'll use the `data object` of EJS on a rendered page.  \r\nFirst of all, make sure that you're viewing `about.ejs` in your browser.  \r\nModify the code that renders it in `index.js` to :\r\n\r\n```js\r\n/**\r\n * Rendering about page on the /about route,\r\n * while passing the document title as a data object.\r\n */\r\napp.get(\"/about\", (req, res) => {\r\n\tres.render(\"about\", { docTitle: \"About me | EJS App\" })\r\n})\r\n```\r\n\r\nIn `head.ejs`, modify the `<title>` line to :\r\n\r\n```html\r\n<title><%= docTitle %></title>\r\n```\r\n\r\nWe are passing the `docTitle` value `About me | EJS App` from the backend to the frontend as a variable for a rendered page on a route into the `<title>` tag.  \r\nSave both files and go take a look at the browser's title 😁\r\n\r\nNow, go to the homepage at `http://localhost:3000/` !!!  \r\n**Don't panic and read** : this is a crucial rule if you ever want to be a developer when you see an error !  \r\nExpress is amazing, it's showing you the exact position where the error occurred, as well as the error itself : `docTitle is not defined`.\r\nRemember that in `index.ejs` we are including `head.ejs`.  \r\nOf course ! In `head.ejs` there is a variable called `docTitle`, but we didn't pass it into the page `index.ejs` rendered on the main route !  \r\nTo do so, modify the main route in `index.js` to :\r\n\r\n```js\r\n/**\r\n * Rendering index page on the main route,\r\n * while passing the document title as a data object.\r\n */\r\napp.get(\"/\", (req, res) => {\r\n\tres.render(\"index\", { docTitle: \"Homepage | EJS App\" })\r\n})\r\n```\r\n\r\nSave the file and refresh your browser.  \r\n_You now know why you have to refresh your browser in this case !_  \r\nSwitch between the homepage and the about page, they are displaying different titles ! Great job !\r\n\r\n### Don't Repeat Yourself {#do-not-repeat-yourself}\r\n\r\n---\r\n\r\nSuppose the `<h1>` tags in `index.ejs` and `about.ejs` represent titles of the content in each page, like an article title, just a little bit more descriptive than the document title.  \r\nLet's render them by using the data object :\r\n\r\n```js\r\napp.get(\"/\", (req, res) => {\r\n\tres.render(\"index\", { docTitle: \"Homepage | EJS App\", pageTitle: \"Homepage of templating with EJS application\" })\r\n})\r\n```\r\n\r\n```js\r\napp.get(\"/about\", (req, res) => {\r\n\tres.render(\"about\", { docTitle: \"About me | EJS App\", pageTitle: \"A little bit about myself\" })\r\n})\r\n```\r\n\r\nAnd of course in each file the `<h1>` line becomes :  \r\n`<h1><%= pageTitle %></h1>`\r\n\r\nSuppose now that we have in our app just 50 articles, so we will have to write at the very beginning of each blog post the previous line of code.  \r\nWe would be misusing the template engine, since one of it's benefits is to write **DRY** code !\r\n\r\nTo solve this :\r\n\r\n1. We can create a file for this line and include it at the desired place, just like `head.ejs` and `footer.ejs`.\r\n2. Or we can put the line just after the opening `<body>` tag at the end of `head.ejs`, since this `<h1>` (article title) appears directly after including `head.ejs` in both files.\r\n\r\nIn this particular case, I prefer the second approach because it's just one line and not a partial or a huge block of code to be repeated.  \r\nThe file would look like :\r\n\r\n<details>\r\n<summary>/views/partials/head.ejs</summary>\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\t<head>\r\n\t\t<meta charset=\"UTF-8\" />\r\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n\t\t<title><%= docTitle %></title>\r\n\t</head>\r\n\t<body>\r\n\t\t<h1><%= pageTitle %></h1>\r\n```\r\n\r\n</details>\r\n\r\nNow you have a little idea about passing data from the backend to the frontend as well as one or two benefits a template engine can provide.\r\n\r\n## Navigation\r\n\r\nA user can't guess the different routes of an application.\r\nAn app should help the user to explore and use it's content by providing a way to navigate between it's different routes.  \r\nThis is where the navigation comes in.\r\n\r\nCreate a `nav.ejs` in `partials.ejs` with the following content :\r\n\r\n<details>\r\n<summary>/views/partials/nav.ejs</summary>\r\n\r\n```html\r\n<nav>\r\n\t<ul>\r\n\t\t<li><a href=\"/\">Home</a></li>\r\n\t\t<li><a href=\"/about\">About me</a></li>\r\n\t</ul>\r\n</nav>\r\n```\r\n\r\n</details>\r\n\r\nPay attention, the `href` attributes are the same as the defined routes on the server !\r\n\r\nNow, let's include this part in `head.ejs` after the opening `<body>` tag and before the `<h1>` :\r\n\r\n<details>\r\n<summary>/views/partials/head.ejs</summary>\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\t<head>\r\n\t\t<meta charset=\"UTF-8\" />\r\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n\t\t<title><%= docTitle %></title>\r\n\t</head>\r\n\t<body>\r\n\t\t<%- include('nav') %>\r\n\r\n\t\t<h1><%= pageTitle %></h1>\r\n```\r\n\r\n</details>\r\n\r\nSave both files and take a look at your browser.  \r\nYou should have a working navigation above the page title.\r\n\r\n## Static files\r\n\r\nFor now, we've been rendering `.ejs` files, including them one into another, and passing some basic data from the backend to the frontend using the `data object` of EJS.\r\n\r\nAll of this is great but does not put you on the right track by itself to build an entire app.  \r\nYou'll quickly need to insert images, style the page(s) with [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS), add some interactivity with [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)...\r\n\r\nAs I told you before, _Express is amazing_ !  \r\nOne line inside the main server file is all we need to start serving static files.  \r\nUpdate `index.js` by putting the magical line just bellow the template engine :\r\n\r\n```js\r\n...\r\n\r\n// Set EJS as template engine\r\napp.set(\"view engine\", \"ejs\")\r\n\r\n// Serve static files from a folder named public\r\napp.use(express.static('public'))\r\n\r\n...\r\n```\r\n\r\nNow, create a `public` folder at the root of your application.  \r\nRemember that this folder will hold files intended to be rendered directly in the browser/frontend.\r\n\r\n### Images\r\n\r\n---\r\n\r\nLet's begin by creating an `img` folder inside the `public` folder.  \r\nI'll be getting 2 images from [Pexels](https://www.pexels.com/) :\r\n\r\n1. [The code father](https://www.pexels.com/photo/computer-humor-the-codefather-funny-programming-meme-11035548/) 🤣\r\n2. [Byblos](https://www.pexels.com/photo/aerial-view-of-city-buildings-4659944/) one of the oldest cities in the world\r\n\r\nI've downloaded the smallest available size for each of them, and renamed them to `the-code-father.jpg` and `byblos.jpg`.  \r\nI'll be including `the-code-father.jpg` into `index.ejs` :\r\n\r\n```html\r\n<%- include('partials/head') %>\r\n\r\n<img src=\"img/the-code-father.jpg\" />\r\n\r\n<%- include('partials/footer') %>\r\n```\r\n\r\nNow it's your turn to insert `byblos.jpg` into `about.ejs`.\r\n\r\n### Styles\r\n\r\n---\r\n\r\nWe can load styles into a page by :\r\n\r\n1. Having a stylesheet in our app and load it in the `<head>` of the document.\r\n2. Load a stylesheet in the `<head>` of the document from a CDN, Content Delivery Network, like [JSDELIVR](https://www.jsdelivr.com/).\r\n\r\nThe same logic applies for fonts.\r\n\r\nCreate a `css` folder under the `public` one.  \r\nInside the `css` folder, create a file called `main.css`.  \r\nBasic definition : CSS is used to design the display of webpages.  \r\nLet's change the color of the page title to blue, by adding the following in `main.css`:\r\n\r\n```css\r\nh1 {\r\n\tcolor: blue;\r\n}\r\n```\r\n\r\nIf you go to your browser, nothing has changed and in fact it didn't reload for 2 reasons :\r\n\r\n1. We didn't add in the `<head>` of the document the link that connects this stylesheet, `main.css`, to the document itself.\r\n2. We didn't instruct Nodemon to reload the app nor the browser when `.css` files have been changed.\r\n\r\nOpen `head.ejs` and add the link that injects `main.css` into the document :\r\n\r\n```html\r\n...\r\n<title><%= docTitle %></title>\r\n\r\n<!-- Load main.css stylesheet -->\r\n<link rel=\"stylesheet\" href=\"css/main.css\" />\r\n...\r\n```\r\n\r\nIf you take a look at your browser, the `<h1>` tags are now blue.  \r\nWait we didn't instruct Nodemon to watch `.css` files !  \r\nThat's right, but it's watching `.ejs` files, where a change have been made.\r\n\r\nTry to change `blue` to `red` in `main.css`.  \r\nLook at your browser, `<h1>` tags are still in blue.  \r\nOpen `package.json` and update the `watch` command to :  \r\n`\"watch\": \"nodemon -e js,ejs,css\"`  \r\nWe are now watching for changes in `.css` files also.  \r\nStop the server and restart it again, `<h1>` tags are now red.  \r\nChange red to any color you want and the changes will now by reflect on the frontend.\r\n\r\nThis is really nice, but for an app you'll need some ready to use styles to save time and fasten your development.  \r\nThis is where CSS frameworks come in.  \r\nThere are a lot of CSS frameworks out there, I'll be using [Pure.css](https://purecss.io/) :\r\n\r\n> A set of small, responsive CSS modules that you can use in every web project.\r\n\r\nTo load `Pure.css` I'll be using JSDELIVR :\r\n\r\n```html\r\n<!-- Load main.css stylesheet -->\r\n<link rel=\"stylesheet\" href=\"css/main.css\" />\r\n<!-- Load Pure.css stylesheet -->\r\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/purecss@2.1.0/build/pure-min.min.css\" />\r\n```\r\n\r\nIf you look at your browser, you'll notice some minor changes but nothing much.  \r\nTo see it in action, modify `nav.ejs` :\r\n\r\n<details>\r\n<summary>/views/partials/nav.ejs</summary>\r\n\r\n```html\r\n<nav class=\"pure-menu pure-menu-horizontal\">\r\n\t<ul class=\"pure-menu-list\">\r\n\t\t<li class=\"pure-menu-item\"><a href=\"/\">Home</a></li>\r\n\t\t<li class=\"pure-menu-item\"></li><a href=\"/about\">About me</a></li>\r\n\t</ul>\r\n</nav>\r\n```\r\n\r\n</details>\r\n\r\nSave and take a look at your browser.  \r\nCongrats, you've just used pre-made styles from a loaded framework.  \r\nRead the framework's documentation and play with it's classes to style your page(s).  \r\nYou can also take a look at the [Layouts](https://purecss.io/layouts/) that `Pure.css` provides to have a better understanding of how you can use it.\r\n\r\n### JavaScript\r\n\r\n---\r\n\r\nThere is no simple definition for `JavaScript`...  \r\nLook at [the frontend technology used in most popular websites](https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites).  \r\nCheck also Stack Overflow's 2021 Developer Survey regarding [Programming, scripting, and markup languages](https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-programming-scripting-and-markup-languages).  \r\nIn today's world, web development is mostly about `JavaScript`.  \r\nYou have been using it all along from the beginning of this tutorial !\r\n\r\nIn `index.ejs` add a `<button>` inside a `<div>` under the `<img />` :\r\n\r\n```html\r\n<div>\r\n\t<button id=\"btn\" class=\"pure-button\">A Button</button>\r\n</div>\r\n```\r\n\r\nCreate a `scripts` folder in `public`.  \r\nInside `scripts`, create a file named `main.js` and add the following content inside it :\r\n\r\n<details>\r\n<summary>/public/scripts/main.js</summary>\r\n\r\n```js\r\nconst btn = document.getElementById(\"btn\")\r\nif (btn) {\r\n\tbtn.addEventListener(\"click\", () => {\r\n\t\talert(\"Hello from JavaScript !\")\r\n\t})\r\n}\r\n```\r\n\r\n</details>\r\n\r\nJust like a stylesheet, a script file should be loaded into the document to work.  \r\nIt's safer, and best practice, to load scripts at the very end of a document.  \r\nModify `footer.ejs` to look like :\r\n\r\n```html\r\n<script src=\"scripts/main.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\nIf you visit the homepage of the app and click on the button, you'll see a popup with the message defined in `main.js`.  \r\n`JavaScript` can do much more than simple interactions, you can control and modify everything in a document...\r\n\r\nThere is a countless number of JavaScript frameworks out there to make your development easier and faster or make you hate it, so be very careful of what you're using and always ask yourself if you really need it or not !\r\n\r\nA personal note about JavaScript : **_I love vanilla JS_**  \r\nMeaning that I'm not a fan of frontend JS frameworks, but that's just me...\r\n\r\n### Paths {#paths}\r\n\r\n---\r\n\r\n**Important subsection ahead !**\r\n\r\nYou may have noticed or not, but you where using _relative paths_ to `include()` templates in each other and load assets into the document.\r\n\r\nConsider the tree of our app :\r\n\r\n```txt\r\nApplication's root without node_modules folder\r\n├── index.js\r\n├── package-lock.json\r\n├── package.json\r\n├── public\r\n│  ├── css\r\n│  │  └── main.css\r\n│  ├── img\r\n│  │  ├── byblos.jpg\r\n│  │  └── the-code-father.jpg\r\n│  └── scripts\r\n│    └── main.js\r\n└── views\r\n  ├── about.ejs\r\n  ├── index.ejs\r\n  └── partials\r\n    ├── footer.ejs\r\n    ├── head.ejs\r\n    └── nav.ejs\r\n```\r\n\r\nThe root is the `ejs` folder.  \r\nIf 2 or more files lives in the same folder, we say that they are `at the same level`.\r\n\r\nSometimes, we need to call a file into another, this is where we should be careful about the process.  \r\nAlways read the documentation of the `tools` you are using.\r\n\r\nIf we where developing without backend technologies, and wanted to load `main.css` in `index.ejs`, we would write :\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"../../public/css/main.css\" />\r\n```\r\n\r\nSince we where using Express and EJS as a defined template engine, we where able to use _relative paths_ to call our files.\r\n\r\n⚠️ Never begin with the `views` folder when templating, he's already detected by Express !!!\r\n\r\nWhen using `include()` :\r\n\r\n1. If two files are at the same level and we wanted to `include()` one of them into another, we just type the file name, no need for the extension, like we did with :\r\n   `<%- include('nav') %>`\r\n2. Otherwise, we navigate to the desired file by typing the folder(s) name(s) where the file is, then the file name without it's extension, like we did for :  \r\n   `<%- include('partials/head') %>` and\r\n   `<%- include('partials/footer') %>`\r\n\r\n⚠️ Never begin with the `public` folder when using it in a template, he's already detected by Express !!!\r\n\r\nWhen calling files from `public` :\r\n\r\n1.  If the file is directly inside the `public` folder, we just call it **with it's extension**.  \r\n    Let's say that `the-code-father.jpg` was directly inside the public folder and we wanted to call it inside `index.ejs`, we would write :  \r\n    `<img src=\"the-code-father.jpg\" />`\r\n2.  Otherwise, we navigate to the desired file by typing the folder(s) name(s) where the file is, then the file name **with it's extension**, like we did for :  \r\n    `<img src=\"img/the-code-father.jpg\" />`\r\n\r\n## Conclusion\r\n\r\nI hope that this tutorial will help a lot of new developers to start using EJS as a template engine in Node.js and understand how things are related together.\r\n\r\nNext one will be about improving this app 😉\r\n\r\n_This tutorial was specially made for my beloved son 💘_\r\n"}},{"0":"csp-nonce-with-nodejs-and-ejs.md","1":{"frontmatter":{"title":"CSP nonce with Node.js and EJS","description":"using a nonce for CSP with Node.js and EJS","date":"2022/07/03","tags":["Development","JavaScript","Node.js","EJS","CSP","Nonce"],"relatedPosts":["to-node-or-not-deta-is-the-answer","automatically-close-other-details"],"featuredImage":"/static/img/key-attached-to-another-in-the-lock-of-a-door.webp"},"content":"\n## Intro\n\nIn this post, I will not dive into CSP's details.\nThe link in the description, above, is enough for a simple introduction to the subject, but if you wish to go deeper I'll suggest to take a look at :\n\n-   [Content Security Policy (CSP) on MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)\n-   [Content Security Policy Level 3 on W3C](https://www.w3.org/TR/CSP3/)\n\n## CSP: script-src\n\nCSP is manly a way to declare allowed resources to load on a domain or a particular route, to reduce the risk of [Cross-site scripting (XSS)](https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting) attacks.  \nWhen a script loads into a webpage, the browser blocks the script if it's not defined in the [script-src](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src) directive of the CSP as an allowed resource.  \nWhen used, CSP will also block inline script tags like :\n\n```html\n<script>\n\tdoSomething()\n</script>\n```\n\nas well as inline event handlers like :\n\n```html\n<button id=\"btn\" onclick=\"doSomething()\"></button>\n```\n\n## CSP: style-src\n\nLike `script-src`, [style-src](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src) is used to declare the valid sources of styles.\n\nCSP `style-src` directive will block inline style tags and inline style attributes.  \nSo, the following will not load :\n\n```html\n// Inline style tag gets ignored\n<style>\n\t#my-div {\n\t\tbackground-color: red;\n\t}\n</style>\n\n// Inline style attribute gets also ignored\n<div id=\"my-div\" style=\"background-color:red\">I will not have a red background !</div>\n```\n\nNote that `style-src` directive will also block styles applied in JS via [setAttribute](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute).  \nThe following example will not be rendered :\n\n```js\ndocument.getElementById(\"my-div\").setAttribute(\"style\", \"background-color:red;\")\n```\n\nHowever, styles set on element's style property will work.  \nThe following example will be rendered :\n\n```js\ndocument.getElementById(\"my-div\").style.backgroundColor = \"red\"\n```\n\n## Unsafe expressions\n\nThere are **unsafe** ways to whitelist inline script tags, inline event handlers, inline style tags and inline styles, but I'm not going to talk about them because they are **unsafe** and break the whole point of a CSP !\n\n## Setting CSP in Node.js\n\nTo define allowed resources in a CSP via Node.js, we have to declare them as a response header :\n\n1. The user makes a request\n2. The server sends a response\n3. The browser loads the page along with allowed resources\n\nIt's in the response header that a CSP lives and where the browser will look to know what he can render.\n\nUsing [Express](https://expressjs.com/), we can simply do the following :\n\n```js\nconst express = require(\"express\")\nconst app = express()\n\n// Set CSP as a middleware function\napp.use(function (req, res, next) {\n\tres.setHeader(\n\t\t\"Content-Security-Policy\",\n\t\t\"default-src 'self'; script-src 'self'; style-src 'self'; font-src 'self'; img-src 'self'; frame-src 'self'\"\n\t)\n\n\tnext()\n})\n\napp.get(\"/\", (req, res) => {\n\tres.send(\"Hello World!\")\n})\n\napp.listen(3000, () => {\n\tconsole.log(`App 🚀 @ http://localhost:3000`)\n})\n```\n\nAs you can see, we have defined the most used directives to `'self'`, meaning that we are only allowing resources from the current host (_including URL scheme and port number_) only.  \nIf you run this app (`node index`), and follow the link, you'll get a nice **Hello World!**  \nIf you open the Console (F12), you'll see nothing since we didn't do much for now.\n\n## EJS\n\nTo render an `HTML` page, load external scripts and styles to test our CSP, I'll be using [EJS](https://ejs.co/).  \nFell free to use any other template engine that suits your needs.  \nI highly recommend EJS for the following reason :\n\n> EJS is a simple templating language that lets you generate HTML markup with plain JavaScript.\n\nAfter installing EJS (`npm i ejs`), we'll have to create a `views` folder, at the root of the app, to store the `.ejs` files.  \nEJS will look inside this folder to `render` your page(s) the way you instruct him to do.\nIn this folder, create a file called `index.ejs` with the following content :\n\n<details>\n<summary>/views/index.ejs</summary>\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>Document</title>\n\t</head>\n\t<body>\n\t\t<h1>Hello from EJS !</h1>\n\t</body>\n</html>\n```\n\n</details>\n\nYes, an `.ejs` file is an `HTML` file in which we can use plain `JavaScript`, we'll see that in a moment.\n\nUpdate our main server file to look like this :\n\n<details>\n<summary>/index.js</summary>\n\n```js\nconst express = require(\"express\")\nconst app = express()\n\n// Set CSP as a middleware function\napp.use(function (req, res, next) {\n\tres.setHeader(\n\t\t\"Content-Security-Policy\",\n\t\t\"default-src 'self'; script-src 'self'; style-src 'self'; font-src 'self'; img-src 'self'; frame-src 'self'\"\n\t)\n\n\tnext()\n})\n\n// Set EJS as a template engine\napp.set(\"view engine\", \"ejs\")\n\n// Use EJS to render our page(s)\napp.get(\"/\", (req, res) => {\n\tres.render(\"index\") // renders index.ejs\n})\n\napp.listen(3000, () => {\n\tconsole.log(`App 🚀 @ http://localhost:3000`)\n})\n```\n\n</details>\n\n## External resources\n\nNow, to test our CSP, we just have to load some external resources.  \nLet's bring on [Pure.css](https://purecss.io/) and [Lodash](https://lodash.com/).\nUpdate `index.ejs` to look like this :\n\n<details>\n<summary>/views/index.ejs</summary>\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>Document</title>\n\t\t<!-- Pure.css -->\n\t\t<link\n\t\t\trel=\"stylesheet\"\n\t\t\thref=\"https://unpkg.com/purecss@2.1.0/build/pure-min.css\"\n\t\t\tintegrity=\"sha384-yHIFVG6ClnONEA5yB5DJXfW2/KC173DIQrYoZMEtBvGzmf0PKiGyNEqe9N6BNDBH\"\n\t\t\tcrossorigin=\"anonymous\"\n\t\t/>\n\t</head>\n\t<body>\n\t\t<h1>Hello from EJS !</h1>\n\n\t\t<!-- Lodash -->\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js\"></script>\n\t</body>\n</html>\n```\n\n</details>\n\nSave `index.ejs`, reload the app in the browser, and open the Console :\n\n<details>\n<summary>Firefox Console</summary>\n\n```js\n\n⚠️ Loading failed for the <script> with source “https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js”.\n🛑 Content Security Policy: The page’s settings blocked the loading of a resource at https://unpkg.com/purecss@2.1.0/build/pure-min.css (“style-src”).\n🛑 Content Security Policy: The page’s settings blocked the loading of a resource at https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js (“script-src”).\n```\n\n</details>\n\n<details>\n<summary>Chrome Console</summary>\n\n```js\n\n🛑 Refused to load the stylesheet 'https://unpkg.com/purecss@2.1.0/build/pure-min.css' because it violates the following Content Security Policy directive: \"style-src 'self'\". Note that 'style-src-elem' was not explicitly set, so 'style-src' is used as a fallback.\n🛑 Refused to load the script 'https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js' because it violates the following Content Security Policy directive: \"script-src 'self'\". Note that 'script-src-elem' was not explicitly set, so 'script-src' is used as a fallback.\n```\n\n</details>\n\nNow, you can see that our CSP have blocked Pure.css and Lodash, so everything is working as expected since they are not defined in our CSP as allowed resources to load in the browser.\n\n## Helmet\n\nImagine, not necessarily because it happens when you are creating an app, having a reasonable amount of scripts and styles to whitelist.  \nThe CSP middleware function in the main server file will grow and become sort of ugly and hard to maintain.  \nAn **excellent** alternative would be to use [Helmet](https://helmetjs.github.io/) _if you're using Express_.\n\n> Helmet helps you secure your Express apps by setting various HTTP headers.\n\nLet's add Helmet to our Express app with the following command `npm i helmet`.  \nTo easily maintain our CSP, let's move it inside a `middleware` folder, a the root of the app, in a file called `helmet.js`.  \nThe app structure looks like the following tree :\n\n```txt\nApplication's root without node_modules folder\n├── index.js\n├── middleware\n│  └── helmet.js\n├── package-lock.json\n├── package.json\n└── views\n  └── index.ejs\n```\n\nLet's add a CSP with Helmet :\n\n<details>\n<summary>/middleware/helmet.js</summary>\n\n```js\nconst helmet = require(\"helmet\")\n\nmodule.exports = helmet()\n```\n\n</details>\n\nand update `index.js` to call this middleware :\n\n<details>\n<summary>/index.js</summary>\n\n```js\nconst express = require(\"express\")\nconst app = express()\n\n// Set CSP using Helmet\nconst helmet = require(\"./middleware/helmet\")\napp.use(helmet)\n\n// Set EJS as a template engine\napp.set(\"view engine\", \"ejs\")\n\n// Use EJS to render our page(s)\napp.get(\"/\", (req, res) => {\n\tres.render(\"index\") // renders index.ejs\n})\n\napp.listen(3000, () => {\n\tconsole.log(`App 🚀 @ http://localhost:3000`)\n})\n```\n\n</details>\n\nSave both files, refresh your browser, and open the Console :\n\n<details>\n<summary>Firefox Console</summary>\n\n```js\n\n⚠️ Content Security Policy: Couldn’t process unknown directive ‘script-src-attr’\n⚠️ Loading failed for the <script> with source “https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js”.\n🛑 Content Security Policy: The page’s settings blocked the loading of a resource at https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js (“script-src”).\n```\n\n</details>\n\n<details>\n<summary>Chrome Console</summary>\n\n```js\n\n🛑 Refused to load the script 'https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js' because it violates the following Content Security Policy directive: \"script-src 'self'\". Note that 'script-src-elem' was not explicitly set, so 'script-src' is used as a fallback.\n```\n\n</details>\n\nAs you can see, now only Lodash is blocked 🤔\nAnd Firefox is throwing a warning for an unknown directive.\n\nUnder the hood, a lot is happening, and it will take a series of posts to explain in detail each header and how to configure them...\n\nBut just that you know, Helmet sets a bunch of default values to protect your endpoint.  \nOne of them is :  \n`style-src 'self' https: 'unsafe-inline';`  \nThis is the directive allowing Pure.css.  \nIt means : _\"allow any styles' source from my domain, or styles' source served over https, or inline styles\"_.  \nBut as I've said before, any `'unsafe-...'` expression is **unsafe** and should not be used unless their is really no other option...  \nI've linked at the beginning of this section to Helmet's documentation.  \nWe'll be addressing all issues, properly, in the next and last section.\n\n## Hash and Nonce\n\nTo allow the execution of inline scripts, inline event handlers and inline styles, a hash or a nonce that matches the inline code can be specified, to avoid using the `'unsafe-inline'`expression.\n\n### Hash\n\n---\n\nA [hash](https://content-security-policy.com/hash/) is a string composed of two parts connected by a dash with each other :\n\n1. The cryptographic algorithm used to create the hash value.\n2. The base64-encoded hash of a script or style.\n\nCSP supports sha256, sha384 and sha512.\n\nBut when you hash a script or a style, the generated string matches only the hashed code, meaning that if the code changes in any way (dot, space, new line, comment, added/removed/formatted code), the hash will no longer match the code who gets blocked !  \nIn this case, you'll have to regenerate a hash that matches the modified code...  \nIt's a time consuming process if your code changes a lot, but commonly used and **recommended** over a nonce especially for static scripts.\n\nFrom MDN :\n\n> Note: Only use nonce for cases where you have no way around using unsafe inline script or style contents. If you don't need nonce, don't use it. If your script is static, you could also use a CSP hash instead. (See usage notes on [unsafe inline script](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src#unsafe_inline_script).) Always try to take full advantage of CSP protections and avoid nonces or unsafe inline scripts whenever possible.\n\n### Nonce\n\n---\n\nOn the other hand, a [nonce](https://content-security-policy.com/nonce/) is a cryptographic **number used once**, generated using a cryptographically secure random number generator, that must be unique for each HTTP response as a random base64-encoded string of at least 128 bits of data.\n\nSo, in the case of server-side rendering, a nonce is more often used, and can be used for inline and external scripts and styles.  \nNote that a `nonce-value` will not allow stylesheet requests originating from the `@import` rule !\n\nTo use a nonce, for a script, we have to declare at the top of our `script-src` directive the `'strict-dynamic'` expression to allow the execution of that script as well as any script loaded by this root script.  \nWhen using the `'strict-dynamic'` expression, other expressions such as `'self'` or `'unsafe-inline'` will be ignored.\n\nI like to keep my code clean and maintainable because at one point or another I'll want to update it, this is why I split (as most developers) my code into pieces where each one is easily trackable in a near or far future.\nLet's add a file called `nonces.js` in the `middleware` folder, the app structure now looks like the following tree :\n\n```text\nApplication's root without node_modules folder\n├── index.js\n├── middleware\n│  ├── helmet.js\n│  └── nonces.js\n├── package-lock.json\n├── package.json\n└── views\n  └── index.ejs\n```\n\nOpen `nonces.js` and add the following content :\n\n```js\n// Determining if crypto support is unavailable\nlet crypto\ntry {\n\tcrypto = require(\"crypto\")\n} catch (err) {\n\tconsole.log(\"crypto support is disabled!\")\n}\n\n// Generating a nonce for Lodash with crypto\nlet lodashNonce = crypto.randomBytes(16).toString(\"hex\")\n\n// Maybe you'll have some other later\nmodule.exports = { lodashNonce }\n```\n\nThe [crypto](https://nodejs.org/docs/latest-v16.x/api/crypto.html) module is a built-in functionality of Node.js but it's better to check if it's included or not, in our installation, just like the docs.\n\nNow, update `helmet.js` :\n\n<details>\n<summary>/middleware/helmet.js</summary>\n\n```js\nconst helmet = require(\"helmet\")\nlet { lodashNonce } = require(\"./nonces\")\n\nmodule.exports = helmet({\n\tcontentSecurityPolicy: {\n\t\tdirectives: {\n\t\t\tscriptSrc: [\n\t\t\t\t\"'strict-dynamic'\", // For nonces to work\n\t\t\t\t`'nonce-${lodashNonce}'`,\n\t\t\t],\n\t\t\tscriptSrcAttr: null, // Remove Firefox warning\n\t\t\tstyleSrc: [\"'self'\", \"https:\"], // Remove 'unsafe-inline'\n\t\t},\n\t},\n})\n```\n\n</details>\n\nThis way is much elegant, clean and maintainable than a middleware function in the main server file.\n\nFinally, we'll have to pass the generated nonce from the route were we need to load the script as a variable and grab this variable in the route's template where the script tag is.  \nI'll be commenting the code to explain the steps :\n\n<details>\n<summary>/index.js</summary>\n\n```js\nconst express = require(\"express\")\nconst app = express()\n\n// Set CSP with helmet\nconst helmet = require(\"./middleware/helmet\")\napp.use(helmet)\n\napp.set(\"view engine\", \"ejs\")\n\n/**\n * 1- We require lodashNonce\n * 2- This is our route \"/\"\n * 3- We are rendering \"index.ejs\"\n * 4- We pass lodashNonce into the route,\n * with the second argument of res.render\n * which is an object, as a variable\n * 5- This object is now accessible\n * in the EJS template file\n * 6- We'll get lodashNonce value\n * by the ourGenerateNonce key\n * in the EJS template file\n * 7- That's it here, open index.ejs below\n */\nlet { lodashNonce } = require(\"./middleware/nonces\")\napp.get(\"/\", (req, res) => {\n\tres.render(\"index\", { ourGenerateNonce: lodashNonce })\n})\n\napp.listen(3000, () => {\n\tconsole.log(`App 🚀 @ http://localhost:3000`)\n})\n```\n\n</details>\n\n<details>\n<summary>/views/index.ejs</summary>\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>Document</title>\n\t\t<!-- Pure.css -->\n\t\t<!-- \n\t\t\tUse JSDELIVR to load Pure.css instead of UNPKG\n\t\t-->\n\t\t<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/purecss@2.1.0/build/pure-min.min.css\" />\n\t</head>\n\t<body>\n\t\t<h1>Hello from EJS !</h1>\n\n\t\t<!-- Lodash -->\n\t\t<!-- \n\t\t\tSet the nonce attribute to ourGenerateNonce\n\t\t\tusing EJS output value tag <%= %>\n\t\t-->\n\t\t<script\n\t\t\tnonce=\"<%= ourGenerateNonce %>\"\n\t\t\tsrc=\"https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js\"\n\t\t></script>\n\t</body>\n</html>\n```\n\n</details>\n\nSave those files,reload your browser and open the browser's console 🥳🎉🎊  \nCongrats, you've just loaded an external script using a nonce !\n\nHope that this post was helpful.  \nNext one will be about EJS.\n"}},{"0":"to-node-or-not-deta-is-the-answer.md","1":{"frontmatter":{"title":"To Node or not ? Deta is the answer !","description":"exploring Node.js with Deta Cloud","date":"2022/06/26","tags":["Development","JavaScript","Node.js"],"relatedPosts":["back-to-the-roots-with-a-static-site","clear-your-local-development-cache-with-js"],"featuredImage":"/static/img/computer-screen-displaying-node-js-modules.webp"},"content":"\r\n## Motivation\r\n\r\nAfter [getting back to the roots with a static site](/posts/back-to-the-roots-with-a-static-site) and working with Node.js on real projects in the static world, I wanted to try it on a server to dive a little bit deeper and understand how it works by itself.\r\n\r\n## Quest & luck\r\n\r\nSo, I started to search for a free Node.js hosting and it took me a while, with a lot of chance, to land on an awesome project called Deta.\r\nThe great developers behind Deta define it as **The Cloud for Doers & Dreamers** and describe it as _the universe's most developer friendly cloud platform_.\r\nHonestly speaking, I can only confirm those declarations because I've tried some other platforms !\r\n\r\nDeta gives you :\r\n\r\n-   blazing fast micro servers, called **Micros**, to get your apps to live.\r\n-   fast, scalable and secure NoSQL database with unlimited storage, called **Base**.\r\n-   safely encrypted 10GB cloud storage, called **Drive**.\r\n\r\nAll of those services are completely and 100% **FREE** with no catch at all !\r\n\r\n## Simplicity\r\n\r\nThe amazing part of Deta is it's simplicity.!\r\nOne statement on Deta's homepage tells everything about it :\r\n\r\n> You don't need a degree to use Deta\r\n\r\nThe [Docs](https://docs.deta.sh/docs/home) are straightforward with simple examples to get you right away on the track.\r\nThe [CLI](https://docs.deta.sh/docs/cli/commands) to manage **Micros** is crystal clear and dead simple.\r\n\r\nSince my [first_micro](https://docs.deta.sh/docs/micros/getting_started#creating-your-first-micro), Deta gave me, and give me everyday, the opportunity to learn, apply, test, deploy and evolve as a developer in many ways.\r\n\r\nI was finally able to understand how much power and flexibility a Node.js server can give if configured correctly.\r\nI've also been able to work for real with [GraphQL](https://graphql.org/) without DB adapters/connectors.\r\nAnd so on...\r\n\r\n## Final word\r\n\r\nDeta is, for me, the best Node.js platform you could ever dream of !\r\nDeta is made by great developers with developers concerns in mind !\r\nDeta's spirit reflects the generosity and kindness of it's team who's always there to help !\r\n\r\nThank you Deta 💘\r\n"}},{"0":"automatically-close-other-details.md","1":{"frontmatter":{"title":"Automatically close other <details>","description":"closing all <details> tag when another one is open","date":"2021/02/10","tags":["Tips and Tricks","JavaScript"],"relatedPosts":["change-page-title-dynamically","clear-your-local-development-cache-with-js"],"featuredImage":"/static/img/matrix-background.webp"},"content":"\r\nI was writing a post about MidDay, [my new WordPress Theme](/posts/midday-wordpress-theme), and wanted to include a simple FAQ section but with a little of style, this is when I remembered the `<details>` tag.\r\n\r\nIt's an awesome **accessible** element, similar to an accordion.\r\n\r\n<details>\r\n<summary>How to create one ?</summary>\r\nYou have just opened one 😁<br>\r\nJust follow the pattern in the code.\r\n\r\n```html\r\n<details>\r\n\t<summary>Summary/Question about the content</summary>\r\n\tAnd here is the content, it could be anything, even code like this example 😉\r\n</details>\r\n```\r\n\r\n</details>\r\n\r\nBut when we use more than one `<details>` tag on the same page, especially when they are one after another, we can see that if one is opened and we open another one, the first stays opened.  \r\nImagine having 5 or more after each other, with a reasonable amount of content, they will take a lot of space.\r\nAs an example, you can take a look at this informative pen : [Teaching the Details Element with ... Details Elements!](https://codepen.io/jdsteinbach/pen/GYmQjo)\r\n\r\n<details>\r\n<summary>So how to close the opened one ?</summary>\r\nEasy !<br>\r\nJust include the following code in your scripts file or in a <code>script</code> tag at the bottom of your page before the closing <code>body</code> tag.\r\n\r\n```js\r\n/** Close others <details> tag */\r\nconst allDetails = document.querySelectorAll(\"details\")\r\n\r\nallDetails.forEach((details) => {\r\n\tdetails.addEventListener(\"toggle\", (e) => {\r\n\t\tif (details.open) {\r\n\t\t\tallDetails.forEach((details) => {\r\n\t\t\t\tif (details != e.target && details.open) {\r\n\t\t\t\t\tdetails.open = false\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n})\r\n```\r\n\r\n</details>\r\n\r\nLet's break it down !\r\n\r\nFirst we select all the `<details>` tag :\r\n\r\n```js\r\nconst allDetails = document.querySelectorAll(\"details\")\r\n```\r\n\r\nAnd we iterate over them :\r\n\r\n```js\r\nallDetails.forEach(details => {\r\n```\r\n\r\nThen we listen to the `toggle` event used by the `<details>` element whenever its state changes between open and closed :\r\n\r\n```js\r\ndetails.addEventListener('toggle', (e) => {\r\n```\r\n\r\nNow, we wait for any `<details>` to be `open` :\r\n\r\n```js\r\nif (details.open) {\r\n```\r\n\r\nWe iterate once again over all the `<details>` and check if anyone of them was not the `target` of the `toggle` event and was `open`, if so, we just close it by removing it's open state :\r\n\r\n```js\r\nallDetails.forEach((details) => {\r\n\tif (details != e.target && details.open) {\r\n\t\tdetails.open = false\r\n\t}\r\n})\r\n```\r\n\r\nIn other words, if a `<details>` element was opened, it have the `open` attribute. Now if another `<details>` element is open, we remove the `open` attribute from the previous, leaving only the actual targeted one opened.\r\n\r\nHope that this was useful, and that you'll start using [The Details disclosure element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details).\r\n"}},{"0":"midday-wordpress-theme.md","1":{"frontmatter":{"title":"MidDay WordPress theme","description":"the development and usage of MidDay WordPress theme","date":"2021/02/02","tags":["Development","Theme"],"featuredImage":"/static/img/woman-lying-on-green-grass-while-holding-pencil.webp","relatedPosts":["full-screen-morphing-search-plugin","the-clean-blog-wordpress-theme"]},"content":"\r\nHello everyone,\r\n\r\n## Credits\r\n\r\nThis WordPress theme wouldn’t have seen the light without :\r\n\r\n-   [Black & White Portfolio Template](https://www.w3schools.com/w3css/tryw3css_templates_bw_portfolio.htm) by [w3schools.com](https://www.w3schools.com/)\r\n-   [Blog](https://purecss.io/layouts/blog/) template by [Pure.css](https://purecss.io/)\r\n-   [Ari Stathopoulos](https://aristath.github.io/) blog\r\n-   [Underscores](https://underscores.me/) starter theme for WordPress\r\n-   [Normalize.css](https://necolas.github.io/normalize.css/) by [Nicolas Gallagher](https://github.com/necolas)\r\n-   and our beloved CMS [WordPress](https://wordpress.org/)\r\n\r\n## About\r\n\r\nAfter releasing my first WordPress theme, [The Clean Blog](https://wordpress.org/themes/the-clean-blog/), in 2017 and rewriting it from ground up in 2019, I wanted to create a new responsive, clear, clean, bold and dead simple WordPress theme, without any unnecessary functionalities or bells and whistles...  \r\nMy main concern was typography, I wanted a responsive, big and bold typography, so I chose [Mike Riethmuller](https://twitter.com/MikeRiethmuller) approach explained in [Precise control over responsive typography](https://www.madebymike.com.au/writing/precise-control-responsive-typography/).  \r\nThen, looking here and there for templates with big sidebar, I've been inspired by the templates mentioned above.  \r\nA little from this, a little from that, and MidDay's HTML template was born.  \r\nFinally, MidDay's HTML template was ported to WordPress.\r\n\r\n## Usage\r\n\r\n1- To use this theme, you have to [download](https://wordpress.org/themes/midday/) it from the WordPress themes repository and add it under _Appearance→Themes→Add New→Upload Theme_, or search for **MidDay** under _Appearance→Themes→Add New_ in the backend.\r\n\r\n2- Please note that this theme's menu is a one level depth only, meaning that there is no sub-menu, so even if you add them they will not appear.\r\n\r\n3- In the Customizer (_Appearance→Customize_ or _Customize_ link in the Admin Bar), you'll find a panel named _MidDay Theme_ and three sections (for now: _Sidebar Image_, _Title & Tagline Color_, and _Footer Copyright Area_) under it.  \r\nUnder each section, controls are explained in details.  \r\nNote that the first section _Sidebar Image_ is only for the home page, each post and page can have their own sidebar image by assigning a Featured image to the post or the page.\r\n\r\n4- MidDay is a Responsive, Clear, Clean, Bold and dead Simple WordPress theme. Perfect for personal or company blogs.\r\n\r\n## Frequently Asked Questions\r\n\r\n<details>\r\n<summary>The Menu is not opening !</summary>\r\nThis is because this menu needs at least 2 items !\r\n</details>\r\n<details>\r\n<summary>The Menu is not showing children items !</summary>\r\nThis is because this menu is a one level menu only !\r\n</details>\r\n<details>\r\n<summary>Does this theme support any plugins?</summary>\r\nMidDay includes support for Infinite Scroll in Jetpack.\r\n</details>\r\n\r\n## Feedback / Issue ?\r\n\r\nHead over the [support](https://wordpress.org/support/theme/midday/) page to tell me if you’re having some issues or if you wish to see some features added to the theme 😉  \r\nYou can also leave a review on the [reviews](https://wordpress.org/support/theme/midday/reviews/) page to give me a push 👍  \r\nThanks in advance for your feedback !\r\n\r\n## Final word\r\n\r\nI really hope that this theme will be useful for a lot of WordPress users and that they'll enjoy using it.  \r\nI'll be making improvements to MidDay from time to time, and be talking about it here, so stay tuned !\r\n\r\n_This documentation is also available on [GitHub](https://github.com/LebCit/midday/wiki/MidDay-documentation)._\r\n"}},{"0":"creating-a-customizer-control-with-javascript.md","1":{"frontmatter":{"title":"Creating a Customizer control with JavaScript","description":"creating a control, from A to Z, in WordPress Customizer with JavaScript","date":"2020/06/01","tags":["JavaScript","Customizer","Development"],"featuredImage":"/static/img/screenshot-creating-a-customizer-control-with-javascript.webp","relatedPosts":["listen-for-changes-in-customizer-preview","modifying-wordpress-theme-copyright-from-the-customizer"]},"content":"\r\nDid you know that you can create panels, sections and controls in the Customizer with JavaScript ?  \r\n\"The PHP API for their registration is essentially a wrapper for the underlying JS API\" as mentioned by Weston Ruter in [Improvements to the Customize JS API in 4.9](https://wp.me/p2AvED-6c4)\r\n\r\nHe also says \"you can also avoid statically registering settings and partials in PHP by instead adding filters to dynamically recognize settings and partials, allowing them to be registered on demand\", meaning that you can create settings and partials in JS but will have to register them in PHP via a filter because they must be sanitized and validated by the server for security reasons !\r\n\r\nFor this task, we need to :\r\n\r\n-   access the Customizer Pane to create a Panel, a Section, a Setting and a Control with JS\r\n-   access the Customizer Preview to define the related Partial of the Control with JS\r\n-   add a filter to validate and sanitize the Setting with PHP  \r\n    For more information about how things are related in the Customizer, please read my post [Listen for changes in Customizer Preview !](/posts/listen-for-changes-in-customizer-preview)\r\n\r\nI'll explain it as if the reader is a beginner so she/he can understand and follow along.\r\n\r\nMy tree looks like this:\r\n\r\n```txt\r\n    - theme ( main folder)\r\n    -- inc (folder)\r\n    --- customizer.php\r\n    -- js (folder)\r\n    --- controls.js\r\n    --- customizer.js\r\n    --- main.js\r\n    -- functions.php\r\n```\r\n\r\nThe functions.php file is used to :\r\n\r\n-   enqueue and localize main.js where we will render on the front end our choice(s) from the Customizer\r\n-   require the customizer.php file where we hook controls.js (for Customizer Pane) and customizer.js (for Customizer Preview)  \r\n    We can of course hook controls.js and customizer.js from functions.php but it's better to keep things separated.\r\n\r\n```php\r\n// File functions.php\r\n/**\r\n * Load and localize main.js.\r\n */\r\nfunction main_js() {\r\n    wp_enqueue_script( 'main-js', get_theme_file_uri( '/js/main.js' ), array(), '1.0', true );\r\n    // Localize the script with new data and pass php variables to JS.\r\n    $main_js_data = array(\r\n        /** FOR LATER USE. */\r\n        'siteTitleColor' => get_theme_mod('siteTitleColorSetting', '#fff'),\r\n    );\r\n    wp_localize_script( 'main-js', 'main_vars', $main_js_data );\r\n}\r\nadd_action( 'wp_enqueue_scripts', 'main_js' );\r\n\r\n/**\r\n * Customizer additions.\r\n */\r\nrequire get_template_directory() . '/inc/customizer.php';\r\n```\r\n\r\n```php\r\n// File customizer.php\r\n/**\r\n * Hooking in JS code to affect the controls in the Customizer.\r\n */\r\nfunction midday_customize_controls_js() {\r\n    wp_enqueue_script( 'midday-controls', get_template_directory_uri() . '/js/controls.js', array( 'customize-controls' ), filemtime( get_theme_file_path( '/js/controls.js' ) ), true );\r\n}\r\nadd_action( 'customize_controls_enqueue_scripts', 'midday_customize_controls_js' );\r\n\r\n/**\r\n * Binds JS handlers to make Theme Customizer preview reload changes asynchronously.\r\n */\r\nfunction midday_customize_preview_js() {\r\n    wp_enqueue_script( 'midday-customizer', get_template_directory_uri() . '/js/customizer.js', array( 'customize-preview' ), '20151215', true );\r\n}\r\nadd_action( 'customize_preview_init', 'midday_customize_preview_js' );\r\n```\r\n\r\nIf you don't know what is [wp_localize_script()](https://developer.wordpress.org/reference/functions/wp_localize_script/) , think of it as a bridge between PHP and JS where we can pass variables from PHP to JS.  \r\nJust to let you know, there is also another function [wp_add_inline_script()](https://developer.wordpress.org/reference/functions/wp_add_inline_script/) to add JS code to a registered JS file.\r\n\r\nNow that we are all set, let's create a Panel, a Section, a Setting and a Control in controls.js to change the site title color.\r\n\r\n```js\r\n/**\r\n * File controls.js\r\n *\r\n * Access Theme Customizer Controls for a better user experience.\r\n */\r\n;(function (api) {\r\n\tapi.bind(\"ready\", function () {\r\n\t\t// Create panel.\r\n\t\tapi.panel.add(\r\n\t\t\tnew api.Panel(\"myPanel\", {\r\n\t\t\t\ttitle: \"Theme Options\",\r\n\t\t\t\tdescription: \"Customize Theme\",\r\n\t\t\t\tpriority: 5, // Optional default is 160.\r\n\t\t\t})\r\n\t\t)\r\n\t\t// Site Title Color Section.\r\n\t\tapi.section.add(\r\n\t\t\tnew api.Section(\"siteTitleColorSection\", {\r\n\t\t\t\ttitle: \"Site Title Color Section\",\r\n\t\t\t\tpanel: \"myPanel\",\r\n\t\t\t\tcustomizeAction: \"Customizing ▸ Site Title Color\", // String above title's Section.\r\n\t\t\t\tpriority: 5, // The order of this section in the panel.\r\n\t\t\t})\r\n\t\t)\r\n\t\t// Site Title Color Setting.\r\n\t\tapi.add(\r\n\t\t\tnew api.Setting(\"siteTitleColorSetting\", \"#fff\", {\r\n\t\t\t\ttransport: \"postMessage\",\r\n\t\t\t})\r\n\t\t)\r\n\t\t// Site Title Color Control.\r\n\t\tapi.control.add(\r\n\t\t\tnew wp.customize.ColorControl(\"siteTitleColorControl\", {\r\n\t\t\t\tsection: \"siteTitleColorSection\",\r\n\t\t\t\tlabel: \"Site Title Color Control\",\r\n\t\t\t\tsetting: \"siteTitleColorSetting\",\r\n\t\t\t\tpriority: 5, // The order of this control in the section.\r\n\t\t\t})\r\n\t\t)\r\n\t})\r\n})(wp.customize)\r\n```\r\n\r\nPlease note that the pattern for the Setting is different from the others !  \r\nFor the Setting, we type `api.add(setting)` and define in the `setting` an `id`, a `defaultValue`, then we pass the desired call type (here we are using `postMessage`).\r\n\r\nNow, let's access the Customizer Preview in customizer.js and define how the Setting joins the Control to the Partial.\r\n\r\n```js\r\n/**\r\n * File customizer.js.\r\n *\r\n * Theme Customizer enhancements for a better user experience.\r\n *\r\n * Contains handlers to make Theme Customizer preview reload changes asynchronously.\r\n */\r\n\r\n;(function ($) {\r\n\t// Site Title Color.\r\n\twp.customize(\"siteTitleColorSetting\", function (value) {\r\n\t\tvalue.bind(function (new_value) {\r\n\t\t\t$(\".site-title a\").css(\"color\", new_value)\r\n\t\t})\r\n\t})\r\n})(jQuery)\r\n```\r\n\r\nNow, let's add in customizer.php the filter to validate and sanitize our Setting, preferably (for logic) after the code that hooks controls.js\r\n\r\n```php\r\n// File customizer.php\r\nadd_filter(\r\n    'customize_dynamic_setting_args',\r\n    function( $setting_args, $setting_id ) {\r\n        if ( 'siteTitleColorSetting' === $setting_id ) {\r\n            $setting_args = array(\r\n                'sanitize_callback' => 'sanitize_hex_color',\r\n            );\r\n        }\r\n        return $setting_args;\r\n    },\r\n    10,\r\n    2\r\n);\r\n```\r\n\r\nAs you can see, the above function uses the `customize_dynamic_setting_args` filter to tell the server to validate/recognize the Setting and to sanitize it.  \r\nThe number 10 is the priority of execution of the function, and the number 2 is the number of arguments the function accepts.  \r\nMore info about [add_filter()](https://developer.wordpress.org/reference/functions/add_filter/) in the Code Reference.\r\n\r\nNow, if you go to the Customizer, you'll find the created panel, section, setting and control.  \r\nIf you try to change the site title it will change according to your choice.  \r\nBut if you publish it, nothing will happen on the front end 🤔  \r\nSo, our final step is to render/reflect our choice in the Customizer on the front end.\r\nRemember the beginning of this post ?  \r\nWe have loaded and localized main.js for this purpose 😉  \r\nOpen main.js and add the following code\r\n\r\n```js\r\n/**\r\n * File main.js.\r\n *\r\n * Handles theme's JS functions.\r\n */\r\n\"use strict\"\r\n\r\nconst siteTitleColor = midday_vars.siteTitleColor // Retriving the passed variable from PHP to JS.\r\nconst siteTitleAnchor = document.querySelector(\".site-title a\") // Select the site title anchor.\r\nif (siteTitleColor) {\r\n\t// If their is any value.\r\n\tsiteTitleAnchor.style.color = siteTitleColor // Add this value as a color to the site title anchor.\r\n}\r\n```\r\n\r\nThe code is explained and easy to understand, if you have any question don't hesitate !\r\n\r\nAs a final note, I would like to let you know that I've created the same control with PHP along with the JS one.  \r\nWhen we change the site title color with the PHP control (let's say `#000`) and the JS control (let's say `#fff`) and publish our changes, it's the JS control that takes over 💪\r\n\r\nHope this post will help you begin using the Customizer's JS API instead of it's PHP API 😊\r\n"}},{"0":"clear-your-local-development-cache-with-js.md","1":{"frontmatter":{"title":"Clear your local development cache with JS","description":"clearing your local development cache with JavaScript without a server side language","date":"2020/05/27","tags":["Tips and Tricks","JavaScript"],"featuredImage":"/static/img/stacked-memory-photos.webp","relatedPosts":["automatically-close-other-details","change-page-title-dynamically"]},"content":"\r\nWhen we use a server side language to get our changes this is what happens :  \r\n1- the Request is made by the browser to the server  \r\n2- the Response is sent from the server to the browser  \r\nIn this case, if any changes are made within the files, the server will serve the browser with those changes.  \r\nBut, what if you're not using a server side language for your local development ?!\r\n\r\nIf you're locally developing a website on the Classic Road (HTML + CSS + JS) without a plugin in your IDE to synchronize your changes, **and have some generated cache**, you'll have to refresh your page twice and sometimes more to see the changes you've just made even if you're using a local server as Laragon, WAMP, MAMP, XAMPP...  \r\nDid you ever asked yourself how much time you're spending on refreshing twice ?!  \r\nThis is a time killer, it's very annoying, and you're productivity will be affected !\r\n\r\nThe solution would be to **clear the cache** when we refresh the page, you would say \"use Ctrl + F5 !\" and I would respond \"go try it with your generated cache !\".\r\n\r\nTo clear the cache when we hit the refresh button :  \r\n1- we'll have to access the `loading state` of the document _without waiting_ for stylesheets, images...  \r\n2- we'll have to `open` the cache and access the particular cache causing headaches  \r\n3- we'll have to `delete` this particular cache !\r\n\r\n```js\r\nif (document.readyState === \"loading\") {\r\n\t// Loading hasn't finished yet\r\n\tdocument.addEventListener(\"DOMContentLoaded\", function () {\r\n\t\tconsole.log(\"loading...\")\r\n\t\tcaches.open(\"cacheNameCausingHeadaches\").then(function (cache) {\r\n\t\t\tcache.delete(document.URL).then(function () {\r\n\t\t\t\tconsole.log(\"deleted\")\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n}\r\n```\r\n\r\nPaste this code at the end of your scripts before the closing body tag and refresh your page twice for the last time !\r\n\r\nTo get the `cacheNameCausingHeadeaches` :\r\n\r\n```js\r\ncaches.keys().then(function (keyList) {\r\n\tconsole.log(\"keyList\")\r\n})\r\n```\r\n\r\nI'm here to share and learn 😊 so if you have a better way without an IDE plugin for a static site with some cache please let me know because I like to refresh and see the difference 😉\r\n\r\nHope this will be useful.\r\n"}},{"0":"change-page-title-dynamically.md","1":{"frontmatter":{"title":"Change page title dynamically","description":"changing the document title when the user leaves your site's tab","date":"2020/05/26","tags":["Tips and Tricks","JavaScript"],"relatedPosts":["automatically-close-other-details","clear-your-local-development-cache-with-js"]},"content":"\r\nA good way to grab the the user's attention is of course to write useful content 😁  \r\nBeing funny is also a very good strategy to keep users coming back to your blog.  \r\nA little bit of originality won't harm at all !\r\n\r\nWe are going to use the [Page Visibility API](https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API) to detect if the user is on your site's tab or on another tab, and change your site's tab title using the [Document.title](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) property and an awesome french song title 😉\r\n\r\n```js\r\n// Grab the document title of your site's current tab.\r\nlet currentTabTitle = document.title\r\n// Listen to visibility change events\r\ndocument.addEventListener(\"visibilitychange\", function () {\r\n\t// Fires when user leaves your site's tab.\r\n\tdocument.visibilityState === \"hidden\"\r\n\t\t? // Document title when user leaves your site's tab.\r\n\t\t  (document.title = `Ne Me Quitte Pas 😭`)\r\n\t\t: // Document title when user comes back to your site's tab.\r\n\t\t  (document.title = currentTabTitle)\r\n})\r\n```\r\n\r\nThis [Conditional (ternary) operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) is like an [if...else statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else)\r\n\r\n**Important note**: since the first change will occur when the user leaves your site's tab, we begin by listening to the `hidden` state (when the page's content is not visible to the user) and we change your tab title to whatever... Once the user gets back to your site's tab, the original tab title will be reassigned since we've grab it earlier.\r\n\r\nYou can see it wright here, change to another tab or open a new one 😉\r\n\r\nDon't forget to check out [the song](https://youtu.be/Vz6r0TP4FBI) 🎶\r\n"}},{"0":"listen-for-changes-in-customizer-preview.md","1":{"frontmatter":{"title":"Listen for changes in Customizer Preview !","description":"how to listen for any changes in WordPress Customizer Preview","date":"2020/05/24","tags":["Development","Tips and Tricks","Customizer"],"featuredImage":"/static/img/ears-of-chiatto-bunny.webp","relatedPosts":["creating-a-customizer-control-with-javascript","modifying-wordpress-theme-copyright-from-the-customizer"]},"content":"\r\nOne of the most beautiful functionalities of WordPress is the Customizer, because it allows developers to give a simple way for users to modify themes/plugins appearance and behavior.  \r\nHowever, this beauty has it's own code of conduct.  \r\nLet's scratch it a little bit to find out how to listen for changes in the Customizer Preview.\r\n\r\nI always like to assume that the reader maybe a beginner, like I was a long time ago, and explain everything from A to Z, so she/he can follow the tutorial or jump to any part according to her/his experience.\r\n\r\nFor simplicity and practice, as usual 😊, I’ll be using an [\\_s](https://underscores.me/) (underscores) generated theme, and call it _Customizer Preview_ 😉. It’s a 1 minute process, so don’t be afraid, type in the _Theme Name,_ download it, and upload it like any other theme under _Appearance \\> Themes \\> Add New \\> Upload Theme_.  \r\n Now you’re all set and we can begin.\r\n\r\n## Understanding how it’s related\r\n\r\nIn the [functions.php](https://codex.wordpress.org/Functions_File_Explained) file, search for _customizer.php_, you’ll find a line like this one :\r\n\r\n```php\r\nrequire get_template_directory() . '/inc/customizer.php';\r\n```\r\n\r\nSo the file [customizer.php](https://codex.wordpress.org/Theme_Customization_API) is located in a folder named **_inc_** at the root of the theme.\r\nIf you look inside this file, at the very bottom, you’ll find a little block of code like this one :\r\n\r\n```php\r\n/**\r\n * Binds JS handlers to make Theme Customizer preview reload changes asynchronously.\r\n */\r\nfunction customizer_preview_customize_preview_js() {\r\n    wp_enqueue_script( 'customizer-preview-customizer', get_template_directory_uri() . '/js/customizer.js', array( 'customize-preview' ), '20151215', true );\r\n}\r\nadd_action( 'customize_preview_init', 'customizer_preview_customize_preview_js' );\r\n```\r\n\r\nSo here, we have a call for another file **customizer.js**, located in a folder named **_js_** at the root of the theme.  \r\n If you take a look inside it, you’ll find a bunch of code allowing us to view the changes we make from the Customizer.\r\n\r\n## The Customizer’s Parts\r\n\r\nWhen you open the Customizer, you’ll find yourself in front of a screen with two parts :\r\na- the **Customizer Pane** where the **Controls** (like Background Image) of a theme are defined in **customizer.php**  \r\nb- the **Customizer Preview** where the **Settings** defined in **customizer.js** act like a bridge between the Controls and their related Partials.\r\n\r\nA **Partial** is simply a particular part of a theme like the header, the body, the footer, the logo, the site title, the tagline… and so on.\r\n\r\nAs an example, you could have a Control to control the site title color by a Setting linking that color Control to the desired Partial (here the site title).  \r\nNow, when you change the color Control in the Pane, the defined Setting for this color Control calls the related Partial in the Preview and tells him to change according to the modifications of his Control.\r\n\r\nIf you want to dive more into that, you can read about the [Customizer Objects](https://developer.wordpress.org/themes/customize-api/customizer-objects/) in the Theme Handbook.\r\n\r\n## Listening to changes\r\n\r\nAt this point, you understand how the Customizer’s parts communicate.  \r\nBut what if you need to listen for changes in the Preview ?  \r\nThis will be mostly a need if you are a developer or in the process of becoming one 💪👍\r\n\r\nQuick quizz. Where do you think the following code will go ?  \r\nDon’t look under the code before giving an answer 😁\r\n\r\n```js\r\n// Listen for any changes in the Customizer Preview.\r\nwp.customize.bind(\"change\", function (setting) {\r\n\t// Target the Setting, let's take background_image as an example.\r\n\tif (0 === setting.id.indexOf(\"background_image\")) {\r\n\t\t// The background is empty by default.\r\n\t\t// So, we begin by listening to a non empty value,\r\n\t\t// to catch the first change when it happens !\r\n\t\tif (setting._value != \"\") {\r\n\t\t\tconsole.log(\"I Now Have A Background 🙂\")\r\n\t\t} else {\r\n\t\t\tconsole.log(\"I Do Not Have A Background 🙁\")\r\n\t\t}\r\n\t}\r\n})\r\n```\r\n\r\nWhat does this code do ?  \r\nIt listen to any `'change'` of a defined `( setting )`.  \r\nRemember, a Setting is a bridge allowing communication between a Control and it’s related Partial.  \r\nSo when a communication occurs, a change is ongoing and then done !  \r\nIn the example above, we are listening to any change on the `background_image`.\r\n\r\nDid you try to look for `background_image` in the generated theme from underscores ?!  \r\nIf you did, you know by now that it’s not here 🤔 and if you didn’t, don’t, you will not find it !  \r\nWell, I’ve used it as an example to grab your attention on Core Controls/Settings !  \r\nSome Controls/Settings comes with WordPress by default, they can be modified or removed, but this will be for another article.\r\n\r\nI didn’t forget, I just delayed it 😈\r\nThe code above should go inside **customizer.js** between a :\r\n\r\n```js\r\n(function ($) { ... YES HERE ... } (jQuery));\r\n```\r\n\r\nI really hope that this will be useful.\r\n"}},{"0":"hide-wordpress-toolbar-with-wp_add_inline_style.md","1":{"frontmatter":{"title":"Hide WordPress Toolbar with wp_add_inline_style","description":"using wp_add_inline_style() function to hide the WordPress Toolbar or Admin Bar","date":"2020/05/22","tags":["Development","Tips and Tricks","Toolbar"],"featuredImage":"/static/img/little-girl-covering-her-face-with-her-hands.webp","relatedPosts":["the-clean-blog-wordpress-theme","full-screen-morphing-search-plugin"]},"content":"\r\nEver wanted to hide the WordPress Toolbar ?  \r\nIf you are a new developer, you should know that it's not allowed to hide it directly wit CSS.  \r\nBut even if you are a junior or senior WordPress user, you should consider this requirement for best practice, also you'll maybe learn something new 😉\r\n\r\n[The WordPress Toolbar](https://wordpress.org/support/article/toolbar/) is the little black bar on top of the site that only the logged in user(s) can see, depending on their [role(s)](https://wordpress.org/support/article/roles-and-capabilities/) and how the Super Admin or the Administrator has configured the visibility of this bar for each one…\r\n\r\nWe can set the display status of this bar for the front side of our website by using the [show_admin_bar()](https://developer.wordpress.org/reference/functions/show_admin_bar/) function.\r\n\r\nAlso, we can directly target it by it’s CSS _`id #wpadminbar`_ and hide it like so :\r\n\r\n```css\r\n#wpadminbar {\r\n\tdisplay: none;\r\n}\r\n```\r\n\r\nbut this way is not allowed for themes/plugins developers !\r\n\r\nYou can say, _“just use `show_admin_bar` !”_, and I would ask the following :  \r\n _“what if I want to hide it with CSS without using a stylesheet so I can control it with JS for later use ?!”_ 😉  \r\nIt’s not the main reason, you can have any other reason to hide it with CSS without using a stylesheet, scenarios are limitless.\r\n\r\nThis is where [wp_add_inline_style()](https://developer.wordpress.org/reference/functions/wp_add_inline_style/) function steps in 🙂  \r\n In your [functions.php](https://codex.wordpress.org/Functions_File_Explained) file, add the following :\r\n\r\n```php\r\n/**\r\n * Hide the Toolbar using inline style since we can't use #wpadminbar in CSS.\r\n */\r\nfunction myfunction_hide_adminbar() {\r\n    $hide_adminbar = \"\r\n        #wpadminbar{\r\n            display: none;\r\n        }\";\r\n    wp_add_inline_style( 'my-stylesheet-handle', $hide_adminbar );\r\n}\r\nadd_action( 'wp_enqueue_scripts', 'myfunction_hide_adminbar' );\r\n```\r\n\r\nPlease, pay attention to the `$handle` **my-stylesheet-handle** !  \r\nYou should replace it with the `$handle` of your stylesheet !  \r\nIn your **functions.php** file, you’ll find something like :\r\n\r\n```php\r\nwp_enqueue_style( 'your-stylesheet-handle', get_stylesheet_uri() );\r\n```\r\n\r\n**your-stylesheet-handle** is the `$handle` of your stylesheet 😉\r\n\r\nHope this will be useful 🙂  \r\nPlease don’t hesitate to share your opinion, suggestions or other methods.\r\n"}},{"0":"modifying-wordpress-theme-copyright-from-the-customizer.md","1":{"frontmatter":{"title":"Modifying WordPress theme's copyright from the Customizer","description":"modifying WordPress theme's copyright from the Customizer","date":"2020/05/21","tags":["Copyright","Customizer","Development","Tips and Tricks"],"featuredImage":"/static/img/copyright-word-under-magnifying-glass.webp","relatedPosts":["creating-a-customizer-control-with-javascript","listen-for-changes-in-customizer-preview"]},"content":"\r\nOne of the most asked question by new WordPress users is:\r\n**\"how to change the copyright ?\"**.  \r\nThey don't want a label of any kind on their site and that's totally comprehensible.  \r\nIn this post, I'll be talking of my own sauce to give users the ability to remove or modify the copyright without touching one line of code !\r\n\r\nIf you are new to the Customizer, don't be afraid, I was too a long time ago...  \r\nSo in this post I'll show you a technique to control the copyright of WordPress, generally displayed in the footer of a theme, from the Customizer.  \r\nYou can use it in your own theme to give your users a clean and easy way to modify the footer copyright, or use it in a child theme to modify the footer copyright of the parent theme that you are using.\r\n\r\n## 1- Replace the footer copyright by a function\r\n\r\nFirst of all select the part that should be modified. Generally speaking, it's a sentence like: \"_Proudly powered by WordPress, Theme: theme-name by theme-author_\".\r\nI'm going to take the generated footer by [\\_s](https://underscores.me/) (underscores) as an example for this task.\r\nLooking inside the **footer.php**, we can see a code like this:\r\n\r\n```php\r\n<footer id=\"colophon\" class=\"site-footer\">\r\n    <div class=\"site-info\">\r\n        <a href=\"<?php echo esc_url( __( 'https://wordpress.org/', 'midday' ) ); ?>\">\r\n            <?php\r\n            /* translators: %s: CMS name, i.e. WordPress. */\r\n            printf( esc_html__( 'Proudly powered by %s', 'midday' ), 'WordPress' );\r\n            ?>\r\n        </a>\r\n        <span class=\"sep\"> | </span>\r\n            <?php\r\n            /* translators: 1: Theme name, 2: Theme author. */\r\n            printf( esc_html__( 'Theme: %1$s by %2$s.', 'midday' ), 'midday', '<a href=\"https://github.com/LebCit\">LebCit</a>' );\r\n            ?>\r\n    </div><!-- .site-info -->\r\n</footer><!-- #colophon -->\r\n```\r\n\r\nHere, we are interested with the code inside `<div class=\"site-info\">`, so let's cut it, paste it somewhere else (like notepad), and replace it by a php function.  \r\nThe code should now be like the following:\r\n\r\n```php\r\n<footer id=\"colophon\" class=\"site-footer\">\r\n    <div id=\"site-info\" class=\"site-info\">\r\n        <?php midday_site_info(); ?>\r\n    </div><!-- .site-info -->\r\n</footer><!-- #colophon -->\r\n```\r\n\r\nYou can name the function whatever you like, but be sure to replace any name modification according to the changes you have made in the wright place in the code.  \r\nPlease note that I've added an `<id=\"site-info\">` this will be used in the Customizer.\r\n\r\n## 2- Put the footer copyright in functions.php\r\n\r\nNow we have to connect this `midday_site_info()` function with the block of code previously pasted elsewhere.  \r\nIn the [functions.php](https://codex.wordpress.org/Functions_File_Explained) file of your theme or your child theme, put this code, I'll explain it just after :\r\n\r\n```php\r\n/**\r\n * Output the theme's copyright depending on user's choice.\r\n */\r\nfunction midday_site_info() {\r\n    $midday_footer_copyright_area_checkbox = get_theme_mod( 'midday_footer_copyright_area_checkbox', true );\r\n    $midday_custom_copyright_textarea      = get_theme_mod( 'midday_custom_copyright_textarea', '' );\r\n    if ( ! empty( $midday_footer_copyright_area_checkbox ) ) :\r\n            $html  = '<a href=\"' . esc_url( 'https://wordpress.org/' ) . '\">' . esc_html( 'Proudly powered by WordPress' ) . '</a>';\r\n            $html .= '<span class=\"sep\"> | </span>';\r\n            $html .= esc_html( 'Theme: MidDay by ' ) . '<a href=\"' . esc_url( 'https://lebcit.github.io/' ) . '\">' . esc_html( 'LebCit' ) . '</a>';\r\n            echo wp_kses(\r\n                $html,\r\n                array(\r\n                    'a'  => array(\r\n                        'href' => array(),\r\n                    ),\r\n                    'span'  => array(\r\n                        'class' => array(),\r\n                    ),\r\n                )\r\n            );\r\n    elseif ( empty( $midday_footer_copyright_area_checkbox ) && ! empty( $midday_custom_copyright_textarea ) ) :\r\n        echo wp_kses_post( $midday_custom_copyright_textarea ); // Allow html.\r\n    endif;\r\n}\r\n```\r\n\r\nWhat in the hell is this ?  \r\nIt's nothing 😂 it's just the same pasted elsewhere code in PHP with some variables and an `if/elseif` statement to take care of the user's choice.\r\n\r\nInside the function, I've defined 2 variables. Each one is related to a `theme_mod` (theme modification) that we will create and explain in a moment.\r\n\r\nI've opened an `if` statement saying:  \r\n_if the first variable (remember it's related to a `theme_mod`, yes it's a checkbox)_ 😉 _is not empty (so it have a check tick, it's checked) please populate the copyright with the following code_.\r\nThe code here is pretty easy to understand.\r\nI've defined an `$html` variable replicating the pasted elsewhere code, then I've asked PHP to echo this code using [wp_kses](https://developer.wordpress.org/reference/functions/wp_kses/) filtering the text content and striping out disallowed HTML.\r\n\r\nIn other words:  \r\n_hey `wp_kses`, please echo the defined `$html` variable, and please allow it to only have `a` tag with `href` attribute and `span` tag with `class` attribute, thank you very much_ 😊\r\n\r\nAfter that, I've opened an `elseif` statement saying:  \r\n_okay, if the first variable is empty (the checkbox is not checked) and the second variable (a text area) is not empty, please populate the copyright with the content of the text area allowing the user to use HTML inside it with_ [wp_kses_post](https://developer.wordpress.org/reference/functions/wp_kses_post/) _that will keep an eye and make sure the user type allowed HTML only, that's it I've nothing more to ask so please close the if statement with this `endif;`_\r\n\r\n## 3- Create settings and controls in the Customizer\r\n\r\nDo you remember the 2 previous variables ?  \r\nThey where related to theme's modifications.  \r\nIt's time to create those `theme_mod` and test our code.  \r\nTo keep the functions.php file clean, we will put the following in a customizer.php file if you don't have one already. Yous just have to require it from functions.php like so :\r\n\r\n```php\r\nrequire get_template_directory() . '/inc/customizer.php';\r\n```\r\n\r\nPlease note that in this example the file is in a folder named inc (for includes) at the root of the theme or the child theme, you can change this but be sure to indicate the correct path.  \r\nNow, put the following in customizer.php, let's see the code and explain it later:\r\n\r\n```php\r\nfunction midday_customize_register( $wp_customize ) {\r\n    /**\r\n     * MidDay Theme Panel\r\n     */\r\n    $wp_customize->add_panel(\r\n        'midday_panel',\r\n        array(\r\n            'title'       => __( 'MidDay Theme', 'midday' ),\r\n            'description' => esc_html__( 'Customize MidDay Theme', 'midday' ),\r\n            'priority'    => 0,\r\n        )\r\n    );\r\n\r\n    /**\r\n     * Footer Copyright Area Section.\r\n     */\r\n    $wp_customize->add_section(\r\n        'midday_footer_copyright_area_section',\r\n        array(\r\n            'title'       => esc_html__( 'Footer Copyright Area', 'midday' ),\r\n            'description' => __( 'Modify <b>Footer Copyright Area</b>.', 'midday' ),\r\n            'panel'       => 'midday_panel',\r\n            'priority'    => 15,\r\n        )\r\n    );\r\n\r\n    // Default copyright.\r\n    $wp_customize->add_setting(\r\n        'midday_footer_copyright_area_checkbox',\r\n        array(\r\n            'default'           => true,\r\n            'transport'         => 'postMessage',\r\n            'sanitize_callback' => 'midday_sanitize_checkbox',\r\n        )\r\n    );\r\n\r\n    $wp_customize->add_control(\r\n        'midday_footer_copyright_area_checkbox',\r\n        array(\r\n            'label'       => __( 'Enable/Disable Default Copyright.', 'midday' ),\r\n            'description' => __( 'This checkbox, once <b>unchecked</b>,<br>removes <b>Default Copyright.</b>', 'midday' ),\r\n            'section'     => 'midday_footer_copyright_area_section',\r\n            'type'        => 'checkbox',\r\n        )\r\n    );\r\n\r\n    $wp_customize->selective_refresh->add_partial(\r\n        'midday_footer_copyright_area_checkbox',\r\n        array(\r\n            'selector'        => '#site-info',\r\n            'settings'        => array( 'midday_footer_copyright_area_checkbox' ),\r\n            'render_callback' => 'midday_site_info',\r\n        )\r\n    );\r\n\r\n    // Custom copyright.\r\n    $wp_customize->add_setting(\r\n        'midday_custom_copyright_textarea',\r\n        array(\r\n            'default'           => '',\r\n            'transport'         => 'postMessage',\r\n            'sanitize_callback' => 'wp_kses_post', // Allow html.\r\n        )\r\n    );\r\n\r\n    $wp_customize->add_control(\r\n        'midday_custom_copyright_textarea',\r\n        array(\r\n            'label'       => esc_html__( 'Custom Copyright Textarea', 'midday' ),\r\n            'description' => __( 'To display a <b>Custom Copyright</b>,<br><b>uncheck</b> the <b>Default Copyright</b> checkbox,<br>then type a custom copyright in the textarea.<br><b>HTML</b> is allowed !', 'midday' ),\r\n            'section'     => 'midday_footer_copyright_area_section',\r\n            'type'        => 'textarea',\r\n            'input_attrs' => array(\r\n                'style'       => 'border: 1px solid #999',\r\n                'placeholder' => __( 'Enter Custom Copyright...', 'midday' ),\r\n            ),\r\n        )\r\n    );\r\n\r\n    $wp_customize->selective_refresh->add_partial(\r\n        'midday_custom_copyright_textarea',\r\n        array(\r\n            'selector'        => '#site-info',\r\n            'settings'        => array( 'midday_custom_copyright_textarea' ),\r\n            'render_callback' => 'midday_site_info',\r\n        )\r\n    );\r\n\r\n}\r\nadd_action( 'customize_register', 'midday_customize_register' );\r\n```\r\n\r\nDon't panic, it's pretty straightforward !  \r\nLet's break it down and you'll see.\r\n\r\n```php\r\nfunction mytheme_customize_register( $wp_customize )\r\n{\r\n    //All our sections, settings, and controls will be added here\r\n}\r\nadd_action( 'customize_register', 'mytheme_customize_register' );\r\n```\r\n\r\nThis is how we hook a function to the ['customize_register'](https://codex.wordpress.org/Plugin_API/Action_Reference/customize_register) action and put inside it our panels, sections, settings and controls.  \r\nLooking at our code, you can now understand that I've created a panel, a section, 2 settings and their 2 related controls.  \r\nI'm not going to dive into the Customizer, but if you're not familiar with it, a good start would be this [excellent guide](https://maddisondesigns.com/2017/05/the-wordpress-customizer-a-developers-guide-part-1/) by Anthony Hortin.  \r\nInstead, I'm going to explain a more important aspect here. If you take a good look at the code, you'll see something else under each control :\r\n\r\n```php\r\n$wp_customize->selective_refresh->add_partial\r\n```\r\n\r\nWhat is this and what does it do ?  \r\nWell, look closer and you'll figure it out yourself 😂  \r\n Just kidding, but in fact it's really clear.  \r\nLet's take one setting it's control and the related selective_refresh:\r\n\r\n```php\r\n// Default copyright.\r\n$wp_customize->add_setting(\r\n    'midday_footer_copyright_area_checkbox',\r\n    array(\r\n        'default'           => true,\r\n        'transport'         => 'postMessage',\r\n        'sanitize_callback' => 'midday_sanitize_checkbox',\r\n    )\r\n);\r\n\r\n$wp_customize->add_control(\r\n    'midday_footer_copyright_area_checkbox',\r\n    array(\r\n        'label'       => __( 'Enable/Disable Default Copyright.', 'midday' ),\r\n        'description' => __( 'This checkbox, once <b>unchecked</b>,<br>removes <b>Default Copyright.</b>', 'midday' ),\r\n        'section'     => 'midday_footer_copyright_area_section',\r\n        'type'        => 'checkbox',\r\n    )\r\n);\r\n\r\n$wp_customize->selective_refresh->add_partial(\r\n    'midday_footer_copyright_area_checkbox',\r\n    array(\r\n        'selector'        => '#site-info',\r\n        'settings'        => array( 'midday_footer_copyright_area_checkbox' ),\r\n        'render_callback' => 'midday_site_info',\r\n    )\r\n);\r\n```\r\n\r\nRemember the first variable ?  \r\nWell here is it's `theme_mod` !  \r\nTake a look at the **setting** name `midday_footer_copyright_area_checkbox` 😉  \r\nThe important part here is `'transport' => 'postMessage'`, because it tells the browser not to reload, but to make the change(s) in place !  \r\nAnother important aspect in the **setting** is `'sanitize_callback' => 'midday_sanitize_checkbox'`, this is a function to sanitize the checkbox, you should put it **after** the `'customize_register'` action hook:\r\n\r\n```php\r\nif ( ! function_exists( 'midday_sanitize_checkbox' ) ) {\r\n    /**\r\n     * Switch sanitization\r\n     *\r\n     * @param string $input Switch value.\r\n     * @return integer  Sanitized value\r\n     */\r\n    function midday_sanitize_checkbox( $input ) {\r\n        if ( false === $input ) {\r\n            return 0;\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn the **control**, the important part is the type of the control, as you can see it's defined as checkbox, no surprise, WYaskIWYG 😂  \r\nFor the **partial**, the important part is the selector, it must be an `id`, now you know why I've added an `id` previously 👍  \r\nIf you look at the `settings` and the `render_callback` of the **partial**, you'll understand that everything is related 🔗 and that we are just putting the wright piece in the wright place 🧩\r\n\r\nYou maybe guessed it out or not, but yes I'm developing a new theme called MidDay (in fact I've finished it, just some clean up remaining) and I'll submit it very soon 😁\r\n\r\nI really hope that this was helpful.\r\n"}},{"0":"get-google-products-on-desktop-with-thunderbird.md","1":{"frontmatter":{"title":"Get Google products on desktop with Thunderbird","date":"2020/05/14","description":"using Google products on a desktop with Thunderbird","featuredImage":"/static/img/red-thunderbird-classic-car-photography.webp","tags":["Tips and Tricks"],"relatedPosts":["clear-your-local-development-cache-with-js","change-page-title-dynamically"]},"content":"\r\n**Every time** you want to check your Gmail, Agenda, Drive, Keep... on your desktop, you have to open a browser and log in, to be able use them.\r\nDid you ever asked your self how much time this process is taking in a week, a month, a year ?\r\nWell, with Thunderbird you will not ask yourself that anymore !\r\n\r\n## Thunderbird\r\n\r\nI'm not going to explain in this post how to install Thunderbird, but you can just go to [the official website](https://www.thunderbird.net/en-US/) and download it, the installation process is **very** easy.  \r\nSo, assuming you have Thunderbird installed and running, I'm going to explain how to get all Google products directly inside it, and it's also very easy to do it.\r\n\r\n## Profile or profiles\r\n\r\nWhen you install Thunderbird and run it, a default profile will be created. You can access the profiles' manager by typing this command :\r\n\r\n```batch\r\nthunderbird.exe -p\r\n```\r\n\r\nYou'll then be able to do various actions, as adding, renaming, deleting... a profile and so on...  \r\nThis is not a part of the process but it's important to know that you can do it, maybe you want to add a profile for your work and another for you 😉 this is a very convenient way to separate your personal stuff 👍  \r\nOnce a profile is created, start it, add your name (as you want to display it for this account), your e-mail, and your password, and that's it !  \r\n**Important note** if you use multiple profiles (or even one if you want) :\r\nyou don't have to type the above command each time you want to access the manager, just untick the _Don't ask at startup_ box and now you'll get the manager every time you launch Thunderbird.\r\n\r\n## Google products\r\n\r\nThe easiest way is to add only one plugin. To add an extension in Thunderbird, click the main menu button, choose **Add-ons**, then **Extensions** in the left panel, search for _ThunderKeepPlus_ and install it.  \r\nOnce installed, it will ask you to connect to your Google account, after that your Google Keep will be displayed, in a new tab inside Thunderbird, as if it was in a browser and you will have access to all Google products as you usually do in a browser 💪\r\n\r\n## Security\r\n\r\nI don't have to tell you to be aware of this technique because you should only do it on your personal machine only, but I'm telling you just for security and conscience reasons 😊\r\n\r\n## Final note\r\n\r\nIf you want to know more about Thunderbird, head over [the official support](https://support.mozilla.org/en-US/products/thunderbird) , everything is well explained.\r\n\r\n---\r\n\r\n<p class=\"post-content hide\">\r\n<em>Note: background image used, work of <a href=\"https://pxhere.com/en/photo/417303\">Les Haines</a></em>\r\n</p>\r\n"}},{"0":"the-clean-blog-wordpress-theme.md","1":{"frontmatter":{"title":"The Clean Blog WordPress theme","description":"the development and usage of The Clean Blog WordPress theme","date":"2020/05/09","tags":["Development","Theme"],"featuredImage":"/static/img/man-hands-typing-on-keyboard-of-laptop-with-screen-showing-wordpress-backend.webp","relatedPosts":["full-screen-morphing-search-plugin","hide-wordpress-toolbar-with-wp_add_inline_style"]},"content":"\r\nHello everyone,\r\n\r\n## Credits\r\n\r\nThis WordPress Theme wouldn’t have seen the light without :\r\n\r\n-   the [Clean Blog](https://startbootstrap.com/themes/clean-blog/) template by [David Miller](https://github.com/davidtmiller)\r\n-   the starter theme [Underscores](https://underscores.me/) by [Automattic](https://automattic.com/)\r\n-   and our beloved CMS [WordPress](https://wordpress.org/)\r\n\r\n## About\r\n\r\nUsers, like I was a long time ago, tend to search for themes with ‘cool’ functionalities to make their websites stand out without knowing the real cost (performance, accessibility, best practices, search engine optimization, and so on…) of the ‘bling-bling’ they are using…\r\nTwo years ago, when _The Clean Blog_ was released (in 2017), I was not aware of those critical facts and developed it with a user mindset…\r\nToday (in 2019), after two more years of diving, learning and improving, I can’t just sit back and let even a few hundreds of people use a bloated theme with a lot of ‘bling-bling’ functionalities !\r\nAs developers improve, they don’t feel shy or ashamed at all to point users in the right direction(s) for a better experience and a better Web even if this mean hours of developing are going to be wasted ( not really because we learn from our mistakes ) and gone with the wind…\r\nUsers are always free to switch from a theme to any other one, but for me, as a conscientious developer, I have to make the best decisions concerning my code for the web and the users experience…\r\nIn short, the new theme is much more well coded and to be very honest is not bloated like the old one…\r\n\r\n## Usage\r\n\r\n1- To use this theme, you have to [download](https://wordpress.org/themes/the-clean-blog/) it from the WordPress themes repository and add it under _Appearance→Themes→Add New→Upload Theme_, or search for **The Clean Blog** under _Appearance→Themes→Add New_ in the backend.\r\n\r\n2- Since the theme is Bootstrap based, I've wrote a lightweight JavaScript plugin, [bsWalker.js](https://github.com/LebCit/bsWalker.js) , to take care of multilevel dropdown navigation.\r\nTo create an item link with children :\r\n\r\n-   go to _Appearance→Menus_ in the backend\r\n-   create a **Custom Link**\r\n-   in _URL_ type **\\#**\r\n-   in _Link Text_ type the label of your choice\r\n-   put children links under this custom link\r\n-   in **Menu Settings**, under the created menu, choose **Primary** as location and save your menu\r\n-   nothing more to do, that's it ! 😁\r\n\r\n3- In the Customizer (_Appearance→Customize_ or _Customize_ link in the Admin Bar), you'll find a panel named _The Clean Blog Theme_ and four sections (for now: _Homepage Header Slider, Featured Image Display, Footer Social Sites Links and Footer Copyright Area_) under it. Under each section, controls are explained in details.\r\nNote that the third section _Header Image_ is only for the home page, each post and page can have their own header image by assigning a _Featured image_ to the post or the page.\r\n\r\n4- The only plugin I've used is [slabText](https://freqdec.github.io/slabText/) by [Brian McAllister](https://github.com/freqdec) to control the size of the site title, so don't worry if your site title is long, it will be big and bold ✨\r\n\r\n5- The Clean Blog (TCB) is a Responsive WordPress theme, perfect for personal or company blogs.\r\n\r\n## Feedback ?\r\n\r\nHead over the [support page](https://wordpress.org/support/theme/the-clean-blog) to tell me if you’re having some issues or if you wish to see some features added to the theme 😉\r\nYou can also leave a review on the [reviews page](https://wordpress.org/support/theme/the-clean-blog/reviews/) to give me a push 👍\r\nThanks in advance for your feedback !\r\n\r\n## Final word\r\n\r\nI really hope that this theme will be useful for a lot of WordPress users and that they'll enjoy using it. I'll be making improvements to TCB from time to time, so don't worry, and be talking about it here, so stay tuned !\r\n"}},{"0":"back-to-the-roots-with-a-static-site.md","1":{"frontmatter":{"title":"Back to the roots with a static site","description":"This is a post about my own experience with development and static site","date":"2020/05/04","tags":["Development"],"featuredImage":"/static/img/code-books-with-plant.webp","relatedPosts":["the-clean-blog-wordpress-theme","full-screen-morphing-search-plugin"]},"content":"\r\nFrom Zero to Hero or at least not a zero anymore !  \r\nFrom the Highway to the Classic Road.\r\n\r\nIf you didn't read my [About](/about/) section, you can quickly guess from the tagline that I'm a self-taught developer.\r\n\r\nI didn't have a clue about the amazing world of code, or even heard about HTML, CSS or JS.\r\nSo with a will to understand, after being played and robbed by a so-called _developer_, my first task was to learn English ! Oh, yeah 🤣\r\n\r\nAfter acquiring a basic level of understanding, the real deal was to confront this nightmare, `the code` 👻  \r\nFrom where should I begin ?!  \r\nWhat should I learn first ?!  \r\nHow to create a website ?!  \r\n...  \r\nSo many questions with no clear answer for me 😱\r\n\r\nSince I wanted to start quick (newbie error), I took the wrong path and started to seek for easy ways to create a website (don't want to talk about it, very bad memory). It took me a while to realise that this was not a good choice and that I'm not really learning...  \r\nA friend talked about a tool for creating dynamic websites called Joomla, I created my first website with Joomla and coded a little bit, but Joomla was (for me) illogical (not clear/consistent), so I tried Drupal (a cannon to kill a fly), then discovered WordPress 💘\r\n\r\nI don't know why, but I felled at home with WordPress, especially with the Codex, the Forums and tons of tutorials everywhere on the Web, the nightmare was turning to a dream coming true...  \r\nMeanwhile, my English was improving with all the readings and my experience was getting pleasant and smoother.  \r\nSo I decided to make [my first plugin](https://wordpress.org/plugins/full-screen-morphing-search/) (2016), then [my first theme](https://wordpress.org/themes/the-clean-blog/) (2017), and I did it with **a lot of difficulties**... I wanted to quit many times, but a voice in my head was telling me: \"_continue, you've already spent a lot of time over this and you are so close, don't give up now !_\".\r\n\r\nSince then, I've helped as much as I can other people, the same way great developers helped me by pointing to the right direction.  \r\nBut, yes there is always a but, I've written again my plugin and my theme from ground up, because I was improving, and everything with bells and whistles in the code world became (for me) useless.  \r\nI was turning to usability over functionality, simplicity over complexity and accessibility over bling bling code !\r\n\r\nLast year (2019), I was watching a lot of great developers turning their personal sites to static and a growing interest for [Static Site Generators](https://jamstack.org/generators/) and [Headless CMS](https://jamstack.org/headless-cms/).  \r\nI was wondering why ?  \r\nI had a .tk domain that stopped working from one day to the next ! Another lesson in this world...  \r\nSo, it was time to turn over and try the static world. I've found myself in a completely new playground and didn't want to waste time, again, just to output basic HTML (another newbie error)...  \r\nAfter trying to totally code my site without an SSG, I figured out that it was a time killer and surely not the best way today.  \r\nComing from WordPress, I wanted a CMS to output my site, so I've tried [jocms](https://jocms.net/) and [Publii](https://getpublii.com/) but I was not satisfied at all by the result nor the limitations...  \r\nIn 2021, after trying some SSG, I deeply felled in love with [Eleventy](https://www.11ty.dev/) 💘, one of the best SSG in my opinion, for it's freedom, power and simplicity.  \r\nInteresting post : [Choosing the Best Static Site Generator](https://snipcart.com/blog/choose-best-static-site-generator).\r\n\r\nI was working on a new WordPress theme, and decided to bake it on the Classic Road and use it for me as a beginning point to my new site.  \r\nBig, bold and clear 😉\r\n\r\nI really hope that you like it.\r\n"}},{"0":"full-screen-morphing-search-plugin.md","1":{"frontmatter":{"title":"Full Screen Morphing Search Plugin","description":"my first WordPress plugin, full screen morphing search","date":"2020/04/28","tags":["Development","Plugin"],"featuredImage":"/static/img/man-hand-holding-lens.webp","relatedPosts":["hide-wordpress-toolbar-with-wp_add_inline_style","the-clean-blog-wordpress-theme"]},"content":"\r\nI’m very excited and happy to announce the release (in 2016) of **my first plugin** ! This [plugin](https://wordpress.org/plugins/full-screen-morphing-search/) is based on the [Simple Morphing Search](http://tympanus.net/codrops/2014/11/04/simple-morphing-search/) experimental effect created by [Mary Lou (Manoela Ilic)](http://tympanus.net/codrops/author/crnacura/).\r\n\r\nIt took me a week of hard work to implement this effect into WordPress. Some CSS rules were added, others slightly modified and some of them completely removed ! The JS is not the same at all ! The original effect is triggered with a function by clicking on a search input. This function relies on another script ([classie – class helper functions](https://github.com/desandro/classie#classie---class-helper-functions)) to get the job done. I’ve removed them and created a simple JavaScript file that does the same job with 60 lines less code !\r\n\r\nI hope that this plugin will be useful for everyone using it. If you try it, don’t be shy and give me your feedback on the [repo](https://wordpress.org/support/plugin/full-screen-morphing-search/reviews/) 🙂\r\n"}}]